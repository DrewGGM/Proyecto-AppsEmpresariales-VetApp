Estructura de la carpeta: C:\Users\andre\Downloads\5to Semestre\apps empresariales\frontend\Proyecto-AppsEmpresariales-VetApp\src

├── app
│   ├── app-routing.module.ts
│   │   Content:
│   │       File size: 868 bytes
│   │       Total lines: 36
│   │       import { NgModule } from '@angular/core';
│   │       import { RouterModule, Routes } from '@angular/router';
│   │       import { AuthGuard } from './core/auth/guards/auth.guard';
│   │       
│   │       const routes: Routes = [
│   │         // Rutas de autenticación (solo para usuarios no logueados)
│   │         {
│   │           path: 'auth',
│   │           loadChildren: () => import('./features/auth/auth.module').then(m => m.AuthModule),
│   │         },
│   │         
│   │         // Rutas protegidas (solo para usuarios logueados)
│   │         {
│   │           path: 'usuarios',
│   │           loadChildren: () => import('./features/users/users.module').then(m => m.UsersModule),
│   │         },
│   │         
│   │         // Ruta por defecto
│   │         {
│   │           path: '',
│   │           redirectTo: '/usuarios',
│   │           pathMatch: 'full'
│   │         },
│   │         
│   │         // Ruta wildcard
│   │         {
│   │           path: '**',
│   │           redirectTo: '/auth/login'
│   │         }
│   │       ];
│   │       
│   │       @NgModule({
│   │         imports: [RouterModule.forRoot(routes)],
│   │         exports: [RouterModule]
│   │       })
│   │       export class AppRoutingModule { }

│   ├── app.component.html
│   │   Content:
│   │       File size: 31 bytes
│   │       Total lines: 1
│   │       <router-outlet></router-outlet>

│   ├── app.component.scss
│   │   Content:
│   │       File size: 0 bytes
│   │       Total lines: 0

│   ├── app.component.spec.ts
│   │   Content:
│   │       File size: 1078 bytes
│   │       Total lines: 35
│   │       import { TestBed } from '@angular/core/testing';
│   │       import { RouterModule } from '@angular/router';
│   │       import { AppComponent } from './app.component';
│   │       
│   │       describe('AppComponent', () => {
│   │         beforeEach(async () => {
│   │           await TestBed.configureTestingModule({
│   │             imports: [
│   │               RouterModule.forRoot([])
│   │             ],
│   │             declarations: [
│   │               AppComponent
│   │             ],
│   │           }).compileComponents();
│   │         });
│   │       
│   │         it('should create the app', () => {
│   │           const fixture = TestBed.createComponent(AppComponent);
│   │           const app = fixture.componentInstance;
│   │           expect(app).toBeTruthy();
│   │         });
│   │       
│   │         it(`should have as title 'vetApp'`, () => {
│   │           const fixture = TestBed.createComponent(AppComponent);
│   │           const app = fixture.componentInstance;
│   │           expect(app.title).toEqual('vetApp');
│   │         });
│   │       
│   │         it('should render title', () => {
│   │           const fixture = TestBed.createComponent(AppComponent);
│   │           fixture.detectChanges();
│   │           const compiled = fixture.nativeElement as HTMLElement;
│   │           expect(compiled.querySelector('h1')?.textContent).toContain('Hello, vetApp');
│   │         });
│   │       });

│   ├── app.component.ts
│   │   Content:
│   │       File size: 201 bytes
│   │       Total lines: 10
│   │       import { Component } from '@angular/core';
│   │       
│   │       @Component({
│   │         selector: 'app-root',
│   │         standalone: false,
│   │         templateUrl: './app.component.html'
│   │       })
│   │       export class AppComponent {
│   │         title = 'vetApp';
│   │       }

│   ├── app.module.ts
│   │   Content:
│   │       File size: 760 bytes
│   │       Total lines: 27
│   │       import { NgModule } from '@angular/core';
│   │       import { BrowserModule } from '@angular/platform-browser';
│   │       import { HttpClientModule } from '@angular/common/http';
│   │       
│   │       import { AppRoutingModule } from './app-routing.module';
│   │       import { AppComponent } from './app.component';
│   │       
│   │       // Importar módulos
│   │       import { SharedModule } from './shared/shared.module';
│   │       import { CoreModule } from './core/core.module';
│   │       
│   │       @NgModule({
│   │         declarations: [
│   │           // Solo el componente raíz de la aplicación
│   │           AppComponent
│   │         ],
│   │         imports: [
│   │           BrowserModule,
│   │           HttpClientModule,
│   │           AppRoutingModule,
│   │           CoreModule,
│   │           SharedModule // Todos los componentes compartidos vienen de aquí
│   │         ],
│   │         providers: [],
│   │         bootstrap: [AppComponent]
│   │       })
│   │       export class AppModule { }

│   ├── core
│   │   ├── auth
│   │   │   ├── guards
│   │   │   │   ├── auth.guard.spec.ts
│   │   │   │   │   Content:
│   │   │   │   │       File size: 478 bytes
│   │   │   │   │       Total lines: 17
│   │   │   │   │       import { TestBed } from '@angular/core/testing';
│   │   │   │   │       import { CanActivateFn } from '@angular/router';
│   │   │   │   │       
│   │   │   │   │       import { authGuard } from './auth.guard';
│   │   │   │   │       
│   │   │   │   │       describe('authGuard', () => {
│   │   │   │   │         const executeGuard: CanActivateFn = (...guardParameters) => 
│   │   │   │   │             TestBed.runInInjectionContext(() => authGuard(...guardParameters));
│   │   │   │   │       
│   │   │   │   │         beforeEach(() => {
│   │   │   │   │           TestBed.configureTestingModule({});
│   │   │   │   │         });
│   │   │   │   │       
│   │   │   │   │         it('should be created', () => {
│   │   │   │   │           expect(executeGuard).toBeTruthy();
│   │   │   │   │         });
│   │   │   │   │       });

│   │   │   │   ├── auth.guard.ts
│   │   │   │   │   Content:
│   │   │   │   │       File size: 1740 bytes
│   │   │   │   │       Total lines: 62
│   │   │   │   │       import { Injectable } from '@angular/core';
│   │   │   │   │       import { CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
│   │   │   │   │       import { Observable } from 'rxjs';
│   │   │   │   │       import { map, take } from 'rxjs/operators';
│   │   │   │   │       import { AuthService } from '../services/auth.service';
│   │   │   │   │       
│   │   │   │   │       @Injectable({
│   │   │   │   │         providedIn: 'root'
│   │   │   │   │       })
│   │   │   │   │       export class AuthGuard implements CanActivate, CanActivateChild {
│   │   │   │   │       
│   │   │   │   │         constructor(
│   │   │   │   │           private authService: AuthService,
│   │   │   │   │           private router: Router
│   │   │   │   │         ) {}
│   │   │   │   │       
│   │   │   │   │         canActivate(
│   │   │   │   │           route: ActivatedRouteSnapshot,
│   │   │   │   │           state: RouterStateSnapshot
│   │   │   │   │         ): Observable<boolean> | Promise<boolean> | boolean {
│   │   │   │   │           return this.checkAuthentication(state.url);
│   │   │   │   │         }
│   │   │   │   │       
│   │   │   │   │         canActivateChild(
│   │   │   │   │           childRoute: ActivatedRouteSnapshot,
│   │   │   │   │           state: RouterStateSnapshot
│   │   │   │   │         ): Observable<boolean> | Promise<boolean> | boolean {
│   │   │   │   │           return this.canActivate(childRoute, state);
│   │   │   │   │         }
│   │   │   │   │       
│   │   │   │   │         /**
│   │   │   │   │          * Verifica la autenticación del usuario
│   │   │   │   │          */
│   │   │   │   │         private checkAuthentication(url: string): Observable<boolean> {
│   │   │   │   │           return this.authService.isAuthenticated$.pipe(
│   │   │   │   │             take(1),
│   │   │   │   │             map(isAuthenticated => {
│   │   │   │   │               if (isAuthenticated) {
│   │   │   │   │                 // Verificar si el token ha expirado
│   │   │   │   │                 if (this.authService.isTokenExpired()) {
│   │   │   │   │                   this.authService.logout();
│   │   │   │   │                   this.redirectToLogin(url);
│   │   │   │   │                   return false;
│   │   │   │   │                 }
│   │   │   │   │                 return true;
│   │   │   │   │               } else {
│   │   │   │   │                 this.redirectToLogin(url);
│   │   │   │   │                 return false;
│   │   │   │   │               }
│   │   │   │   │             })
│   │   │   │   │           );
│   │   │   │   │         }
│   │   │   │   │       
│   │   │   │   │         /**
│   │   │   │   │          * Redirige al login con la URL de retorno
│   │   │   │   │          */
│   │   │   │   │         private redirectToLogin(returnUrl: string): void {
│   │   │   │   │           this.router.navigate(['/auth/login'], { 
│   │   │   │   │             queryParams: { returnUrl } 
│   │   │   │   │           });
│   │   │   │   │         }
│   │   │   │   │       }

│   │   │   │   ├── role.guard.spec.ts
│   │   │   │   │   Content:
│   │   │   │   │       File size: 478 bytes
│   │   │   │   │       Total lines: 17
│   │   │   │   │       import { TestBed } from '@angular/core/testing';
│   │   │   │   │       import { CanActivateFn } from '@angular/router';
│   │   │   │   │       
│   │   │   │   │       import { roleGuard } from './role.guard';
│   │   │   │   │       
│   │   │   │   │       describe('roleGuard', () => {
│   │   │   │   │         const executeGuard: CanActivateFn = (...guardParameters) => 
│   │   │   │   │             TestBed.runInInjectionContext(() => roleGuard(...guardParameters));
│   │   │   │   │       
│   │   │   │   │         beforeEach(() => {
│   │   │   │   │           TestBed.configureTestingModule({});
│   │   │   │   │         });
│   │   │   │   │       
│   │   │   │   │         it('should be created', () => {
│   │   │   │   │           expect(executeGuard).toBeTruthy();
│   │   │   │   │         });
│   │   │   │   │       });

│   │   │   │   └── role.guard.ts
│   │   │   │       Content:
│   │   │   │           File size: 1939 bytes
│   │   │   │           Total lines: 59
│   │   │   │           import { Injectable } from '@angular/core';
│   │   │   │           import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
│   │   │   │           import { Observable } from 'rxjs';
│   │   │   │           import { map, take } from 'rxjs/operators';
│   │   │   │           import { AuthService } from '../services/auth.service';
│   │   │   │           
│   │   │   │           @Injectable({
│   │   │   │             providedIn: 'root'
│   │   │   │           })
│   │   │   │           export class RoleGuard implements CanActivate {
│   │   │   │           
│   │   │   │             constructor(
│   │   │   │               private authService: AuthService,
│   │   │   │               private router: Router
│   │   │   │             ) {}
│   │   │   │           
│   │   │   │             canActivate(
│   │   │   │               route: ActivatedRouteSnapshot,
│   │   │   │               state: RouterStateSnapshot
│   │   │   │             ): Observable<boolean> | Promise<boolean> | boolean {
│   │   │   │               
│   │   │   │               return this.authService.user$.pipe(
│   │   │   │                 take(1),
│   │   │   │                 map(user => {
│   │   │   │                   if (!user) {
│   │   │   │                     this.router.navigate(['/auth/login']);
│   │   │   │                     return false;
│   │   │   │                   }
│   │   │   │           
│   │   │   │                   // Obtener roles requeridos de la configuración de la ruta
│   │   │   │                   const requiredRoles: string[] = route.data['roles'] || [];
│   │   │   │                   const requiredPermissions: string[] = route.data['permissions'] || [];
│   │   │   │           
│   │   │   │                   // Si no hay roles o permisos requeridos, permitir acceso
│   │   │   │                   if (requiredRoles.length === 0 && requiredPermissions.length === 0) {
│   │   │   │                     return true;
│   │   │   │                   }
│   │   │   │           
│   │   │   │                   // Verificar roles
│   │   │   │                   const hasRequiredRole = requiredRoles.length === 0 || 
│   │   │   │                                          requiredRoles.includes(user.role);
│   │   │   │           
│   │   │   │                   // Verificar permisos
│   │   │   │                   const hasRequiredPermissions = requiredPermissions.length === 0 ||
│   │   │   │                                                requiredPermissions.every(permission => 
│   │   │   │                                                  this.authService.hasPermission(permission)
│   │   │   │                                                );
│   │   │   │           
│   │   │   │                   if (hasRequiredRole && hasRequiredPermissions) {
│   │   │   │                     return true;
│   │   │   │                   } else {
│   │   │   │                     // Redirigir al dashboard si no tiene permisos
│   │   │   │                     this.router.navigate(['/']);
│   │   │   │                     return false;
│   │   │   │                   }
│   │   │   │                 })
│   │   │   │               );
│   │   │   │             }
│   │   │   │           }

│   │   │   ├── interceptors
│   │   │   │   ├── token.interceptor.spec.ts
│   │   │   │   │   Content:
│   │   │   │   │       File size: 497 bytes
│   │   │   │   │       Total lines: 17
│   │   │   │   │       import { TestBed } from '@angular/core/testing';
│   │   │   │   │       import { HttpInterceptorFn } from '@angular/common/http';
│   │   │   │   │       
│   │   │   │   │       import { tokenInterceptor } from './token.interceptor';
│   │   │   │   │       
│   │   │   │   │       describe('tokenInterceptor', () => {
│   │   │   │   │         const interceptor: HttpInterceptorFn = (req, next) => 
│   │   │   │   │           TestBed.runInInjectionContext(() => tokenInterceptor(req, next));
│   │   │   │   │       
│   │   │   │   │         beforeEach(() => {
│   │   │   │   │           TestBed.configureTestingModule({});
│   │   │   │   │         });
│   │   │   │   │       
│   │   │   │   │         it('should be created', () => {
│   │   │   │   │           expect(interceptor).toBeTruthy();
│   │   │   │   │         });
│   │   │   │   │       });

│   │   │   │   └── token.interceptor.ts
│   │   │   │       Content:
│   │   │   │           File size: 3198 bytes
│   │   │   │           Total lines: 100
│   │   │   │           import { Injectable } from '@angular/core';
│   │   │   │           import {
│   │   │   │             HttpRequest,
│   │   │   │             HttpHandler,
│   │   │   │             HttpEvent,
│   │   │   │             HttpInterceptor,
│   │   │   │             HttpErrorResponse
│   │   │   │           } from '@angular/common/http';
│   │   │   │           import { Observable, throwError, BehaviorSubject } from 'rxjs';
│   │   │   │           import { catchError, filter, take, switchMap } from 'rxjs/operators';
│   │   │   │           import { AuthService } from '../services/auth.service';
│   │   │   │           
│   │   │   │           @Injectable()
│   │   │   │           export class TokenInterceptor implements HttpInterceptor {
│   │   │   │             private isRefreshing = false;
│   │   │   │             private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);
│   │   │   │           
│   │   │   │             constructor(private authService: AuthService) {}
│   │   │   │           
│   │   │   │             intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
│   │   │   │               // Agregar token a las peticiones si está disponible
│   │   │   │               const authRequest = this.addTokenToRequest(request);
│   │   │   │           
│   │   │   │               return next.handle(authRequest).pipe(
│   │   │   │                 catchError((error: HttpErrorResponse) => {
│   │   │   │                   // Manejar errores 401 (Unauthorized)
│   │   │   │                   if (error.status === 401 && this.authService.isAuthenticated()) {
│   │   │   │                     return this.handle401Error(authRequest, next);
│   │   │   │                   }
│   │   │   │           
│   │   │   │                   // Manejar otros errores
│   │   │   │                   return throwError(() => error);
│   │   │   │                 })
│   │   │   │               );
│   │   │   │             }
│   │   │   │           
│   │   │   │             /**
│   │   │   │              * Agrega el token de autorización a la petición
│   │   │   │              */
│   │   │   │             private addTokenToRequest(request: HttpRequest<any>): HttpRequest<any> {
│   │   │   │               const token = this.authService.getToken();
│   │   │   │               
│   │   │   │               if (token && !this.isAuthRequest(request)) {
│   │   │   │                 return request.clone({
│   │   │   │                   setHeaders: {
│   │   │   │                     Authorization: `Bearer ${token}`
│   │   │   │                   }
│   │   │   │                 });
│   │   │   │               }
│   │   │   │               
│   │   │   │               return request;
│   │   │   │             }
│   │   │   │           
│   │   │   │             /**
│   │   │   │              * Verifica si es una petición de autenticación
│   │   │   │              */
│   │   │   │             private isAuthRequest(request: HttpRequest<any>): boolean {
│   │   │   │               return request.url.includes('/auth/');
│   │   │   │             }
│   │   │   │           
│   │   │   │             /**
│   │   │   │              * Maneja errores 401 intentando refrescar el token
│   │   │   │              */
│   │   │   │             private handle401Error(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
│   │   │   │               if (!this.isRefreshing) {
│   │   │   │                 this.isRefreshing = true;
│   │   │   │                 this.refreshTokenSubject.next(null);
│   │   │   │           
│   │   │   │                 const refreshToken = this.authService.getCurrentUser()?.refreshToken;
│   │   │   │                 
│   │   │   │                 if (refreshToken) {
│   │   │   │                   return this.authService.refreshToken().pipe(
│   │   │   │                     switchMap((response) => {
│   │   │   │                       this.isRefreshing = false;
│   │   │   │                       this.refreshTokenSubject.next(response.token);
│   │   │   │                       
│   │   │   │                       // Reintentar la petición original con el nuevo token
│   │   │   │                       return next.handle(this.addTokenToRequest(request));
│   │   │   │                     }),
│   │   │   │                     catchError((error) => {
│   │   │   │                       this.isRefreshing = false;
│   │   │   │                       this.authService.logout();
│   │   │   │                       return throwError(() => error);
│   │   │   │                     })
│   │   │   │                   );
│   │   │   │                 } else {
│   │   │   │                   this.isRefreshing = false;
│   │   │   │                   this.authService.logout();
│   │   │   │                   return throwError(() => new Error('No refresh token available'));
│   │   │   │                 }
│   │   │   │               } else {
│   │   │   │                 // Si ya se está refrescando el token, esperar a que termine
│   │   │   │                 return this.refreshTokenSubject.pipe(
│   │   │   │                   filter(token => token !== null),
│   │   │   │                   take(1),
│   │   │   │                   switchMap(() => next.handle(this.addTokenToRequest(request)))
│   │   │   │                 );
│   │   │   │               }
│   │   │   │             }
│   │   │   │           }

│   │   │   ├── models
│   │   │   │   ├── credentials.interface.ts
│   │   │   │   │   Content:
│   │   │   │   │       File size: 281 bytes
│   │   │   │   │       Total lines: 15
│   │   │   │   │       export interface LoginCredentials {
│   │   │   │   │         email: string;
│   │   │   │   │         password: string;
│   │   │   │   │         remember?: boolean;
│   │   │   │   │       }
│   │   │   │   │       
│   │   │   │   │       export interface ForgotPasswordRequest {
│   │   │   │   │         email: string;
│   │   │   │   │       }
│   │   │   │   │       
│   │   │   │   │       export interface ResetPasswordRequest {
│   │   │   │   │         token: string;
│   │   │   │   │         newPassword: string;
│   │   │   │   │         confirmPassword: string;
│   │   │   │   │       }

│   │   │   │   └── user-session.interface.ts
│   │   │   │       Content:
│   │   │   │           File size: 371 bytes
│   │   │   │           Total lines: 19
│   │   │   │           export interface UserSession {
│   │   │   │             userId: number;
│   │   │   │             name: string;
│   │   │   │             lastName: string;
│   │   │   │             email: string;
│   │   │   │             role: string;
│   │   │   │             success: boolean;
│   │   │   │             message: string;
│   │   │   │             token?: string;
│   │   │   │             refreshToken?: string;
│   │   │   │             expiresAt?: Date;
│   │   │   │           }
│   │   │   │           
│   │   │   │           export interface AuthState {
│   │   │   │             isAuthenticated: boolean;
│   │   │   │             user: UserSession | null;
│   │   │   │             loading: boolean;
│   │   │   │             error: string | null;
│   │   │   │           }

│   │   │   └── services
│   │   │       ├── auth.service.spec.ts
│   │   │       │   Content:
│   │   │       │       File size: 363 bytes
│   │   │       │       Total lines: 16
│   │   │       │       import { TestBed } from '@angular/core/testing';
│   │   │       │       
│   │   │       │       import { AuthService } from './auth.service';
│   │   │       │       
│   │   │       │       describe('AuthService', () => {
│   │   │       │         let service: AuthService;
│   │   │       │       
│   │   │       │         beforeEach(() => {
│   │   │       │           TestBed.configureTestingModule({});
│   │   │       │           service = TestBed.inject(AuthService);
│   │   │       │         });
│   │   │       │       
│   │   │       │         it('should be created', () => {
│   │   │       │           expect(service).toBeTruthy();
│   │   │       │         });
│   │   │       │       });

│   │   │       └── auth.service.ts
│   │   │           Content:
│   │   │               File size: 7629 bytes
│   │   │               Total lines: 263
│   │   │               import { Injectable } from '@angular/core';
│   │   │               import { HttpClient } from '@angular/common/http';
│   │   │               import { BehaviorSubject, Observable, throwError } from 'rxjs';
│   │   │               import { tap, catchError, map } from 'rxjs/operators';
│   │   │               import { Router } from '@angular/router';
│   │   │               import { environment } from '../../../../environments/environment';
│   │   │               import { LoginCredentials, ForgotPasswordRequest, ResetPasswordRequest } from '../models/credentials.interface';
│   │   │               import { UserSession, AuthState } from '../models/user-session.interface';
│   │   │               import { ToastService } from '../../services/toast.service';
│   │   │               
│   │   │               @Injectable({
│   │   │                 providedIn: 'root'
│   │   │               })
│   │   │               export class AuthService {
│   │   │                 private readonly API_URL = `${environment.apiUrl}/auth`;
│   │   │                 private readonly STORAGE_KEY = 'vetapp_user_session';
│   │   │                 
│   │   │                 // Estado de autenticación
│   │   │                 private authStateSubject = new BehaviorSubject<AuthState>({
│   │   │                   isAuthenticated: false,
│   │   │                   user: null,
│   │   │                   loading: false,
│   │   │                   error: null
│   │   │                 });
│   │   │                 
│   │   │                 // Observables públicos
│   │   │                 public authState$ = this.authStateSubject.asObservable();
│   │   │                 public user$ = this.authState$.pipe(map(state => state.user));
│   │   │                 public isAuthenticated$ = this.authState$.pipe(map(state => state.isAuthenticated));
│   │   │                 public loading$ = this.authState$.pipe(map(state => state.loading));
│   │   │               
│   │   │                 constructor(
│   │   │                   private http: HttpClient,
│   │   │                   private router: Router,
│   │   │                   private toastService: ToastService
│   │   │                 ) {
│   │   │                   this.initializeAuthState();
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Inicializa el estado de autenticación desde localStorage
│   │   │                  */
│   │   │                 private initializeAuthState(): void {
│   │   │                   try {
│   │   │                     const storedSession = localStorage.getItem(this.STORAGE_KEY);
│   │   │                     if (storedSession) {
│   │   │                       const userSession: UserSession = JSON.parse(storedSession);
│   │   │                       this.updateAuthState({
│   │   │                         isAuthenticated: true,
│   │   │                         user: userSession,
│   │   │                         loading: false,
│   │   │                         error: null
│   │   │                       });
│   │   │                     }
│   │   │                   } catch (error) {
│   │   │                     console.error('Error al cargar sesión desde localStorage:', error);
│   │   │                     this.clearStoredSession();
│   │   │                   }
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Actualiza el estado de autenticación
│   │   │                  */
│   │   │                 private updateAuthState(newState: Partial<AuthState>): void {
│   │   │                   const currentState = this.authStateSubject.value;
│   │   │                   this.authStateSubject.next({ ...currentState, ...newState });
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Autentica al usuario
│   │   │                  */
│   │   │                 login(credentials: LoginCredentials): Observable<UserSession> {
│   │   │                   this.updateAuthState({ loading: true, error: null });
│   │   │                   
│   │   │                   return this.http.post<UserSession>(`${this.API_URL}/login`, credentials)
│   │   │                     .pipe(
│   │   │                       tap(response => {
│   │   │                         if (response.success) {
│   │   │                           this.setUserSession(response, credentials.remember);
│   │   │                           this.updateAuthState({
│   │   │                             isAuthenticated: true,
│   │   │                             user: response,
│   │   │                             loading: false,
│   │   │                             error: null
│   │   │                           });
│   │   │                         } else {
│   │   │                           this.updateAuthState({
│   │   │                             isAuthenticated: false,
│   │   │                             user: null,
│   │   │                             loading: false,
│   │   │                             error: response.message || 'Error de autenticación'
│   │   │                           });
│   │   │                         }
│   │   │                       }),
│   │   │                       catchError(error => {
│   │   │                         const errorMessage = error.error?.message || 'Error de conexión';
│   │   │                         this.updateAuthState({
│   │   │                           isAuthenticated: false,
│   │   │                           user: null,
│   │   │                           loading: false,
│   │   │                           error: errorMessage
│   │   │                         });
│   │   │                         return throwError(() => error);
│   │   │                       })
│   │   │                     );
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Cierra la sesión del usuario
│   │   │                  */
│   │   │                 logout(): void {
│   │   │                   this.clearStoredSession();
│   │   │                   this.updateAuthState({
│   │   │                     isAuthenticated: false,
│   │   │                     user: null,
│   │   │                     loading: false,
│   │   │                     error: null
│   │   │                   });
│   │   │                   this.router.navigate(['/auth/login']);
│   │   │                   this.toastService.success('Sesión cerrada correctamente');
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Solicita restablecimiento de contraseña
│   │   │                  */
│   │   │                 forgotPassword(request: ForgotPasswordRequest): Observable<any> {
│   │   │                   return this.http.post(`${this.API_URL}/forgot-password`, request)
│   │   │                     .pipe(
│   │   │                       catchError(error => {
│   │   │                         const errorMessage = error.error?.message || 'Error al enviar solicitud';
│   │   │                         return throwError(() => new Error(errorMessage));
│   │   │                       })
│   │   │                     );
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Restablece la contraseña
│   │   │                  */
│   │   │                 resetPassword(request: ResetPasswordRequest): Observable<any> {
│   │   │                   return this.http.post(`${this.API_URL}/reset-password`, request)
│   │   │                     .pipe(
│   │   │                       catchError(error => {
│   │   │                         const errorMessage = error.error?.message || 'Error al restablecer contraseña';
│   │   │                         return throwError(() => new Error(errorMessage));
│   │   │                       })
│   │   │                     );
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Verifica si el usuario está autenticado
│   │   │                  */
│   │   │                 isAuthenticated(): boolean {
│   │   │                   return this.authStateSubject.value.isAuthenticated;
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Obtiene el usuario actual
│   │   │                  */
│   │   │                 getCurrentUser(): UserSession | null {
│   │   │                   return this.authStateSubject.value.user;
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Obtiene el rol del usuario actual
│   │   │                  */
│   │   │                 getUserRole(): string {
│   │   │                   const user = this.getCurrentUser();
│   │   │                   return user ? user.role : '';
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Verifica si el usuario tiene rol de administrador
│   │   │                  */
│   │   │                 hasAdminRole(): boolean {
│   │   │                   return this.getUserRole() === 'ADMIN';
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Verifica si el usuario tiene un permiso específico
│   │   │                  */
│   │   │                 hasPermission(permission: string): boolean {
│   │   │                   const user = this.getCurrentUser();
│   │   │                   if (!user) return false;
│   │   │                   
│   │   │                   // Lógica básica de permisos por rol
│   │   │                   switch (user.role) {
│   │   │                     case 'ADMIN':
│   │   │                       return true; // Admin tiene todos los permisos
│   │   │                     case 'VETERINARIAN':
│   │   │                       return ['MANAGE_CONSULTATIONS', 'MANAGE_APPOINTMENTS', 'MANAGE_CUSTOMERS'].includes(permission);
│   │   │                     case 'RECEPTIONIST':
│   │   │                       return ['MANAGE_APPOINTMENTS', 'MANAGE_CUSTOMERS'].includes(permission);
│   │   │                     default:
│   │   │                       return false;
│   │   │                   }
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Obtiene el token de autenticación
│   │   │                  */
│   │   │                 getToken(): string | null {
│   │   │                   const user = this.getCurrentUser();
│   │   │                   return user?.token || null;
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Verifica si el token ha expirado
│   │   │                  */
│   │   │                 isTokenExpired(): boolean {
│   │   │                   const user = this.getCurrentUser();
│   │   │                   if (!user?.expiresAt) return false;
│   │   │                   
│   │   │                   return new Date() > new Date(user.expiresAt);
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Actualiza el token de acceso
│   │   │                  */
│   │   │                 refreshToken(): Observable<UserSession> {
│   │   │                   const user = this.getCurrentUser();
│   │   │                   if (!user?.refreshToken) {
│   │   │                     return throwError(() => new Error('No refresh token available'));
│   │   │                   }
│   │   │               
│   │   │                   return this.http.post<UserSession>(`${this.API_URL}/refresh`, {
│   │   │                     refreshToken: user.refreshToken
│   │   │                   }).pipe(
│   │   │                     tap(response => {
│   │   │                       if (response.success) {
│   │   │                         this.setUserSession(response, true);
│   │   │                         this.updateAuthState({
│   │   │                           user: response,
│   │   │                           error: null
│   │   │                         });
│   │   │                       }
│   │   │                     }),
│   │   │                     catchError(error => {
│   │   │                       this.logout();
│   │   │                       return throwError(() => error);
│   │   │                     })
│   │   │                   );
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Guarda la sesión del usuario
│   │   │                  */
│   │   │                 private setUserSession(userSession: UserSession, remember: boolean = false): void {
│   │   │                   if (remember) {
│   │   │                     localStorage.setItem(this.STORAGE_KEY, JSON.stringify(userSession));
│   │   │                   } else {
│   │   │                     sessionStorage.setItem(this.STORAGE_KEY, JSON.stringify(userSession));
│   │   │                     localStorage.removeItem(this.STORAGE_KEY);
│   │   │                   }
│   │   │                 }
│   │   │               
│   │   │                 /**
│   │   │                  * Limpia la sesión almacenada
│   │   │                  */
│   │   │                 private clearStoredSession(): void {
│   │   │                   localStorage.removeItem(this.STORAGE_KEY);
│   │   │                   sessionStorage.removeItem(this.STORAGE_KEY);
│   │   │                 }
│   │   │               }

│   │   ├── core.module.ts
│   │   │   Content:
│   │   │       File size: 1203 bytes
│   │   │       Total lines: 47
│   │   │       import { NgModule, Optional, SkipSelf } from '@angular/core';
│   │   │       import { CommonModule } from '@angular/common';
│   │   │       import { HTTP_INTERCEPTORS } from '@angular/common/http';
│   │   │       
│   │   │       // Servicios
│   │   │       import { AuthService } from './auth/services/auth.service';
│   │   │       import { HttpService } from './http/http.service';
│   │   │       import { LoaderService } from './services/loader.service';
│   │   │       import { ToastService } from './services/toast.service';
│   │   │       
│   │   │       // Guards
│   │   │       import { AuthGuard } from './auth/guards/auth.guard';
│   │   │       import { RoleGuard } from './auth/guards/role.guard';
│   │   │       
│   │   │       // Interceptors
│   │   │       import { TokenInterceptor } from './auth/interceptors/token.interceptor';
│   │   │       
│   │   │       @NgModule({
│   │   │         imports: [
│   │   │           CommonModule
│   │   │         ],
│   │   │         providers: [
│   │   │           // Servicios
│   │   │           AuthService,
│   │   │           HttpService,
│   │   │           LoaderService,
│   │   │           ToastService,
│   │   │           
│   │   │           // Guards
│   │   │           AuthGuard,
│   │   │           RoleGuard,
│   │   │           
│   │   │           // Interceptors
│   │   │           {
│   │   │             provide: HTTP_INTERCEPTORS,
│   │   │             useClass: TokenInterceptor,
│   │   │             multi: true
│   │   │           }
│   │   │         ]
│   │   │       })
│   │   │       export class CoreModule {
│   │   │         constructor(@Optional() @SkipSelf() parentModule: CoreModule) {
│   │   │           if (parentModule) {
│   │   │             throw new Error('CoreModule ya está cargado. Importe solo en AppModule');
│   │   │           }
│   │   │         }
│   │   │       }

│   │   ├── http
│   │   │   ├── http.service.spec.ts
│   │   │   │   Content:
│   │   │   │       File size: 363 bytes
│   │   │   │       Total lines: 16
│   │   │   │       import { TestBed } from '@angular/core/testing';
│   │   │   │       
│   │   │   │       import { HttpService } from './http.service';
│   │   │   │       
│   │   │   │       describe('HttpService', () => {
│   │   │   │         let service: HttpService;
│   │   │   │       
│   │   │   │         beforeEach(() => {
│   │   │   │           TestBed.configureTestingModule({});
│   │   │   │           service = TestBed.inject(HttpService);
│   │   │   │         });
│   │   │   │       
│   │   │   │         it('should be created', () => {
│   │   │   │           expect(service).toBeTruthy();
│   │   │   │         });
│   │   │   │       });

│   │   │   └── http.service.ts
│   │   │       Content:
│   │   │           File size: 142 bytes
│   │   │           Total lines: 9
│   │   │           import { Injectable } from '@angular/core';
│   │   │           
│   │   │           @Injectable({
│   │   │             providedIn: 'root'
│   │   │           })
│   │   │           export class HttpService {
│   │   │           
│   │   │             constructor() { }
│   │   │           }

│   │   ├── models
│   │   │   ├── api-response.interface.ts
│   │   │   │   Content:
│   │   │   │       File size: 0 bytes
│   │   │   │       Total lines: 0

│   │   │   └── toast.interface.ts
│   │   │       Content:
│   │   │           File size: 705 bytes
│   │   │           Total lines: 34
│   │   │           export type ToastType = 'success' | 'error' | 'warning' | 'info';
│   │   │           
│   │   │           export interface Toast {
│   │   │             id: string;
│   │   │             type: ToastType;
│   │   │             title?: string;
│   │   │             message: string;
│   │   │             duration?: number;
│   │   │             showCloseButton?: boolean;
│   │   │             position?: ToastPosition;
│   │   │             createdAt: Date;
│   │   │           }
│   │   │           
│   │   │           export type ToastPosition = 
│   │   │             | 'top-right' 
│   │   │             | 'top-left' 
│   │   │             | 'top-center' 
│   │   │             | 'bottom-right' 
│   │   │             | 'bottom-left' 
│   │   │             | 'bottom-center';
│   │   │           
│   │   │           export interface ToastConfig {
│   │   │             duration?: number;
│   │   │             showCloseButton?: boolean;
│   │   │             position?: ToastPosition;
│   │   │             maxToasts?: number;
│   │   │           }
│   │   │           
│   │   │           export interface CreateToastOptions {
│   │   │             title?: string;
│   │   │             duration?: number;
│   │   │             showCloseButton?: boolean;
│   │   │             position?: ToastPosition;
│   │   │           }

│   │   └── services
│   │       ├── loader.service.spec.ts
│   │       │   Content:
│   │       │       File size: 1364 bytes
│   │       │       Total lines: 51
│   │       │       import { TestBed } from '@angular/core/testing';
│   │       │       import { LoaderService } from './loader.service';
│   │       │       
│   │       │       describe('LoaderService', () => {
│   │       │         let service: LoaderService;
│   │       │       
│   │       │         beforeEach(() => {
│   │       │           TestBed.configureTestingModule({});
│   │       │           service = TestBed.inject(LoaderService);
│   │       │         });
│   │       │       
│   │       │         it('should be created', () => {
│   │       │           expect(service).toBeTruthy();
│   │       │         });
│   │       │       
│   │       │         it('should show loading', () => {
│   │       │           service.show();
│   │       │           expect(service.isLoading()).toBeTruthy();
│   │       │           expect(service.getLoadingCount()).toBe(1);
│   │       │         });
│   │       │       
│   │       │         it('should hide loading', () => {
│   │       │           service.show();
│   │       │           service.hide();
│   │       │           expect(service.isLoading()).toBeFalsy();
│   │       │           expect(service.getLoadingCount()).toBe(0);
│   │       │         });
│   │       │       
│   │       │         it('should handle multiple show/hide calls', () => {
│   │       │           service.show();
│   │       │           service.show();
│   │       │           expect(service.isLoading()).toBeTruthy();
│   │       │           expect(service.getLoadingCount()).toBe(2);
│   │       │       
│   │       │           service.hide();
│   │       │           expect(service.isLoading()).toBeTruthy();
│   │       │           expect(service.getLoadingCount()).toBe(1);
│   │       │       
│   │       │           service.hide();
│   │       │           expect(service.isLoading()).toBeFalsy();
│   │       │           expect(service.getLoadingCount()).toBe(0);
│   │       │         });
│   │       │       
│   │       │         it('should force hide loading', () => {
│   │       │           service.show();
│   │       │           service.show();
│   │       │           service.forceHide();
│   │       │           expect(service.isLoading()).toBeFalsy();
│   │       │           expect(service.getLoadingCount()).toBe(0);
│   │       │         });
│   │       │       });

│   │       ├── loader.service.ts
│   │       │   Content:
│   │       │       File size: 1679 bytes
│   │       │       Total lines: 73
│   │       │       import { Injectable } from '@angular/core';
│   │       │       import { BehaviorSubject, Observable } from 'rxjs';
│   │       │       
│   │       │       @Injectable({
│   │       │         providedIn: 'root'
│   │       │       })
│   │       │       export class LoaderService {
│   │       │         private loadingSubject = new BehaviorSubject<boolean>(false);
│   │       │         private loadingCountSubject = new BehaviorSubject<number>(0);
│   │       │         
│   │       │         /**
│   │       │          * Observable que emite el estado de carga actual
│   │       │          */
│   │       │         public loading$: Observable<boolean> = this.loadingSubject.asObservable();
│   │       │         
│   │       │         /**
│   │       │          * Observable que emite el contador de procesos de carga activos
│   │       │          */
│   │       │         public loadingCount$: Observable<number> = this.loadingCountSubject.asObservable();
│   │       │         
│   │       │         private loadingCount = 0;
│   │       │       
│   │       │         constructor() {}
│   │       │       
│   │       │         /**
│   │       │          * Muestra el indicador de carga
│   │       │          */
│   │       │         show(): void {
│   │       │           this.loadingCount++;
│   │       │           this.loadingCountSubject.next(this.loadingCount);
│   │       │           
│   │       │           if (!this.loadingSubject.value) {
│   │       │             this.loadingSubject.next(true);
│   │       │           }
│   │       │         }
│   │       │       
│   │       │         /**
│   │       │          * Oculta el indicador de carga
│   │       │          */
│   │       │         hide(): void {
│   │       │           if (this.loadingCount > 0) {
│   │       │             this.loadingCount--;
│   │       │             this.loadingCountSubject.next(this.loadingCount);
│   │       │           }
│   │       │           
│   │       │           if (this.loadingCount === 0) {
│   │       │             this.loadingSubject.next(false);
│   │       │           }
│   │       │         }
│   │       │       
│   │       │         /**
│   │       │          * Fuerza el ocultamiento del indicador de carga
│   │       │          */
│   │       │         forceHide(): void {
│   │       │           this.loadingCount = 0;
│   │       │           this.loadingCountSubject.next(0);
│   │       │           this.loadingSubject.next(false);
│   │       │         }
│   │       │       
│   │       │         /**
│   │       │          * Obtiene el estado actual de carga
│   │       │          */
│   │       │         isLoading(): boolean {
│   │       │           return this.loadingSubject.value;
│   │       │         }
│   │       │       
│   │       │         /**
│   │       │          * Obtiene el número de procesos de carga activos
│   │       │          */
│   │       │         getLoadingCount(): number {
│   │       │           return this.loadingCount;
│   │       │         }
│   │       │       }

│   │       ├── toast.service.spec.ts
│   │       │   Content:
│   │       │       File size: 5476 bytes
│   │       │       Total lines: 171
│   │       │       import { TestBed } from '@angular/core/testing';
│   │       │       import { ToastService } from './toast.service';
│   │       │       import { Toast, ToastType } from '../models/toast.interface';
│   │       │       
│   │       │       describe('ToastService', () => {
│   │       │         let service: ToastService;
│   │       │       
│   │       │         beforeEach(() => {
│   │       │           TestBed.configureTestingModule({});
│   │       │           service = TestBed.inject(ToastService);
│   │       │         });
│   │       │       
│   │       │         it('should be created', () => {
│   │       │           expect(service).toBeTruthy();
│   │       │         });
│   │       │       
│   │       │         describe('Toast Creation', () => {
│   │       │           it('should create success toast', () => {
│   │       │             const toastId = service.success('Test success message');
│   │       │             expect(toastId).toBeTruthy();
│   │       │             expect(service.getToastCount()).toBe(1);
│   │       │             
│   │       │             const toast = service.getToast(toastId);
│   │       │             expect(toast?.type).toBe('success');
│   │       │             expect(toast?.message).toBe('Test success message');
│   │       │           });
│   │       │       
│   │       │           it('should create error toast with longer duration', () => {
│   │       │             const toastId = service.error('Test error message');
│   │       │             const toast = service.getToast(toastId);
│   │       │             expect(toast?.duration).toBe(8000); // Los errores duran más
│   │       │           });
│   │       │       
│   │       │           it('should create toast with custom options', () => {
│   │       │             const toastId = service.success('Test message', {
│   │       │               title: 'Success!',
│   │       │               duration: 3000,
│   │       │               position: 'bottom-left'
│   │       │             });
│   │       │             
│   │       │             const toast = service.getToast(toastId);
│   │       │             expect(toast?.title).toBe('Success!');
│   │       │             expect(toast?.duration).toBe(3000);
│   │       │             expect(toast?.position).toBe('bottom-left');
│   │       │           });
│   │       │         });
│   │       │       
│   │       │         describe('Toast Management', () => {
│   │       │           it('should remove specific toast', () => {
│   │       │             const toastId = service.success('Test message');
│   │       │             expect(service.getToastCount()).toBe(1);
│   │       │             
│   │       │             service.remove(toastId);
│   │       │             expect(service.getToastCount()).toBe(0);
│   │       │             expect(service.hasToast(toastId)).toBeFalsy();
│   │       │           });
│   │       │       
│   │       │           it('should clear all toasts', () => {
│   │       │             service.success('Message 1');
│   │       │             service.error('Message 2');
│   │       │             service.warning('Message 3');
│   │       │             expect(service.getToastCount()).toBe(3);
│   │       │             
│   │       │             service.clear();
│   │       │             expect(service.getToastCount()).toBe(0);
│   │       │           });
│   │       │       
│   │       │           it('should clear toasts by type', () => {
│   │       │             service.success('Success message');
│   │       │             service.error('Error message 1');
│   │       │             service.error('Error message 2');
│   │       │             expect(service.getToastCount()).toBe(3);
│   │       │             
│   │       │             service.clearByType('error');
│   │       │             expect(service.getToastCount()).toBe(1);
│   │       │           });
│   │       │       
│   │       │           it('should limit maximum toasts', () => {
│   │       │             service.updateConfig({ maxToasts: 2 });
│   │       │             
│   │       │             service.success('Message 1');
│   │       │             service.success('Message 2');
│   │       │             service.success('Message 3'); // Este debería eliminar el primero
│   │       │             
│   │       │             expect(service.getToastCount()).toBe(2);
│   │       │           });
│   │       │         });
│   │       │       
│   │       │         describe('Toast Updates', () => {
│   │       │           it('should update existing toast', () => {
│   │       │             const toastId = service.success('Original message');
│   │       │             
│   │       │             service.updateToast(toastId, {
│   │       │               message: 'Updated message',
│   │       │               type: 'warning'
│   │       │             });
│   │       │             
│   │       │             const toast = service.getToast(toastId);
│   │       │             expect(toast?.message).toBe('Updated message');
│   │       │             expect(toast?.type).toBe('warning');
│   │       │           });
│   │       │       
│   │       │           it('should pause and resume toast', () => {
│   │       │             const toastId = service.success('Test message');
│   │       │             let toast = service.getToast(toastId);
│   │       │             const originalDuration = toast?.duration;
│   │       │             
│   │       │             service.pauseToast(toastId);
│   │       │             toast = service.getToast(toastId);
│   │       │             expect(toast?.duration).toBe(0);
│   │       │             
│   │       │             service.resumeToast(toastId);
│   │       │             toast = service.getToast(toastId);
│   │       │             expect(toast?.duration).toBeGreaterThan(0);
│   │       │           });
│   │       │         });
│   │       │       
│   │       │         describe('Configuration', () => {
│   │       │           it('should update default configuration', () => {
│   │       │             service.updateConfig({
│   │       │               duration: 10000,
│   │       │               position: 'bottom-center',
│   │       │               maxToasts: 10
│   │       │             });
│   │       │             
│   │       │             const config = service.getConfig();
│   │       │             expect(config.duration).toBe(10000);
│   │       │             expect(config.position).toBe('bottom-center');
│   │       │             expect(config.maxToasts).toBe(10);
│   │       │           });
│   │       │       
│   │       │           it('should use default configuration for new toasts', () => {
│   │       │             service.updateConfig({ duration: 15000 });
│   │       │             
│   │       │             const toastId = service.success('Test message');
│   │       │             const toast = service.getToast(toastId);
│   │       │             expect(toast?.duration).toBe(15000);
│   │       │           });
│   │       │         });
│   │       │       
│   │       │         describe('Filtering', () => {
│   │       │           it('should filter toasts by position', (done) => {
│   │       │             service.success('Top right message', { position: 'top-right' });
│   │       │             service.success('Bottom left message', { position: 'bottom-left' });
│   │       │             
│   │       │             service.getToastsByPosition('top-right').subscribe(toasts => {
│   │       │               expect(toasts.length).toBe(1);
│   │       │               expect(toasts[0].message).toBe('Top right message');
│   │       │               done();
│   │       │             });
│   │       │           });
│   │       │         });
│   │       │       
│   │       │         describe('Convenience Methods', () => {
│   │       │           it('should have convenience methods', () => {
│   │       │             service.showSuccess('Success');
│   │       │             service.showError('Error');
│   │       │             service.showInfo('Info');
│   │       │             service.showWarning('Warning');
│   │       │             
│   │       │             expect(service.getToastCount()).toBe(4);
│   │       │           });
│   │       │       
│   │       │           it('should create persistent toast', () => {
│   │       │             const toastId = service.showPersistent('info', 'Persistent message');
│   │       │             const toast = service.getToast(toastId);
│   │       │             expect(toast?.duration).toBe(0);
│   │       │             expect(toast?.showCloseButton).toBeTruthy();
│   │       │           });
│   │       │         });
│   │       │       });

│   │       └── toast.service.ts
│   │           Content:
│   │               File size: 9429 bytes
│   │               Total lines: 329
│   │               import { Injectable } from '@angular/core';
│   │               import { BehaviorSubject, Observable, timer } from 'rxjs';
│   │               import { Toast, ToastType, ToastConfig, CreateToastOptions, ToastPosition } from '../models/toast.interface';
│   │               
│   │               @Injectable({
│   │                 providedIn: 'root'
│   │               })
│   │               export class ToastService {
│   │                 private toastsSubject = new BehaviorSubject<Toast[]>([]);
│   │                 private defaultConfig: ToastConfig = {
│   │                   duration: 5000, // 5 segundos
│   │                   showCloseButton: true,
│   │                   position: 'top-right',
│   │                   maxToasts: 5
│   │                 };
│   │               
│   │                 /**
│   │                  * Observable que emite la lista actual de toasts
│   │                  */
│   │                 public toasts$: Observable<Toast[]> = this.toastsSubject.asObservable();
│   │               
│   │                 constructor() {}
│   │               
│   │                 /**
│   │                  * Muestra un toast de éxito
│   │                  * @param message Mensaje a mostrar
│   │                  * @param options Opciones adicionales
│   │                  * @returns ID del toast creado
│   │                  */
│   │                 success(message: string, options?: CreateToastOptions): string {
│   │                   return this.show('success', message, options);
│   │                 }
│   │               
│   │                 /**
│   │                  * Muestra un toast de error
│   │                  * @param message Mensaje a mostrar
│   │                  * @param options Opciones adicionales
│   │                  * @returns ID del toast creado
│   │                  */
│   │                 error(message: string, options?: CreateToastOptions): string {
│   │                   return this.show('error', message, {
│   │                     ...options,
│   │                     duration: options?.duration || 8000 // Los errores duran más tiempo
│   │                   });
│   │                 }
│   │               
│   │                 /**
│   │                  * Muestra un toast de advertencia
│   │                  * @param message Mensaje a mostrar
│   │                  * @param options Opciones adicionales
│   │                  * @returns ID del toast creado
│   │                  */
│   │                 warning(message: string, options?: CreateToastOptions): string {
│   │                   return this.show('warning', message, options);
│   │                 }
│   │               
│   │                 /**
│   │                  * Muestra un toast de información
│   │                  * @param message Mensaje a mostrar
│   │                  * @param options Opciones adicionales
│   │                  * @returns ID del toast creado
│   │                  */
│   │                 info(message: string, options?: CreateToastOptions): string {
│   │                   return this.show('info', message, options);
│   │                 }
│   │               
│   │                 /**
│   │                  * Muestra un toast genérico
│   │                  * @param type Tipo de toast
│   │                  * @param message Mensaje a mostrar
│   │                  * @param options Opciones adicionales
│   │                  * @returns ID del toast creado
│   │                  */
│   │                 show(type: ToastType, message: string, options?: CreateToastOptions): string {
│   │                   const toast: Toast = {
│   │                     id: this.generateId(),
│   │                     type,
│   │                     message,
│   │                     title: options?.title,
│   │                     duration: options?.duration || this.defaultConfig.duration,
│   │                     showCloseButton: options?.showCloseButton ?? this.defaultConfig.showCloseButton,
│   │                     position: options?.position || this.defaultConfig.position,
│   │                     createdAt: new Date()
│   │                   };
│   │               
│   │                   this.addToast(toast);
│   │                   
│   │                   // Programar eliminación automática si tiene duración
│   │                   if (toast.duration && toast.duration > 0) {
│   │                     this.scheduleRemoval(toast);
│   │                   }
│   │               
│   │                   return toast.id;
│   │                 }
│   │               
│   │                 /**
│   │                  * Elimina un toast específico por su ID
│   │                  * @param toastId ID del toast a eliminar
│   │                  */
│   │                 remove(toastId: string): void {
│   │                   const currentToasts = this.toastsSubject.value;
│   │                   const updatedToasts = currentToasts.filter(toast => toast.id !== toastId);
│   │                   this.toastsSubject.next(updatedToasts);
│   │                 }
│   │               
│   │                 /**
│   │                  * Elimina todos los toasts
│   │                  */
│   │                 clear(): void {
│   │                   this.toastsSubject.next([]);
│   │                 }
│   │               
│   │                 /**
│   │                  * Elimina todos los toasts de un tipo específico
│   │                  * @param type Tipo de toast a eliminar
│   │                  */
│   │                 clearByType(type: ToastType): void {
│   │                   const currentToasts = this.toastsSubject.value;
│   │                   const updatedToasts = currentToasts.filter(toast => toast.type !== type);
│   │                   this.toastsSubject.next(updatedToasts);
│   │                 }
│   │               
│   │                 /**
│   │                  * Obtiene los toasts filtrados por posición
│   │                  * @param position Posición de los toasts
│   │                  * @returns Observable con los toasts de esa posición
│   │                  */
│   │                 getToastsByPosition(position: ToastPosition): Observable<Toast[]> {
│   │                   return new Observable(observer => {
│   │                     this.toasts$.subscribe(toasts => {
│   │                       const filteredToasts = toasts.filter(toast => 
│   │                         (toast.position || this.defaultConfig.position) === position
│   │                       );
│   │                       observer.next(filteredToasts);
│   │                     });
│   │                   });
│   │                 }
│   │               
│   │                 /**
│   │                  * Actualiza la configuración por defecto del servicio
│   │                  * @param config Nueva configuración
│   │                  */
│   │                 updateConfig(config: Partial<ToastConfig>): void {
│   │                   this.defaultConfig = { ...this.defaultConfig, ...config };
│   │                 }
│   │               
│   │                 /**
│   │                  * Obtiene la configuración actual del servicio
│   │                  * @returns Configuración actual
│   │                  */
│   │                 getConfig(): ToastConfig {
│   │                   return { ...this.defaultConfig };
│   │                 }
│   │               
│   │                 /**
│   │                  * Obtiene el número total de toasts activos
│   │                  * @returns Número de toasts
│   │                  */
│   │                 getToastCount(): number {
│   │                   return this.toastsSubject.value.length;
│   │                 }
│   │               
│   │                 /**
│   │                  * Verifica si existe un toast con un ID específico
│   │                  * @param toastId ID del toast
│   │                  * @returns True si existe el toast
│   │                  */
│   │                 hasToast(toastId: string): boolean {
│   │                   return this.toastsSubject.value.some(toast => toast.id === toastId);
│   │                 }
│   │               
│   │                 /**
│   │                  * Obtiene un toast específico por su ID
│   │                  * @param toastId ID del toast
│   │                  * @returns Toast encontrado o undefined
│   │                  */
│   │                 getToast(toastId: string): Toast | undefined {
│   │                   return this.toastsSubject.value.find(toast => toast.id === toastId);
│   │                 }
│   │               
│   │                 /**
│   │                  * Actualiza un toast existente
│   │                  * @param toastId ID del toast a actualizar
│   │                  * @param updates Propiedades a actualizar
│   │                  */
│   │                 updateToast(toastId: string, updates: Partial<Toast>): void {
│   │                   const currentToasts = this.toastsSubject.value;
│   │                   const updatedToasts = currentToasts.map(toast => 
│   │                     toast.id === toastId ? { ...toast, ...updates } : toast
│   │                   );
│   │                   this.toastsSubject.next(updatedToasts);
│   │                 }
│   │               
│   │                 /**
│   │                  * Pausa la eliminación automática de un toast
│   │                  * @param toastId ID del toast
│   │                  */
│   │                 pauseToast(toastId: string): void {
│   │                   // En una implementación más avanzada, aquí se podría pausar el timer
│   │                   // Por ahora, removemos la duración para evitar la eliminación automática
│   │                   this.updateToast(toastId, { duration: 0 });
│   │                 }
│   │               
│   │                 /**
│   │                  * Reanuda la eliminación automática de un toast
│   │                  * @param toastId ID del toast
│   │                  * @param duration Nueva duración (opcional)
│   │                  */
│   │                 resumeToast(toastId: string, duration?: number): void {
│   │                   const toast = this.getToast(toastId);
│   │                   if (toast) {
│   │                     const newDuration = duration || this.defaultConfig.duration || 5000;
│   │                     this.updateToast(toastId, { duration: newDuration });
│   │                     this.scheduleRemoval(toast);
│   │                   }
│   │                 }
│   │               
│   │                 /**
│   │                  * Añade un toast a la lista, respetando el límite máximo
│   │                  * @param toast Toast a añadir
│   │                  */
│   │                 private addToast(toast: Toast): void {
│   │                   const currentToasts = this.toastsSubject.value;
│   │                   let updatedToasts = [...currentToasts, toast];
│   │               
│   │                   // Limitar el número máximo de toasts
│   │                   const maxToasts = this.defaultConfig.maxToasts || 5;
│   │                   if (updatedToasts.length > maxToasts) {
│   │                     // Eliminar los toasts más antiguos
│   │                     updatedToasts = updatedToasts.slice(-maxToasts);
│   │                   }
│   │               
│   │                   this.toastsSubject.next(updatedToasts);
│   │                 }
│   │               
│   │                 /**
│   │                  * Programa la eliminación automática de un toast
│   │                  * @param toast Toast a programar para eliminación
│   │                  */
│   │                 private scheduleRemoval(toast: Toast): void {
│   │                   if (toast.duration && toast.duration > 0) {
│   │                     timer(toast.duration).subscribe(() => {
│   │                       // Verificar que el toast aún existe antes de eliminarlo
│   │                       if (this.hasToast(toast.id)) {
│   │                         this.remove(toast.id);
│   │                       }
│   │                     });
│   │                   }
│   │                 }
│   │               
│   │                 /**
│   │                  * Genera un ID único para un toast
│   │                  * @returns ID único
│   │                  */
│   │                 private generateId(): string {
│   │                   return `toast_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
│   │                 }
│   │               
│   │                 /**
│   │                  * Métodos de conveniencia para casos de uso comunes
│   │                  */
│   │               
│   │                 /**
│   │                  * Muestra un toast de éxito simple
│   │                  * @param message Mensaje
│   │                  */
│   │                 showSuccess(message: string): void {
│   │                   this.success(message);
│   │                 }
│   │               
│   │                 /**
│   │                  * Muestra un toast de error simple
│   │                  * @param message Mensaje
│   │                  */
│   │                 showError(message: string): void {
│   │                   this.error(message);
│   │                 }
│   │               
│   │                 /**
│   │                  * Muestra un toast de información simple
│   │                  * @param message Mensaje
│   │                  */
│   │                 showInfo(message: string): void {
│   │                   this.info(message);
│   │                 }
│   │               
│   │                 /**
│   │                  * Muestra un toast de advertencia simple
│   │                  * @param message Mensaje
│   │                  */
│   │                 showWarning(message: string): void {
│   │                   this.warning(message);
│   │                 }
│   │               
│   │                 /**
│   │                  * Muestra un toast persistente (sin auto-eliminación)
│   │                  * @param type Tipo de toast
│   │                  * @param message Mensaje
│   │                  * @param title Título opcional
│   │                  */
│   │                 showPersistent(type: ToastType, message: string, title?: string): string {
│   │                   return this.show(type, message, {
│   │                     title,
│   │                     duration: 0, // Sin eliminación automática
│   │                     showCloseButton: true
│   │                   });
│   │                 }
│   │               
│   │                 /**
│   │                  * Muestra un toast con acción personalizada
│   │                  * @param type Tipo de toast
│   │                  * @param message Mensaje
│   │                  * @param actionText Texto del botón de acción
│   │                  * @param actionCallback Función a ejecutar al hacer clic
│   │                  */
│   │                 showWithAction(
│   │                   type: ToastType, 
│   │                   message: string, 
│   │                   actionText: string, 
│   │                   actionCallback: () => void
│   │                 ): string {
│   │                   // Esta implementación requeriría extender la interfaz Toast
│   │                   // para incluir acciones personalizadas
│   │                   return this.show(type, message, {
│   │                     duration: 10000, // Más tiempo para permitir la acción
│   │                     showCloseButton: true
│   │                   });
│   │                 }
│   │               }

│   ├── features
│   │   ├── auth
│   │   │   ├── auth-routing.module.ts
│   │   │   │   Content:
│   │   │   │       File size: 868 bytes
│   │   │   │       Total lines: 33
│   │   │   │       import { NgModule } from '@angular/core';
│   │   │   │       import { RouterModule, Routes } from '@angular/router';
│   │   │   │       import { LoginComponent } from './pages/login/login.component';
│   │   │   │       import { ForgotPasswordComponent } from './pages/forgot-password/forgot-password.component';
│   │   │   │       import { AuthLayoutComponent } from '../../shared/templates/auth-layout/auth-layout.component';
│   │   │   │       
│   │   │   │       const routes: Routes = [
│   │   │   │         {
│   │   │   │           path: '',
│   │   │   │           component: AuthLayoutComponent,
│   │   │   │           children: [
│   │   │   │             {
│   │   │   │               path: 'login',
│   │   │   │               component: LoginComponent
│   │   │   │             },
│   │   │   │             {
│   │   │   │               path: 'forgot-password',
│   │   │   │               component: ForgotPasswordComponent
│   │   │   │             },
│   │   │   │             {
│   │   │   │               path: '',
│   │   │   │               redirectTo: 'login',
│   │   │   │               pathMatch: 'full'
│   │   │   │             }
│   │   │   │           ]
│   │   │   │         }
│   │   │   │       ];
│   │   │   │       
│   │   │   │       @NgModule({
│   │   │   │         imports: [RouterModule.forChild(routes)],
│   │   │   │         exports: [RouterModule]
│   │   │   │       })
│   │   │   │       export class AuthRoutingModule { }

│   │   │   ├── auth.module.ts
│   │   │   │   Content:
│   │   │   │       File size: 908 bytes
│   │   │   │       Total lines: 25
│   │   │   │       import { NgModule } from '@angular/core';
│   │   │   │       import { CommonModule } from '@angular/common';
│   │   │   │       import { ReactiveFormsModule } from '@angular/forms';
│   │   │   │       import { AuthRoutingModule } from './auth-routing.module';
│   │   │   │       import { LoginComponent } from './pages/login/login.component';
│   │   │   │       import { ForgotPasswordComponent } from './pages/forgot-password/forgot-password.component';
│   │   │   │       import { LoginFormComponent } from './components/login-form/login-form.component';
│   │   │   │       import { ResetPasswordFormComponent } from './components/reset-password-form/reset-password-form.component';
│   │   │   │       import { SharedModule } from '../../shared/shared.module';
│   │   │   │       
│   │   │   │       @NgModule({
│   │   │   │         declarations: [
│   │   │   │           LoginComponent,
│   │   │   │           ForgotPasswordComponent,
│   │   │   │           LoginFormComponent,
│   │   │   │           ResetPasswordFormComponent,
│   │   │   │         ],
│   │   │   │         imports: [
│   │   │   │           CommonModule,
│   │   │   │           SharedModule,
│   │   │   │           ReactiveFormsModule,
│   │   │   │           AuthRoutingModule
│   │   │   │         ]
│   │   │   │       })
│   │   │   │       export class AuthModule { }

│   │   │   ├── components
│   │   │   │   ├── auth-layout
│   │   │   │   │   └── auth-layout
│   │   │   │   │       ├── auth-layout.component.html
│   │   │   │   │       │   Content:
│   │   │   │   │       │       File size: 343 bytes
│   │   │   │   │       │       Total lines: 12
│   │   │   │   │       │       <div class="auth-layout">
│   │   │   │   │       │         <div class="auth-background">
│   │   │   │   │       │           <!-- Elementos decorativos de fondo -->
│   │   │   │   │       │           <div class="bg-circle bg-circle-1"></div>
│   │   │   │   │       │           <div class="bg-circle bg-circle-2"></div>
│   │   │   │   │       │           <div class="bg-circle bg-circle-3"></div>
│   │   │   │   │       │         </div>
│   │   │   │   │       │         
│   │   │   │   │       │         <div class="auth-content">
│   │   │   │   │       │           <router-outlet></router-outlet>
│   │   │   │   │       │         </div>
│   │   │   │   │       │       </div>

│   │   │   │   │       ├── auth-layout.component.scss
│   │   │   │   │       │   Content:
│   │   │   │   │       │       File size: 1026 bytes
│   │   │   │   │       │       Total lines: 58
│   │   │   │   │       │       @use 'variables' as *;
│   │   │   │   │       │       
│   │   │   │   │       │       .auth-layout {
│   │   │   │   │       │         position: relative;
│   │   │   │   │       │         min-height: 100vh;
│   │   │   │   │       │         display: flex;
│   │   │   │   │       │         align-items: center;
│   │   │   │   │       │         justify-content: center;
│   │   │   │   │       │         overflow: hidden;
│   │   │   │   │       │         background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
│   │   │   │   │       │       }
│   │   │   │   │       │       
│   │   │   │   │       │       .auth-background {
│   │   │   │   │       │         position: absolute;
│   │   │   │   │       │         top: 0;
│   │   │   │   │       │         left: 0;
│   │   │   │   │       │         width: 100%;
│   │   │   │   │       │         height: 100%;
│   │   │   │   │       │         z-index: 1;
│   │   │   │   │       │         
│   │   │   │   │       │         .bg-circle {
│   │   │   │   │       │           position: absolute;
│   │   │   │   │       │           border-radius: 50%;
│   │   │   │   │       │           opacity: 0.1;
│   │   │   │   │       │           
│   │   │   │   │       │           &.bg-circle-1 {
│   │   │   │   │       │             width: 300px;
│   │   │   │   │       │             height: 300px;
│   │   │   │   │       │             background: $primary;
│   │   │   │   │       │             top: -150px;
│   │   │   │   │       │             right: -150px;
│   │   │   │   │       │           }
│   │   │   │   │       │           
│   │   │   │   │       │           &.bg-circle-2 {
│   │   │   │   │       │             width: 200px;
│   │   │   │   │       │             height: 200px;
│   │   │   │   │       │             background: $secondary;
│   │   │   │   │       │             bottom: -100px;
│   │   │   │   │       │             left: -100px;
│   │   │   │   │       │           }
│   │   │   │   │       │           
│   │   │   │   │       │           &.bg-circle-3 {
│   │   │   │   │       │             width: 150px;
│   │   │   │   │       │             height: 150px;
│   │   │   │   │       │             background: $tertiary;
│   │   │   │   │       │             bottom: 20%;
│   │   │   │   │       │             right: 10%;
│   │   │   │   │       │           }
│   │   │   │   │       │         }
│   │   │   │   │       │       }
│   │   │   │   │       │       
│   │   │   │   │       │       .auth-content {
│   │   │   │   │       │         position: relative;
│   │   │   │   │       │         z-index: 2;
│   │   │   │   │       │         width: 100%;
│   │   │   │   │       │         max-width: 400px;
│   │   │   │   │       │         padding: $spacing-md;
│   │   │   │   │       │       }

│   │   │   │   │       ├── auth-layout.component.spec.ts
│   │   │   │   │       │   Content:
│   │   │   │   │       │       File size: 644 bytes
│   │   │   │   │       │       Total lines: 23
│   │   │   │   │       │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │   │   │   │       │       
│   │   │   │   │       │       import { AuthLayoutComponent } from './auth-layout.component';
│   │   │   │   │       │       
│   │   │   │   │       │       describe('AuthLayoutComponent', () => {
│   │   │   │   │       │         let component: AuthLayoutComponent;
│   │   │   │   │       │         let fixture: ComponentFixture<AuthLayoutComponent>;
│   │   │   │   │       │       
│   │   │   │   │       │         beforeEach(async () => {
│   │   │   │   │       │           await TestBed.configureTestingModule({
│   │   │   │   │       │             imports: [AuthLayoutComponent]
│   │   │   │   │       │           })
│   │   │   │   │       │           .compileComponents();
│   │   │   │   │       │       
│   │   │   │   │       │           fixture = TestBed.createComponent(AuthLayoutComponent);
│   │   │   │   │       │           component = fixture.componentInstance;
│   │   │   │   │       │           fixture.detectChanges();
│   │   │   │   │       │         });
│   │   │   │   │       │       
│   │   │   │   │       │         it('should create', () => {
│   │   │   │   │       │           expect(component).toBeTruthy();
│   │   │   │   │       │         });
│   │   │   │   │       │       });

│   │   │   │   │       └── auth-layout.component.ts
│   │   │   │   │           Content:
│   │   │   │   │               File size: 267 bytes
│   │   │   │   │               Total lines: 11
│   │   │   │   │               import { Component } from '@angular/core';
│   │   │   │   │               
│   │   │   │   │               @Component({
│   │   │   │   │                 selector: 'app-auth-layout',
│   │   │   │   │                 standalone: false,
│   │   │   │   │                 templateUrl: './auth-layout.component.html',
│   │   │   │   │                 styleUrl: './auth-layout.component.scss'
│   │   │   │   │               })
│   │   │   │   │               export class AuthLayoutComponent {
│   │   │   │   │               constructor() {}
│   │   │   │   │               }

│   │   │   │   ├── login-form
│   │   │   │   │   ├── login-form.component.html
│   │   │   │   │   │   Content:
│   │   │   │   │   │       File size: 26 bytes
│   │   │   │   │   │       Total lines: 1
│   │   │   │   │   │       <p>login-form works!</p>

│   │   │   │   │   ├── login-form.component.scss
│   │   │   │   │   │   Content:
│   │   │   │   │   │       File size: 0 bytes
│   │   │   │   │   │       Total lines: 0

│   │   │   │   │   ├── login-form.component.spec.ts
│   │   │   │   │   │   Content:
│   │   │   │   │   │       File size: 642 bytes
│   │   │   │   │   │       Total lines: 23
│   │   │   │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │   │   │   │   │       
│   │   │   │   │   │       import { LoginFormComponent } from './login-form.component';
│   │   │   │   │   │       
│   │   │   │   │   │       describe('LoginFormComponent', () => {
│   │   │   │   │   │         let component: LoginFormComponent;
│   │   │   │   │   │         let fixture: ComponentFixture<LoginFormComponent>;
│   │   │   │   │   │       
│   │   │   │   │   │         beforeEach(async () => {
│   │   │   │   │   │           await TestBed.configureTestingModule({
│   │   │   │   │   │             declarations: [LoginFormComponent]
│   │   │   │   │   │           })
│   │   │   │   │   │           .compileComponents();
│   │   │   │   │   │       
│   │   │   │   │   │           fixture = TestBed.createComponent(LoginFormComponent);
│   │   │   │   │   │           component = fixture.componentInstance;
│   │   │   │   │   │           fixture.detectChanges();
│   │   │   │   │   │         });
│   │   │   │   │   │       
│   │   │   │   │   │         it('should create', () => {
│   │   │   │   │   │           expect(component).toBeTruthy();
│   │   │   │   │   │         });
│   │   │   │   │   │       });

│   │   │   │   │   └── login-form.component.ts
│   │   │   │   │       Content:
│   │   │   │   │           File size: 247 bytes
│   │   │   │   │           Total lines: 11
│   │   │   │   │           import { Component } from '@angular/core';
│   │   │   │   │           
│   │   │   │   │           @Component({
│   │   │   │   │             selector: 'app-login-form',
│   │   │   │   │             standalone: false,
│   │   │   │   │             templateUrl: './login-form.component.html',
│   │   │   │   │             styleUrl: './login-form.component.scss'
│   │   │   │   │           })
│   │   │   │   │           export class LoginFormComponent {
│   │   │   │   │           
│   │   │   │   │           }

│   │   │   │   └── reset-password-form
│   │   │   │       ├── reset-password-form.component.html
│   │   │   │       │   Content:
│   │   │   │       │       File size: 35 bytes
│   │   │   │       │       Total lines: 1
│   │   │   │       │       <p>reset-password-form works!</p>

│   │   │   │       ├── reset-password-form.component.scss
│   │   │   │       │   Content:
│   │   │   │       │       File size: 0 bytes
│   │   │   │       │       Total lines: 0

│   │   │   │       ├── reset-password-form.component.spec.ts
│   │   │   │       │   Content:
│   │   │   │       │       File size: 699 bytes
│   │   │   │       │       Total lines: 23
│   │   │   │       │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │   │   │       │       
│   │   │   │       │       import { ResetPasswordFormComponent } from './reset-password-form.component';
│   │   │   │       │       
│   │   │   │       │       describe('ResetPasswordFormComponent', () => {
│   │   │   │       │         let component: ResetPasswordFormComponent;
│   │   │   │       │         let fixture: ComponentFixture<ResetPasswordFormComponent>;
│   │   │   │       │       
│   │   │   │       │         beforeEach(async () => {
│   │   │   │       │           await TestBed.configureTestingModule({
│   │   │   │       │             declarations: [ResetPasswordFormComponent]
│   │   │   │       │           })
│   │   │   │       │           .compileComponents();
│   │   │   │       │       
│   │   │   │       │           fixture = TestBed.createComponent(ResetPasswordFormComponent);
│   │   │   │       │           component = fixture.componentInstance;
│   │   │   │       │           fixture.detectChanges();
│   │   │   │       │         });
│   │   │   │       │       
│   │   │   │       │         it('should create', () => {
│   │   │   │       │           expect(component).toBeTruthy();
│   │   │   │       │         });
│   │   │   │       │       });

│   │   │   │       └── reset-password-form.component.ts
│   │   │   │           Content:
│   │   │   │               File size: 282 bytes
│   │   │   │               Total lines: 11
│   │   │   │               import { Component } from '@angular/core';
│   │   │   │               
│   │   │   │               @Component({
│   │   │   │                 selector: 'app-reset-password-form',
│   │   │   │                 standalone: false,
│   │   │   │                 templateUrl: './reset-password-form.component.html',
│   │   │   │                 styleUrl: './reset-password-form.component.scss'
│   │   │   │               })
│   │   │   │               export class ResetPasswordFormComponent {
│   │   │   │               
│   │   │   │               }

│   │   │   └── pages
│   │   │       ├── forgot-password
│   │   │       │   ├── forgot-password.component.html
│   │   │       │   │   Content:
│   │   │       │   │       File size: 126 bytes
│   │   │       │   │       Total lines: 4
│   │   │       │   │       <div class="forgot-password-container">
│   │   │       │   │         <h2>Forgot Password</h2>
│   │   │       │   │         <!-- TODO: Implement forgot password form -->
│   │   │       │   │       </div>

│   │   │       │   ├── forgot-password.component.scss
│   │   │       │   │   Content:
│   │   │       │   │       File size: 91 bytes
│   │   │       │   │       Total lines: 5
│   │   │       │   │       .forgot-password-container {
│   │   │       │   │         padding: 2rem;
│   │   │       │   │         max-width: 400px;
│   │   │       │   │         margin: 0 auto;
│   │   │       │   │       }

│   │   │       │   ├── forgot-password.component.spec.ts
│   │   │       │   │   Content:
│   │   │       │   │       File size: 677 bytes
│   │   │       │   │       Total lines: 23
│   │   │       │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │   │       │   │       
│   │   │       │   │       import { ForgotPasswordComponent } from './forgot-password.component';
│   │   │       │   │       
│   │   │       │   │       describe('ForgotPasswordComponent', () => {
│   │   │       │   │         let component: ForgotPasswordComponent;
│   │   │       │   │         let fixture: ComponentFixture<ForgotPasswordComponent>;
│   │   │       │   │       
│   │   │       │   │         beforeEach(async () => {
│   │   │       │   │           await TestBed.configureTestingModule({
│   │   │       │   │             declarations: [ForgotPasswordComponent]
│   │   │       │   │           })
│   │   │       │   │           .compileComponents();
│   │   │       │   │       
│   │   │       │   │           fixture = TestBed.createComponent(ForgotPasswordComponent);
│   │   │       │   │           component = fixture.componentInstance;
│   │   │       │   │           fixture.detectChanges();
│   │   │       │   │         });
│   │   │       │   │       
│   │   │       │   │         it('should create', () => {
│   │   │       │   │           expect(component).toBeTruthy();
│   │   │       │   │         });
│   │   │       │   │       });

│   │   │       │   └── forgot-password.component.ts
│   │   │       │       Content:
│   │   │       │           File size: 317 bytes
│   │   │       │           Total lines: 11
│   │   │       │           import { Component } from '@angular/core';
│   │   │       │           
│   │   │       │           @Component({
│   │   │       │             selector: 'app-forgot-password',
│   │   │       │             standalone: false,
│   │   │       │             templateUrl: './forgot-password.component.html',
│   │   │       │             styleUrl: './forgot-password.component.scss'
│   │   │       │           })
│   │   │       │           export class ForgotPasswordComponent {
│   │   │       │             // TODO: Implement forgot password functionality
│   │   │       │           }

│   │   │       └── login
│   │   │           ├── login.component.html
│   │   │           │   Content:
│   │   │           │       File size: 21 bytes
│   │   │           │       Total lines: 1
│   │   │           │       <p>login works!</p>

│   │   │           ├── login.component.scss
│   │   │           │   Content:
│   │   │           │       File size: 0 bytes
│   │   │           │       Total lines: 0

│   │   │           ├── login.component.spec.ts
│   │   │           │   Content:
│   │   │           │       File size: 613 bytes
│   │   │           │       Total lines: 23
│   │   │           │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │   │           │       
│   │   │           │       import { LoginComponent } from './login.component';
│   │   │           │       
│   │   │           │       describe('LoginComponent', () => {
│   │   │           │         let component: LoginComponent;
│   │   │           │         let fixture: ComponentFixture<LoginComponent>;
│   │   │           │       
│   │   │           │         beforeEach(async () => {
│   │   │           │           await TestBed.configureTestingModule({
│   │   │           │             declarations: [LoginComponent]
│   │   │           │           })
│   │   │           │           .compileComponents();
│   │   │           │       
│   │   │           │           fixture = TestBed.createComponent(LoginComponent);
│   │   │           │           component = fixture.componentInstance;
│   │   │           │           fixture.detectChanges();
│   │   │           │         });
│   │   │           │       
│   │   │           │         it('should create', () => {
│   │   │           │           expect(component).toBeTruthy();
│   │   │           │         });
│   │   │           │       });

│   │   │           └── login.component.ts
│   │   │               Content:
│   │   │                   File size: 228 bytes
│   │   │                   Total lines: 11
│   │   │                   import { Component } from '@angular/core';
│   │   │                   
│   │   │                   @Component({
│   │   │                     selector: 'app-login',
│   │   │                     standalone: false,
│   │   │                     templateUrl: './login.component.html',
│   │   │                     styleUrl: './login.component.scss'
│   │   │                   })
│   │   │                   export class LoginComponent {
│   │   │                   
│   │   │                   }

│   │   └── users
│   │       ├── atoms
│   │       │   ├── role-badge
│   │       │   │   ├── role-badge.component.html
│   │       │   │   │   Content:
│   │       │   │   │       File size: 73 bytes
│   │       │   │   │       Total lines: 3
│   │       │   │   │       <div class="role-badge" [ngClass]="roleClass">
│   │       │   │   │         {{ roleLabel }}
│   │       │   │   │       </div>

│   │       │   │   ├── role-badge.component.scss
│   │       │   │   │   Content:
│   │       │   │   │       File size: 567 bytes
│   │       │   │   │       Total lines: 26
│   │       │   │   │       @use 'variables' as *;
│   │       │   │   │       
│   │       │   │   │       .role-badge {
│   │       │   │   │         display: inline-flex;
│   │       │   │   │         align-items: center;
│   │       │   │   │         justify-content: center;
│   │       │   │   │         padding: $spacing-xxs $spacing-sm;
│   │       │   │   │         border-radius: $border-radius-md;
│   │       │   │   │         font-size: $font-size-xs;
│   │       │   │   │         font-weight: $font-weight-medium;
│   │       │   │   │         
│   │       │   │   │         &.role-admin {
│   │       │   │   │           background-color: rgba($error, 0.15);
│   │       │   │   │           color: $error;
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         &.role-veterinarian {
│   │       │   │   │           background-color: rgba($tertiary, 0.15);
│   │       │   │   │           color: $tertiary;
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         &.role-receptionist {
│   │       │   │   │           background-color: rgba($warning, 0.15);
│   │       │   │   │           color: darken($warning, 10%);
│   │       │   │   │         }
│   │       │   │   │       }

│   │       │   │   ├── role-badge.component.spec.ts
│   │       │   │   │   Content:
│   │       │   │   │       File size: 642 bytes
│   │       │   │   │       Total lines: 23
│   │       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │   │   │       
│   │       │   │   │       import { RoleBadgeComponent } from './role-badge.component';
│   │       │   │   │       
│   │       │   │   │       describe('RoleBadgeComponent', () => {
│   │       │   │   │         let component: RoleBadgeComponent;
│   │       │   │   │         let fixture: ComponentFixture<RoleBadgeComponent>;
│   │       │   │   │       
│   │       │   │   │         beforeEach(async () => {
│   │       │   │   │           await TestBed.configureTestingModule({
│   │       │   │   │             declarations: [RoleBadgeComponent]
│   │       │   │   │           })
│   │       │   │   │           .compileComponents();
│   │       │   │   │       
│   │       │   │   │           fixture = TestBed.createComponent(RoleBadgeComponent);
│   │       │   │   │           component = fixture.componentInstance;
│   │       │   │   │           fixture.detectChanges();
│   │       │   │   │         });
│   │       │   │   │       
│   │       │   │   │         it('should create', () => {
│   │       │   │   │           expect(component).toBeTruthy();
│   │       │   │   │         });
│   │       │   │   │       });

│   │       │   │   └── role-badge.component.ts
│   │       │   │       Content:
│   │       │   │           File size: 859 bytes
│   │       │   │           Total lines: 35
│   │       │   │           import { Component, Input } from '@angular/core';
│   │       │   │           import { UserRole } from '../../models/role.enum';
│   │       │   │           
│   │       │   │           @Component({
│   │       │   │             selector: 'app-role-badge',
│   │       │   │             standalone: false,
│   │       │   │             templateUrl: './role-badge.component.html',
│   │       │   │             styleUrls: ['./role-badge.component.scss']
│   │       │   │           })
│   │       │   │           export class RoleBadgeComponent {
│   │       │   │             @Input() role: UserRole = UserRole.RECEPTIONIST;
│   │       │   │             
│   │       │   │             /**
│   │       │   │              * Obtiene el nombre legible del rol
│   │       │   │              */
│   │       │   │             get roleLabel(): string {
│   │       │   │               switch(this.role) {
│   │       │   │                 case UserRole.ADMIN:
│   │       │   │                   return 'Administrador';
│   │       │   │                 case UserRole.VETERINARIAN:
│   │       │   │                   return 'Veterinario';
│   │       │   │                 case UserRole.RECEPTIONIST:
│   │       │   │                   return 'Recepcionista';
│   │       │   │                 default:
│   │       │   │                   return this.role;
│   │       │   │               }
│   │       │   │             }
│   │       │   │             
│   │       │   │             /**
│   │       │   │              * Obtiene la clase CSS según el rol
│   │       │   │              */
│   │       │   │             get roleClass(): string {
│   │       │   │               return `role-${this.role.toLowerCase()}`;
│   │       │   │             }
│   │       │   │           }

│   │       │   └── user-avatar
│   │       │       ├── user-avatar.component.html
│   │       │       │   Content:
│   │       │       │       File size: 561 bytes
│   │       │       │       Total lines: 17
│   │       │       │       <div class="user-avatar" 
│   │       │       │            [ngClass]="[size, active ? 'active' : 'inactive']">
│   │       │       │         <ng-container *ngIf="photoUrl && photoUrl !== ''; else initialsTemplate">
│   │       │       │           <img [src]="photoUrl" [alt]="name + ' ' + lastName">
│   │       │       │         </ng-container>
│   │       │       │         
│   │       │       │         <ng-template #initialsTemplate>
│   │       │       │           <div class="avatar-initials">{{ initials }}</div>
│   │       │       │         </ng-template>
│   │       │       │         
│   │       │       │         <button *ngIf="showEditButton" 
│   │       │       │                 class="edit-photo-button"
│   │       │       │                 (click)="onEditClick()"
│   │       │       │                 title="Cambiar foto">
│   │       │       │           <app-icon name="photo_camera"></app-icon>
│   │       │       │         </button>
│   │       │       │       </div>

│   │       │       ├── user-avatar.component.scss
│   │       │       │   Content:
│   │       │       │       File size: 1979 bytes
│   │       │       │       Total lines: 108
│   │       │       │       @use 'variables' as *;
│   │       │       │       
│   │       │       │       .user-avatar {
│   │       │       │         position: relative;
│   │       │       │         border-radius: $border-radius-circle;
│   │       │       │         background-color: $tertiary;
│   │       │       │         display: flex;
│   │       │       │         align-items: center;
│   │       │       │         justify-content: center;
│   │       │       │         color: $neutral-light;
│   │       │       │         font-weight: $font-weight-medium;
│   │       │       │         overflow: hidden;
│   │       │       │         
│   │       │       │         // Tamaños
│   │       │       │         &.small {
│   │       │       │           width: 40px;
│   │       │       │           height: 40px;
│   │       │       │           font-size: $font-size-sm;
│   │       │       │           
│   │       │       │           .edit-photo-button {
│   │       │       │             width: 20px;
│   │       │       │             height: 20px;
│   │       │       │             
│   │       │       │             app-icon {
│   │       │       │               font-size: 12px;
│   │       │       │             }
│   │       │       │           }
│   │       │       │         }
│   │       │       │         
│   │       │       │         &.medium {
│   │       │       │           width: 64px;
│   │       │       │           height: 64px;
│   │       │       │           font-size: $font-size-lg;
│   │       │       │           
│   │       │       │           .edit-photo-button {
│   │       │       │             width: 24px;
│   │       │       │             height: 24px;
│   │       │       │             
│   │       │       │             app-icon {
│   │       │       │               font-size: 14px;
│   │       │       │             }
│   │       │       │           }
│   │       │       │         }
│   │       │       │         
│   │       │       │         &.large {
│   │       │       │           width: 120px;
│   │       │       │           height: 120px;
│   │       │       │           font-size: $font-size-2xl;
│   │       │       │           
│   │       │       │           .edit-photo-button {
│   │       │       │             width: 32px;
│   │       │       │             height: 32px;
│   │       │       │             
│   │       │       │             app-icon {
│   │       │       │               font-size: 18px;
│   │       │       │             }
│   │       │       │           }
│   │       │       │         }
│   │       │       │         
│   │       │       │         // Indicador de estado
│   │       │       │         &.active::after {
│   │       │       │           content: '';
│   │       │       │           position: absolute;
│   │       │       │           bottom: 3px;
│   │       │       │           right: 3px;
│   │       │       │           width: 12px;
│   │       │       │           height: 12px;
│   │       │       │           background-color: $success;
│   │       │       │           border-radius: $border-radius-circle;
│   │       │       │           border: 2px solid $neutral-light;
│   │       │       │         }
│   │       │       │         
│   │       │       │         // Imagen
│   │       │       │         img {
│   │       │       │           width: 100%;
│   │       │       │           height: 100%;
│   │       │       │           object-fit: cover;
│   │       │       │         }
│   │       │       │         
│   │       │       │         // Iniciales
│   │       │       │         .avatar-initials {
│   │       │       │           display: flex;
│   │       │       │           align-items: center;
│   │       │       │           justify-content: center;
│   │       │       │           width: 100%;
│   │       │       │           height: 100%;
│   │       │       │         }
│   │       │       │         
│   │       │       │         // Botón editar
│   │       │       │         .edit-photo-button {
│   │       │       │           position: absolute;
│   │       │       │           bottom: 0;
│   │       │       │           right: 0;
│   │       │       │           background-color: $primary;
│   │       │       │           color: $neutral-light;
│   │       │       │           border: none;
│   │       │       │           border-radius: $border-radius-circle;
│   │       │       │           display: flex;
│   │       │       │           align-items: center;
│   │       │       │           justify-content: center;
│   │       │       │           cursor: pointer;
│   │       │       │           transition: $transition-default;
│   │       │       │           
│   │       │       │           &:hover {
│   │       │       │             background-color: $primary-dark;
│   │       │       │           }
│   │       │       │         }
│   │       │       │       }

│   │       │       ├── user-avatar.component.spec.ts
│   │       │       │   Content:
│   │       │       │       File size: 649 bytes
│   │       │       │       Total lines: 23
│   │       │       │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │       │       
│   │       │       │       import { UserAvatarComponent } from './user-avatar.component';
│   │       │       │       
│   │       │       │       describe('UserAvatarComponent', () => {
│   │       │       │         let component: UserAvatarComponent;
│   │       │       │         let fixture: ComponentFixture<UserAvatarComponent>;
│   │       │       │       
│   │       │       │         beforeEach(async () => {
│   │       │       │           await TestBed.configureTestingModule({
│   │       │       │             declarations: [UserAvatarComponent]
│   │       │       │           })
│   │       │       │           .compileComponents();
│   │       │       │       
│   │       │       │           fixture = TestBed.createComponent(UserAvatarComponent);
│   │       │       │           component = fixture.componentInstance;
│   │       │       │           fixture.detectChanges();
│   │       │       │         });
│   │       │       │       
│   │       │       │         it('should create', () => {
│   │       │       │           expect(component).toBeTruthy();
│   │       │       │         });
│   │       │       │       });

│   │       │       └── user-avatar.component.ts
│   │       │           Content:
│   │       │               File size: 1040 bytes
│   │       │               Total lines: 34
│   │       │               import { Component, Input, Output, EventEmitter } from '@angular/core';
│   │       │               
│   │       │               @Component({
│   │       │                 selector: 'app-user-avatar',
│   │       │                 standalone: false,
│   │       │                 templateUrl: './user-avatar.component.html',
│   │       │                 styleUrls: ['./user-avatar.component.scss']
│   │       │               })
│   │       │               export class UserAvatarComponent {
│   │       │                 @Input() name: string = '';
│   │       │                 @Input() lastName: string = '';
│   │       │                 // Cambia esta línea para permitir undefined también
│   │       │                 @Input() photoUrl: string | null | undefined = null;
│   │       │                 @Input() active: boolean = true;
│   │       │                 @Input() size: 'small' | 'medium' | 'large' = 'medium';
│   │       │                 @Input() showEditButton: boolean = false;
│   │       │                 @Output() editPhoto = new EventEmitter<void>();
│   │       │                 
│   │       │                 /**
│   │       │                  * Obtiene las iniciales del nombre y apellido
│   │       │                  */
│   │       │                 get initials(): string {
│   │       │                   const nameInitial = this.name.charAt(0) || '';
│   │       │                   const lastNameInitial = this.lastName.charAt(0) || '';
│   │       │                   return (nameInitial + lastNameInitial).toUpperCase();
│   │       │                 }
│   │       │                 
│   │       │                 /**
│   │       │                  * Emite el evento para editar la foto
│   │       │                  */
│   │       │                 onEditClick(): void {
│   │       │                   this.editPhoto.emit();
│   │       │                 }
│   │       │               }

│   │       ├── models
│   │       │   ├── permission.interface.ts
│   │       │   │   Content:
│   │       │   │       File size: 110 bytes
│   │       │   │       Total lines: 6
│   │       │   │       export interface Permission {
│   │       │   │         id: number;
│   │       │   │         name: string;
│   │       │   │         description?: string;
│   │       │   │         granted: boolean;
│   │       │   │       }

│   │       │   ├── role.enum.ts
│   │       │   │   Content:
│   │       │   │       File size: 112 bytes
│   │       │   │       Total lines: 5
│   │       │   │       export enum UserRole {
│   │       │   │         ADMIN = 'ADMIN',
│   │       │   │         VETERINARIAN = 'VETERINARIAN',
│   │       │   │         RECEPTIONIST = 'RECEPTIONIST'
│   │       │   │       }

│   │       │   ├── user-activity.interface.ts
│   │       │   │   Content:
│   │       │   │       File size: 204 bytes
│   │       │   │       Total lines: 9
│   │       │   │       export type ActivityType = 'consultation' | 'vaccination' | 'login';
│   │       │   │       
│   │       │   │       export interface UserActivity {
│   │       │   │         id: number;
│   │       │   │         type: ActivityType;
│   │       │   │         description: string;
│   │       │   │         details?: string;
│   │       │   │         date: Date;
│   │       │   │       }

│   │       │   └── user.interface.ts
│   │       │       Content:
│   │       │           File size: 294 bytes
│   │       │           Total lines: 14
│   │       │           import { UserRole } from './role.enum';
│   │       │           
│   │       │           export interface User {
│   │       │             id: number;
│   │       │             name: string;
│   │       │             lastName: string;
│   │       │             email: string;
│   │       │             role: UserRole;
│   │       │             photoUrl?: string | null; 
│   │       │             lastAccess?: Date | null;
│   │       │             createdAt?: Date | null;
│   │       │             updatedAt?: Date | null;
│   │       │             active: boolean;
│   │       │           }

│   │       ├── molecules
│   │       │   ├── role-selector
│   │       │   │   ├── role-selector.component.html
│   │       │   │   │   Content:
│   │       │   │   │       File size: 29 bytes
│   │       │   │   │       Total lines: 1
│   │       │   │   │       <p>role-selector works!</p>

│   │       │   │   ├── role-selector.component.scss
│   │       │   │   │   Content:
│   │       │   │   │       File size: 0 bytes
│   │       │   │   │       Total lines: 0

│   │       │   │   ├── role-selector.component.spec.ts
│   │       │   │   │   Content:
│   │       │   │   │       File size: 663 bytes
│   │       │   │   │       Total lines: 23
│   │       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │   │   │       
│   │       │   │   │       import { RoleSelectorComponent } from './role-selector.component';
│   │       │   │   │       
│   │       │   │   │       describe('RoleSelectorComponent', () => {
│   │       │   │   │         let component: RoleSelectorComponent;
│   │       │   │   │         let fixture: ComponentFixture<RoleSelectorComponent>;
│   │       │   │   │       
│   │       │   │   │         beforeEach(async () => {
│   │       │   │   │           await TestBed.configureTestingModule({
│   │       │   │   │             declarations: [RoleSelectorComponent]
│   │       │   │   │           })
│   │       │   │   │           .compileComponents();
│   │       │   │   │       
│   │       │   │   │           fixture = TestBed.createComponent(RoleSelectorComponent);
│   │       │   │   │           component = fixture.componentInstance;
│   │       │   │   │           fixture.detectChanges();
│   │       │   │   │         });
│   │       │   │   │       
│   │       │   │   │         it('should create', () => {
│   │       │   │   │           expect(component).toBeTruthy();
│   │       │   │   │         });
│   │       │   │   │       });

│   │       │   │   └── role-selector.component.ts
│   │       │   │       Content:
│   │       │   │           File size: 259 bytes
│   │       │   │           Total lines: 11
│   │       │   │           import { Component } from '@angular/core';
│   │       │   │           
│   │       │   │           @Component({
│   │       │   │             selector: 'app-role-selector',
│   │       │   │             standalone: false,
│   │       │   │             templateUrl: './role-selector.component.html',
│   │       │   │             styleUrl: './role-selector.component.scss'
│   │       │   │           })
│   │       │   │           export class RoleSelectorComponent {
│   │       │   │           
│   │       │   │           }

│   │       │   ├── user-info-card
│   │       │   │   ├── user-info-card.component.html
│   │       │   │   │   Content:
│   │       │   │   │       File size: 779 bytes
│   │       │   │   │       Total lines: 24
│   │       │   │   │       <div class="user-info-card" *ngIf="user">
│   │       │   │   │         <div class="user-name">{{ user.name }} {{ user.lastName }}</div>
│   │       │   │   │         
│   │       │   │   │         <div class="user-role">
│   │       │   │   │           <app-role-badge [role]="user.role"></app-role-badge>
│   │       │   │   │         </div>
│   │       │   │   │         
│   │       │   │   │         <div class="user-contact">
│   │       │   │   │           <div class="contact-item">
│   │       │   │   │             <app-icon name="email"></app-icon>
│   │       │   │   │             <span>{{ user.email }}</span>
│   │       │   │   │           </div>
│   │       │   │   │           
│   │       │   │   │           <div class="contact-item" *ngIf="user.lastAccess">
│   │       │   │   │             <app-icon name="access_time"></app-icon>
│   │       │   │   │             <span>Último acceso: {{ user.lastAccess | date:'medium' }}</span>
│   │       │   │   │           </div>
│   │       │   │   │           
│   │       │   │   │           <div class="contact-item" *ngIf="user.createdAt">
│   │       │   │   │             <app-icon name="calendar_today"></app-icon>
│   │       │   │   │             <span>Miembro desde: {{ user.createdAt | date:'mediumDate' }}</span>
│   │       │   │   │           </div>
│   │       │   │   │         </div>
│   │       │   │   │       </div>

│   │       │   │   ├── user-info-card.component.scss
│   │       │   │   │   Content:
│   │       │   │   │       File size: 625 bytes
│   │       │   │   │       Total lines: 33
│   │       │   │   │       @use 'variables' as *;
│   │       │   │   │       
│   │       │   │   │       .user-info-card {
│   │       │   │   │         .user-name {
│   │       │   │   │           font-size: $font-size-xl;
│   │       │   │   │           font-weight: $font-weight-bold;
│   │       │   │   │           color: $neutral-dark;
│   │       │   │   │           margin-bottom: $spacing-xs;
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .user-role {
│   │       │   │   │           margin-bottom: $spacing-sm;
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .user-contact {
│   │       │   │   │           display: flex;
│   │       │   │   │           flex-direction: column;
│   │       │   │   │           gap: $spacing-xs;
│   │       │   │   │           
│   │       │   │   │           .contact-item {
│   │       │   │   │             display: flex;
│   │       │   │   │             align-items: center;
│   │       │   │   │             color: $neutral-medium;
│   │       │   │   │             font-size: $font-size-sm;
│   │       │   │   │             
│   │       │   │   │             app-icon {
│   │       │   │   │               color: $tertiary;
│   │       │   │   │               margin-right: $spacing-xs;
│   │       │   │   │               font-size: 18px;
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │       }

│   │       │   │   ├── user-info-card.component.spec.ts
│   │       │   │   │   Content:
│   │       │   │   │       File size: 664 bytes
│   │       │   │   │       Total lines: 23
│   │       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │   │   │       
│   │       │   │   │       import { UserInfoCardComponent } from './user-info-card.component';
│   │       │   │   │       
│   │       │   │   │       describe('UserInfoCardComponent', () => {
│   │       │   │   │         let component: UserInfoCardComponent;
│   │       │   │   │         let fixture: ComponentFixture<UserInfoCardComponent>;
│   │       │   │   │       
│   │       │   │   │         beforeEach(async () => {
│   │       │   │   │           await TestBed.configureTestingModule({
│   │       │   │   │             declarations: [UserInfoCardComponent]
│   │       │   │   │           })
│   │       │   │   │           .compileComponents();
│   │       │   │   │       
│   │       │   │   │           fixture = TestBed.createComponent(UserInfoCardComponent);
│   │       │   │   │           component = fixture.componentInstance;
│   │       │   │   │           fixture.detectChanges();
│   │       │   │   │         });
│   │       │   │   │       
│   │       │   │   │         it('should create', () => {
│   │       │   │   │           expect(component).toBeTruthy();
│   │       │   │   │         });
│   │       │   │   │       });

│   │       │   │   └── user-info-card.component.ts
│   │       │   │       Content:
│   │       │   │           File size: 359 bytes
│   │       │   │           Total lines: 12
│   │       │   │           import { Component, Input } from '@angular/core';
│   │       │   │           import { User } from '../../models/user.interface';
│   │       │   │           
│   │       │   │           @Component({
│   │       │   │             selector: 'app-user-info-card',
│   │       │   │             standalone: false,
│   │       │   │             templateUrl: './user-info-card.component.html',
│   │       │   │             styleUrls: ['./user-info-card.component.scss']
│   │       │   │           })
│   │       │   │           export class UserInfoCardComponent {
│   │       │   │             @Input() user: User | null = null;
│   │       │   │           }

│   │       │   └── user-search-input
│   │       │       ├── user-search-input.component.html
│   │       │       │   Content:
│   │       │       │       File size: 33 bytes
│   │       │       │       Total lines: 1
│   │       │       │       <p>user-search-input works!</p>

│   │       │       ├── user-search-input.component.scss
│   │       │       │   Content:
│   │       │       │       File size: 0 bytes
│   │       │       │       Total lines: 0

│   │       │       ├── user-search-input.component.spec.ts
│   │       │       │   Content:
│   │       │       │       File size: 685 bytes
│   │       │       │       Total lines: 23
│   │       │       │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │       │       
│   │       │       │       import { UserSearchInputComponent } from './user-search-input.component';
│   │       │       │       
│   │       │       │       describe('UserSearchInputComponent', () => {
│   │       │       │         let component: UserSearchInputComponent;
│   │       │       │         let fixture: ComponentFixture<UserSearchInputComponent>;
│   │       │       │       
│   │       │       │         beforeEach(async () => {
│   │       │       │           await TestBed.configureTestingModule({
│   │       │       │             declarations: [UserSearchInputComponent]
│   │       │       │           })
│   │       │       │           .compileComponents();
│   │       │       │       
│   │       │       │           fixture = TestBed.createComponent(UserSearchInputComponent);
│   │       │       │           component = fixture.componentInstance;
│   │       │       │           fixture.detectChanges();
│   │       │       │         });
│   │       │       │       
│   │       │       │         it('should create', () => {
│   │       │       │           expect(component).toBeTruthy();
│   │       │       │         });
│   │       │       │       });

│   │       │       └── user-search-input.component.ts
│   │       │           Content:
│   │       │               File size: 274 bytes
│   │       │               Total lines: 11
│   │       │               import { Component } from '@angular/core';
│   │       │               
│   │       │               @Component({
│   │       │                 selector: 'app-user-search-input',
│   │       │                 standalone: false,
│   │       │                 templateUrl: './user-search-input.component.html',
│   │       │                 styleUrl: './user-search-input.component.scss'
│   │       │               })
│   │       │               export class UserSearchInputComponent {
│   │       │               
│   │       │               }

│   │       ├── organisms
│   │       │   ├── activity-list
│   │       │   │   ├── activity-list.component.html
│   │       │   │   │   Content:
│   │       │   │   │       File size: 1112 bytes
│   │       │   │   │       Total lines: 31
│   │       │   │   │       <div class="activity-list">
│   │       │   │   │         <div class="activity-header">
│   │       │   │   │           <app-icon name="history"></app-icon>
│   │       │   │   │           <h3>Actividad Reciente</h3>
│   │       │   │   │         </div>
│   │       │   │   │         
│   │       │   │   │         <div class="activity-content">
│   │       │   │   │           <div class="activity-item" *ngFor="let activity of limitedActivities">
│   │       │   │   │             <div class="activity-icon" [ngClass]="getActivityClass(activity)">
│   │       │   │   │               <app-icon [name]="getActivityIcon(activity)"></app-icon>
│   │       │   │   │             </div>
│   │       │   │   │             
│   │       │   │   │             <div class="activity-details">
│   │       │   │   │               <div class="activity-title">{{ activity.description }}</div>
│   │       │   │   │               <div class="activity-info" *ngIf="activity.details">{{ activity.details }}</div>
│   │       │   │   │               <div class="activity-time">{{ activity.date | date:'medium' }}</div>
│   │       │   │   │             </div>
│   │       │   │   │           </div>
│   │       │   │   │           
│   │       │   │   │           <div class="no-activities" *ngIf="activities.length === 0">
│   │       │   │   │             No hay actividades recientes para mostrar.
│   │       │   │   │           </div>
│   │       │   │   │         </div>
│   │       │   │   │         
│   │       │   │   │         <div class="activity-footer" *ngIf="activities.length > limit && viewAllLink">
│   │       │   │   │           <a [routerLink]="viewAllLink" class="view-all">
│   │       │   │   │             Ver toda la actividad
│   │       │   │   │             <app-icon name="chevron_right"></app-icon>
│   │       │   │   │           </a>
│   │       │   │   │         </div>
│   │       │   │   │       </div>

│   │       │   │   ├── activity-list.component.scss
│   │       │   │   │   Content:
│   │       │   │   │       File size: 2576 bytes
│   │       │   │   │       Total lines: 119
│   │       │   │   │       @use 'variables' as *;
│   │       │   │   │       
│   │       │   │   │       .activity-list {
│   │       │   │   │         background-color: $neutral-light;
│   │       │   │   │         border-radius: $border-radius-lg;
│   │       │   │   │         box-shadow: $shadow-md;
│   │       │   │   │         overflow: hidden;
│   │       │   │   │         
│   │       │   │   │         .activity-header {
│   │       │   │   │           display: flex;
│   │       │   │   │           align-items: center;
│   │       │   │   │           padding: $spacing-md;
│   │       │   │   │           background-color: $neutral-bg;
│   │       │   │   │           border-bottom: 1px solid rgba($neutral-medium, 0.2);
│   │       │   │   │           
│   │       │   │   │           app-icon {
│   │       │   │   │             color: $tertiary;
│   │       │   │   │             font-size: 24px;
│   │       │   │   │             margin-right: $spacing-sm;
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           h3 {
│   │       │   │   │             margin: 0;
│   │       │   │   │             font-size: $font-size-lg;
│   │       │   │   │             font-weight: $font-weight-medium;
│   │       │   │   │             color: $neutral-dark;
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .activity-content {
│   │       │   │   │           padding: $spacing-md;
│   │       │   │   │           
│   │       │   │   │           .activity-item {
│   │       │   │   │             display: flex;
│   │       │   │   │             margin-bottom: $spacing-md;
│   │       │   │   │             
│   │       │   │   │             &:last-child {
│   │       │   │   │               margin-bottom: 0;
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .activity-icon {
│   │       │   │   │               width: 40px;
│   │       │   │   │               height: 40px;
│   │       │   │   │               border-radius: $border-radius-circle;
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               justify-content: center;
│   │       │   │   │               margin-right: $spacing-md;
│   │       │   │   │               flex-shrink: 0;
│   │       │   │   │               
│   │       │   │   │               app-icon {
│   │       │   │   │                 color: $neutral-light;
│   │       │   │   │                 font-size: 20px;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               &.consultation {
│   │       │   │   │                 background-color: $tertiary;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               &.vaccination {
│   │       │   │   │                 background-color: $success;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               &.login {
│   │       │   │   │                 background-color: $primary;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .activity-details {
│   │       │   │   │               .activity-title {
│   │       │   │   │                 font-weight: $font-weight-medium;
│   │       │   │   │                 color: $neutral-dark;
│   │       │   │   │                 margin-bottom: $spacing-xxs;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               .activity-info {
│   │       │   │   │                 font-size: $font-size-sm;
│   │       │   │   │                 color: $neutral-medium;
│   │       │   │   │                 margin-bottom: $spacing-xxs;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               .activity-time {
│   │       │   │   │                 font-size: $font-size-xs;
│   │       │   │   │                 color: $neutral-medium;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           .no-activities {
│   │       │   │   │             text-align: center;
│   │       │   │   │             color: $neutral-medium;
│   │       │   │   │             padding: $spacing-lg 0;
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .activity-footer {
│   │       │   │   │           padding: $spacing-md;
│   │       │   │   │           display: flex;
│   │       │   │   │           justify-content: flex-end;
│   │       │   │   │           border-top: 1px solid rgba($neutral-medium, 0.1);
│   │       │   │   │           
│   │       │   │   │           .view-all {
│   │       │   │   │             display: flex;
│   │       │   │   │             align-items: center;
│   │       │   │   │             color: $primary;
│   │       │   │   │             text-decoration: none;
│   │       │   │   │             font-size: $font-size-sm;
│   │       │   │   │             
│   │       │   │   │             app-icon {
│   │       │   │   │               margin-left: $spacing-xxs;
│   │       │   │   │               font-size: 18px;
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             &:hover {
│   │       │   │   │               text-decoration: underline;
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │       }

│   │       │   │   ├── activity-list.component.spec.ts
│   │       │   │   │   Content:
│   │       │   │   │       File size: 663 bytes
│   │       │   │   │       Total lines: 23
│   │       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │   │   │       
│   │       │   │   │       import { ActivityListComponent } from './activity-list.component';
│   │       │   │   │       
│   │       │   │   │       describe('ActivityListComponent', () => {
│   │       │   │   │         let component: ActivityListComponent;
│   │       │   │   │         let fixture: ComponentFixture<ActivityListComponent>;
│   │       │   │   │       
│   │       │   │   │         beforeEach(async () => {
│   │       │   │   │           await TestBed.configureTestingModule({
│   │       │   │   │             declarations: [ActivityListComponent]
│   │       │   │   │           })
│   │       │   │   │           .compileComponents();
│   │       │   │   │       
│   │       │   │   │           fixture = TestBed.createComponent(ActivityListComponent);
│   │       │   │   │           component = fixture.componentInstance;
│   │       │   │   │           fixture.detectChanges();
│   │       │   │   │         });
│   │       │   │   │       
│   │       │   │   │         it('should create', () => {
│   │       │   │   │           expect(component).toBeTruthy();
│   │       │   │   │         });
│   │       │   │   │       });

│   │       │   │   └── activity-list.component.ts
│   │       │   │       Content:
│   │       │   │           File size: 1147 bytes
│   │       │   │           Total lines: 44
│   │       │   │           import { Component, Input } from '@angular/core';
│   │       │   │           import { UserActivity } from '../../models/user-activity.interface';
│   │       │   │           
│   │       │   │           @Component({
│   │       │   │             selector: 'app-activity-list',
│   │       │   │             standalone: false,
│   │       │   │             templateUrl: './activity-list.component.html',
│   │       │   │             styleUrls: ['./activity-list.component.scss']
│   │       │   │           })
│   │       │   │           export class ActivityListComponent {
│   │       │   │             @Input() activities: UserActivity[] = [];
│   │       │   │             @Input() viewAllLink: string = '';
│   │       │   │             @Input() limit: number = 5;
│   │       │   │             
│   │       │   │             /**
│   │       │   │              * Determina el icono según el tipo de actividad
│   │       │   │              */
│   │       │   │             getActivityIcon(activity: UserActivity): string {
│   │       │   │               switch(activity.type) {
│   │       │   │                 case 'consultation':
│   │       │   │                   return 'medical_services';
│   │       │   │                 case 'vaccination':
│   │       │   │                   return 'healing';
│   │       │   │                 case 'login':
│   │       │   │                   return 'login';
│   │       │   │                 default:
│   │       │   │                   return 'history';
│   │       │   │               }
│   │       │   │             }
│   │       │   │             
│   │       │   │             /**
│   │       │   │              * Obtiene la clase CSS según el tipo de actividad
│   │       │   │              */
│   │       │   │             getActivityClass(activity: UserActivity): string {
│   │       │   │               return activity.type;
│   │       │   │             }
│   │       │   │             
│   │       │   │             /**
│   │       │   │              * Limita el número de actividades mostradas
│   │       │   │              */
│   │       │   │             get limitedActivities(): UserActivity[] {
│   │       │   │               return this.activities.slice(0, this.limit);
│   │       │   │             }
│   │       │   │           }

│   │       │   ├── permissions-panel
│   │       │   │   ├── permissions-panel.component.html
│   │       │   │   │   Content:
│   │       │   │   │       File size: 1401 bytes
│   │       │   │   │       Total lines: 43
│   │       │   │   │       <div class="permissions-panel">
│   │       │   │   │         <div class="panel-header">
│   │       │   │   │           <app-icon name="security"></app-icon>
│   │       │   │   │           <h3>Permisos y Accesos</h3>
│   │       │   │   │         </div>
│   │       │   │   │         
│   │       │   │   │         <div class="panel-content">
│   │       │   │   │           <div class="permission-item" *ngFor="let permission of permissions">
│   │       │   │   │             <div class="permission-check">
│   │       │   │   │               <input 
│   │       │   │   │                 type="checkbox" 
│   │       │   │   │                 [id]="'permission-' + permission.id"
│   │       │   │   │                 [checked]="permission.granted" 
│   │       │   │   │                 [disabled]="!canEdit"
│   │       │   │   │                 (change)="onPermissionChange(permission, $event)">   
│   │       │   │   │             </div>
│   │       │   │   │             
│   │       │   │   │             <div class="permission-label">
│   │       │   │   │               <label [for]="'permission-' + permission.id">{{ permission.name }}</label>
│   │       │   │   │               <div class="permission-description" *ngIf="permission.description">
│   │       │   │   │                 {{ permission.description }}
│   │       │   │   │               </div>
│   │       │   │   │             </div>
│   │       │   │   │             
│   │       │   │   │             <div class="permission-status" 
│   │       │   │   │                  [ngClass]="{'granted': permission.granted, 'restricted': !permission.granted}">
│   │       │   │   │               {{ permission.granted ? 'Concedido' : 'Restringido' }}
│   │       │   │   │             </div>
│   │       │   │   │           </div>
│   │       │   │   │           
│   │       │   │   │           <div class="no-permissions" *ngIf="permissions.length === 0">
│   │       │   │   │             No hay permisos configurados para este usuario.
│   │       │   │   │           </div>
│   │       │   │   │         </div>
│   │       │   │   │         
│   │       │   │   │         <div class="panel-actions" *ngIf="canEdit">
│   │       │   │   │           <app-button 
│   │       │   │   │             variant="primary"
│   │       │   │   │             (buttonClick)="onManagePermissions()">
│   │       │   │   │             Gestionar Permisos
│   │       │   │   │           </app-button>
│   │       │   │   │         </div>
│   │       │   │   │       </div>

│   │       │   │   ├── permissions-panel.component.scss
│   │       │   │   │   Content:
│   │       │   │   │       File size: 2431 bytes
│   │       │   │   │       Total lines: 105
│   │       │   │   │       @use 'variables' as *;
│   │       │   │   │       
│   │       │   │   │       .permissions-panel {
│   │       │   │   │         background-color: $neutral-light;
│   │       │   │   │         border-radius: $border-radius-lg;
│   │       │   │   │         box-shadow: $shadow-md;
│   │       │   │   │         overflow: hidden;
│   │       │   │   │         
│   │       │   │   │         .panel-header {
│   │       │   │   │           display: flex;
│   │       │   │   │           align-items: center;
│   │       │   │   │           padding: $spacing-md;
│   │       │   │   │           background-color: $neutral-bg;
│   │       │   │   │           border-bottom: 1px solid rgba($neutral-medium, 0.2);
│   │       │   │   │           
│   │       │   │   │           app-icon {
│   │       │   │   │             color: $tertiary;
│   │       │   │   │             font-size: 24px;
│   │       │   │   │             margin-right: $spacing-sm;
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           h3 {
│   │       │   │   │             margin: 0;
│   │       │   │   │             font-size: $font-size-lg;
│   │       │   │   │             font-weight: $font-weight-medium;
│   │       │   │   │             color: $neutral-dark;
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .panel-content {
│   │       │   │   │           padding: $spacing-md;
│   │       │   │   │           
│   │       │   │   │           .permission-item {
│   │       │   │   │             display: grid;
│   │       │   │   │             grid-template-columns: auto 1fr auto;
│   │       │   │   │             gap: $spacing-md;
│   │       │   │   │             align-items: center;
│   │       │   │   │             padding: $spacing-sm 0;
│   │       │   │   │             border-bottom: 1px solid rgba($neutral-medium, 0.1);
│   │       │   │   │             
│   │       │   │   │             &:last-child {
│   │       │   │   │               border-bottom: none;
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .permission-check {
│   │       │   │   │               input[type="checkbox"] {
│   │       │   │   │                 width: 18px;
│   │       │   │   │                 height: 18px;
│   │       │   │   │                 accent-color: $primary;
│   │       │   │   │                 cursor: pointer;
│   │       │   │   │                 
│   │       │   │   │                 &:disabled {
│   │       │   │   │                   opacity: 0.6;
│   │       │   │   │                   cursor: not-allowed;
│   │       │   │   │                 }
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .permission-label {
│   │       │   │   │               label {
│   │       │   │   │                 display: block;
│   │       │   │   │                 font-weight: $font-weight-medium;
│   │       │   │   │                 color: $neutral-dark;
│   │       │   │   │                 margin-bottom: $spacing-xxs;
│   │       │   │   │                 cursor: pointer;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               .permission-description {
│   │       │   │   │                 font-size: $font-size-xs;
│   │       │   │   │                 color: $neutral-medium;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .permission-status {
│   │       │   │   │               font-size: $font-size-xs;
│   │       │   │   │               font-weight: $font-weight-medium;
│   │       │   │   │               padding: $spacing-xxs $spacing-xs;
│   │       │   │   │               border-radius: $border-radius-sm;
│   │       │   │   │               
│   │       │   │   │               &.granted {
│   │       │   │   │                 background-color: rgba($success, 0.1);
│   │       │   │   │                 color: $success;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               &.restricted {
│   │       │   │   │                 background-color: rgba($warning, 0.1);
│   │       │   │   │                 color: darken($warning, 15%);
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           .no-permissions {
│   │       │   │   │             text-align: center;
│   │       │   │   │             color: $neutral-medium;
│   │       │   │   │             padding: $spacing-lg 0;
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .panel-actions {
│   │       │   │   │           padding: $spacing-md;
│   │       │   │   │           display: flex;
│   │       │   │   │           justify-content: center;
│   │       │   │   │           border-top: 1px solid rgba($neutral-medium, 0.2);
│   │       │   │   │         }
│   │       │   │   │       }

│   │       │   │   ├── permissions-panel.component.spec.ts
│   │       │   │   │   Content:
│   │       │   │   │       File size: 691 bytes
│   │       │   │   │       Total lines: 23
│   │       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │   │   │       
│   │       │   │   │       import { PermissionsPanelComponent } from './permissions-panel.component';
│   │       │   │   │       
│   │       │   │   │       describe('PermissionsPanelComponent', () => {
│   │       │   │   │         let component: PermissionsPanelComponent;
│   │       │   │   │         let fixture: ComponentFixture<PermissionsPanelComponent>;
│   │       │   │   │       
│   │       │   │   │         beforeEach(async () => {
│   │       │   │   │           await TestBed.configureTestingModule({
│   │       │   │   │             declarations: [PermissionsPanelComponent]
│   │       │   │   │           })
│   │       │   │   │           .compileComponents();
│   │       │   │   │       
│   │       │   │   │           fixture = TestBed.createComponent(PermissionsPanelComponent);
│   │       │   │   │           component = fixture.componentInstance;
│   │       │   │   │           fixture.detectChanges();
│   │       │   │   │         });
│   │       │   │   │       
│   │       │   │   │         it('should create', () => {
│   │       │   │   │           expect(component).toBeTruthy();
│   │       │   │   │         });
│   │       │   │   │       });

│   │       │   │   └── permissions-panel.component.ts
│   │       │   │       Content:
│   │       │   │           File size: 1067 bytes
│   │       │   │           Total lines: 33
│   │       │   │           import { Component, Input, Output, EventEmitter } from '@angular/core';
│   │       │   │           import { Permission } from '../../models/permission.interface';
│   │       │   │           
│   │       │   │           @Component({
│   │       │   │             selector: 'app-permissions-panel',
│   │       │   │             standalone: false,
│   │       │   │             templateUrl: './permissions-panel.component.html',
│   │       │   │             styleUrls: ['./permissions-panel.component.scss']
│   │       │   │           })
│   │       │   │           export class PermissionsPanelComponent {
│   │       │   │             @Input() permissions: Permission[] = [];
│   │       │   │             @Input() canEdit: boolean = false;
│   │       │   │             @Output() permissionChange = new EventEmitter<{ id: number, granted: boolean }>();
│   │       │   │             @Output() managePermissions = new EventEmitter<void>();
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Emite evento para cambiar un permiso
│   │       │   │              */
│   │       │   │             onPermissionChange(permission: Permission, event: Event): void {
│   │       │   │               if (this.canEdit) {
│   │       │   │                 const target = event.target as HTMLInputElement;
│   │       │   │                 const isGranted = target.checked;
│   │       │   │                 this.permissionChange.emit({ id: permission.id, granted: isGranted });
│   │       │   │               }
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Emite evento para gestionar permisos
│   │       │   │              */
│   │       │   │             onManagePermissions(): void {
│   │       │   │               this.managePermissions.emit();
│   │       │   │             }
│   │       │   │           }

│   │       │   ├── stats-panel
│   │       │   │   ├── stats-panel.component.html
│   │       │   │   │   Content:
│   │       │   │   │       File size: 596 bytes
│   │       │   │   │       Total lines: 20
│   │       │   │   │       <div class="stats-panel">
│   │       │   │   │         <div class="panel-header">
│   │       │   │   │           <app-icon [name]="icon"></app-icon>
│   │       │   │   │           <h3>{{ title }}</h3>
│   │       │   │   │         </div>
│   │       │   │   │         
│   │       │   │   │         <div class="panel-content">
│   │       │   │   │           <div class="stat-item" *ngFor="let stat of stats">
│   │       │   │   │             <div class="stat-value">{{ stat.value }}</div>
│   │       │   │   │             <div class="stat-label">{{ stat.label }}</div>
│   │       │   │   │             <div class="stat-bar">
│   │       │   │   │               <div class="stat-progress" [style.width.%]="stat.percentage"></div>
│   │       │   │   │             </div>
│   │       │   │   │           </div>
│   │       │   │   │           
│   │       │   │   │           <div class="no-stats" *ngIf="stats.length === 0">
│   │       │   │   │             No hay estadísticas disponibles.
│   │       │   │   │           </div>
│   │       │   │   │         </div>
│   │       │   │   │       </div>

│   │       │   │   ├── stats-panel.component.scss
│   │       │   │   │   Content:
│   │       │   │   │       File size: 1634 bytes
│   │       │   │   │       Total lines: 75
│   │       │   │   │       @use 'variables' as *;
│   │       │   │   │       
│   │       │   │   │       .stats-panel {
│   │       │   │   │         background-color: $neutral-light;
│   │       │   │   │         border-radius: $border-radius-lg;
│   │       │   │   │         box-shadow: $shadow-md;
│   │       │   │   │         overflow: hidden;
│   │       │   │   │         
│   │       │   │   │         .panel-header {
│   │       │   │   │           display: flex;
│   │       │   │   │           align-items: center;
│   │       │   │   │           padding: $spacing-md;
│   │       │   │   │           background-color: $neutral-bg;
│   │       │   │   │           border-bottom: 1px solid rgba($neutral-medium, 0.2);
│   │       │   │   │           
│   │       │   │   │           app-icon {
│   │       │   │   │             color: $tertiary;
│   │       │   │   │             font-size: 24px;
│   │       │   │   │             margin-right: $spacing-sm;
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           h3 {
│   │       │   │   │             margin: 0;
│   │       │   │   │             font-size: $font-size-lg;
│   │       │   │   │             font-weight: $font-weight-medium;
│   │       │   │   │             color: $neutral-dark;
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .panel-content {
│   │       │   │   │           padding: $spacing-md;
│   │       │   │   │           
│   │       │   │   │           .stat-item {
│   │       │   │   │             margin-bottom: $spacing-lg;
│   │       │   │   │             
│   │       │   │   │             &:last-child {
│   │       │   │   │               margin-bottom: 0;
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .stat-value {
│   │       │   │   │               font-size: $font-size-xl;
│   │       │   │   │               font-weight: $font-weight-bold;
│   │       │   │   │               color: $tertiary;
│   │       │   │   │               margin-bottom: $spacing-xxs;
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .stat-label {
│   │       │   │   │               font-size: $font-size-sm;
│   │       │   │   │               color: $neutral-medium;
│   │       │   │   │               margin-bottom: $spacing-sm;
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .stat-bar {
│   │       │   │   │               width: 100%;
│   │       │   │   │               height: 6px;
│   │       │   │   │               background-color: $neutral-bg;
│   │       │   │   │               border-radius: $border-radius-md;
│   │       │   │   │               overflow: hidden;
│   │       │   │   │               
│   │       │   │   │               .stat-progress {
│   │       │   │   │                 height: 100%;
│   │       │   │   │                 background: $gradient-primary;
│   │       │   │   │                 border-radius: $border-radius-md;
│   │       │   │   │                 transition: width 0.6s ease;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           .no-stats {
│   │       │   │   │             text-align: center;
│   │       │   │   │             color: $neutral-medium;
│   │       │   │   │             padding: $spacing-lg 0;
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │       }

│   │       │   │   ├── stats-panel.component.spec.ts
│   │       │   │   │   Content:
│   │       │   │   │       File size: 649 bytes
│   │       │   │   │       Total lines: 23
│   │       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │   │   │       
│   │       │   │   │       import { StatsPanelComponent } from './stats-panel.component';
│   │       │   │   │       
│   │       │   │   │       describe('StatsPanelComponent', () => {
│   │       │   │   │         let component: StatsPanelComponent;
│   │       │   │   │         let fixture: ComponentFixture<StatsPanelComponent>;
│   │       │   │   │       
│   │       │   │   │         beforeEach(async () => {
│   │       │   │   │           await TestBed.configureTestingModule({
│   │       │   │   │             declarations: [StatsPanelComponent]
│   │       │   │   │           })
│   │       │   │   │           .compileComponents();
│   │       │   │   │       
│   │       │   │   │           fixture = TestBed.createComponent(StatsPanelComponent);
│   │       │   │   │           component = fixture.componentInstance;
│   │       │   │   │           fixture.detectChanges();
│   │       │   │   │         });
│   │       │   │   │       
│   │       │   │   │         it('should create', () => {
│   │       │   │   │           expect(component).toBeTruthy();
│   │       │   │   │         });
│   │       │   │   │       });

│   │       │   │   └── stats-panel.component.ts
│   │       │   │       Content:
│   │       │   │           File size: 456 bytes
│   │       │   │           Total lines: 19
│   │       │   │           import { Component, Input } from '@angular/core';
│   │       │   │           
│   │       │   │           interface Stat {
│   │       │   │             label: string;
│   │       │   │             value: number;
│   │       │   │             percentage: number;
│   │       │   │           }
│   │       │   │           
│   │       │   │           @Component({
│   │       │   │             selector: 'app-stats-panel',
│   │       │   │             standalone: false,
│   │       │   │             templateUrl: './stats-panel.component.html',
│   │       │   │             styleUrls: ['./stats-panel.component.scss']
│   │       │   │           })
│   │       │   │           export class StatsPanelComponent {
│   │       │   │             @Input() title: string = 'Estadísticas';
│   │       │   │             @Input() icon: string = 'analytics';
│   │       │   │             @Input() stats: Stat[] = [];
│   │       │   │           }

│   │       │   ├── user-form
│   │       │   │   ├── user-form.component.html
│   │       │   │   │   Content:
│   │       │   │   │       File size: 25 bytes
│   │       │   │   │       Total lines: 1
│   │       │   │   │       <p>user-form works!</p>

│   │       │   │   ├── user-form.component.scss
│   │       │   │   │   Content:
│   │       │   │   │       File size: 0 bytes
│   │       │   │   │       Total lines: 0

│   │       │   │   ├── user-form.component.spec.ts
│   │       │   │   │   Content:
│   │       │   │   │       File size: 635 bytes
│   │       │   │   │       Total lines: 23
│   │       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │   │   │       
│   │       │   │   │       import { UserFormComponent } from './user-form.component';
│   │       │   │   │       
│   │       │   │   │       describe('UserFormComponent', () => {
│   │       │   │   │         let component: UserFormComponent;
│   │       │   │   │         let fixture: ComponentFixture<UserFormComponent>;
│   │       │   │   │       
│   │       │   │   │         beforeEach(async () => {
│   │       │   │   │           await TestBed.configureTestingModule({
│   │       │   │   │             declarations: [UserFormComponent]
│   │       │   │   │           })
│   │       │   │   │           .compileComponents();
│   │       │   │   │       
│   │       │   │   │           fixture = TestBed.createComponent(UserFormComponent);
│   │       │   │   │           component = fixture.componentInstance;
│   │       │   │   │           fixture.detectChanges();
│   │       │   │   │         });
│   │       │   │   │       
│   │       │   │   │         it('should create', () => {
│   │       │   │   │           expect(component).toBeTruthy();
│   │       │   │   │         });
│   │       │   │   │       });

│   │       │   │   └── user-form.component.ts
│   │       │   │       Content:
│   │       │   │           File size: 243 bytes
│   │       │   │           Total lines: 11
│   │       │   │           import { Component } from '@angular/core';
│   │       │   │           
│   │       │   │           @Component({
│   │       │   │             selector: 'app-user-form',
│   │       │   │             standalone: false,
│   │       │   │             templateUrl: './user-form.component.html',
│   │       │   │             styleUrl: './user-form.component.scss'
│   │       │   │           })
│   │       │   │           export class UserFormComponent {
│   │       │   │           
│   │       │   │           }

│   │       │   ├── user-profile-card
│   │       │   │   ├── user-profile-card.component.html
│   │       │   │   │   Content:
│   │       │   │   │       File size: 1098 bytes
│   │       │   │   │       Total lines: 43
│   │       │   │   │       <div class="profile-card" *ngIf="user">
│   │       │   │   │         <div class="profile-status">
│   │       │   │   │           <app-status-indicator 
│   │       │   │   │             [active]="user.active"
│   │       │   │   │             [showLabel]="true"
│   │       │   │   │             size="medium">
│   │       │   │   │           </app-status-indicator>
│   │       │   │   │         </div>
│   │       │   │   │         
│   │       │   │   │         <div class="profile-actions" *ngIf="canEdit">
│   │       │   │   │           <app-button 
│   │       │   │   │             variant="primary" 
│   │       │   │   │             size="sm"
│   │       │   │   │             (buttonClick)="onEdit()">
│   │       │   │   │             <app-icon name="edit"></app-icon>
│   │       │   │   │             <span>Editar</span>
│   │       │   │   │           </app-button>
│   │       │   │   │           
│   │       │   │   │           <app-button 
│   │       │   │   │             variant="danger" 
│   │       │   │   │             size="sm"
│   │       │   │   │             (buttonClick)="onDelete()">
│   │       │   │   │             <app-icon name="delete"></app-icon>
│   │       │   │   │             <span>Eliminar</span>
│   │       │   │   │           </app-button>
│   │       │   │   │         </div>
│   │       │   │   │         
│   │       │   │   │         <div class="profile-content">
│   │       │   │   │           <div class="profile-avatar">
│   │       │   │   │             <app-user-avatar
│   │       │   │   │               [name]="user.name"
│   │       │   │   │               [lastName]="user.lastName"
│   │       │   │   │               [photoUrl]="user.photoUrl"
│   │       │   │   │               [active]="user.active"
│   │       │   │   │               [showEditButton]="canEdit"
│   │       │   │   │               size="large"
│   │       │   │   │               (editPhoto)="onEditPhoto()">
│   │       │   │   │             </app-user-avatar>
│   │       │   │   │           </div>
│   │       │   │   │           
│   │       │   │   │           <app-user-info-card [user]="user"></app-user-info-card>
│   │       │   │   │         </div>
│   │       │   │   │       </div>

│   │       │   │   ├── user-profile-card.component.scss
│   │       │   │   │   Content:
│   │       │   │   │       File size: 971 bytes
│   │       │   │   │       Total lines: 47
│   │       │   │   │       @use 'variables' as *;
│   │       │   │   │       
│   │       │   │   │       .profile-card {
│   │       │   │   │         background-color: $neutral-light;
│   │       │   │   │         border-radius: $border-radius-lg;
│   │       │   │   │         box-shadow: $shadow-md;
│   │       │   │   │         padding: $spacing-lg;
│   │       │   │   │         position: relative;
│   │       │   │   │         margin-bottom: $spacing-lg;
│   │       │   │   │         
│   │       │   │   │         .profile-status {
│   │       │   │   │           position: absolute;
│   │       │   │   │           top: $spacing-lg;
│   │       │   │   │           left: $spacing-lg;
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .profile-actions {
│   │       │   │   │           position: absolute;
│   │       │   │   │           top: $spacing-lg;
│   │       │   │   │           right: $spacing-lg;
│   │       │   │   │           display: flex;
│   │       │   │   │           gap: $spacing-sm;
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .profile-content {
│   │       │   │   │           display: flex;
│   │       │   │   │           flex-direction: column;
│   │       │   │   │           align-items: center;
│   │       │   │   │           text-align: center;
│   │       │   │   │           padding-top: $spacing-xl;
│   │       │   │   │           
│   │       │   │   │           @media (min-width: $breakpoint-md) {
│   │       │   │   │             flex-direction: row;
│   │       │   │   │             text-align: left;
│   │       │   │   │             padding-top: $spacing-lg;
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           .profile-avatar {
│   │       │   │   │             margin-bottom: $spacing-lg;
│   │       │   │   │             
│   │       │   │   │             @media (min-width: $breakpoint-md) {
│   │       │   │   │               margin-right: $spacing-xl;
│   │       │   │   │               margin-bottom: 0;
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │       }

│   │       │   │   ├── user-profile-card.component.spec.ts
│   │       │   │   │   Content:
│   │       │   │   │       File size: 685 bytes
│   │       │   │   │       Total lines: 23
│   │       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │   │   │       
│   │       │   │   │       import { UserProfileCardComponent } from './user-profile-card.component';
│   │       │   │   │       
│   │       │   │   │       describe('UserProfileCardComponent', () => {
│   │       │   │   │         let component: UserProfileCardComponent;
│   │       │   │   │         let fixture: ComponentFixture<UserProfileCardComponent>;
│   │       │   │   │       
│   │       │   │   │         beforeEach(async () => {
│   │       │   │   │           await TestBed.configureTestingModule({
│   │       │   │   │             declarations: [UserProfileCardComponent]
│   │       │   │   │           })
│   │       │   │   │           .compileComponents();
│   │       │   │   │       
│   │       │   │   │           fixture = TestBed.createComponent(UserProfileCardComponent);
│   │       │   │   │           component = fixture.componentInstance;
│   │       │   │   │           fixture.detectChanges();
│   │       │   │   │         });
│   │       │   │   │       
│   │       │   │   │         it('should create', () => {
│   │       │   │   │           expect(component).toBeTruthy();
│   │       │   │   │         });
│   │       │   │   │       });

│   │       │   │   └── user-profile-card.component.ts
│   │       │   │       Content:
│   │       │   │           File size: 946 bytes
│   │       │   │           Total lines: 37
│   │       │   │           import { Component, Input, Output, EventEmitter } from '@angular/core';
│   │       │   │           import { User } from '../../models/user.interface';
│   │       │   │           
│   │       │   │           @Component({
│   │       │   │             selector: 'app-user-profile-card',
│   │       │   │             standalone: false,
│   │       │   │             templateUrl: './user-profile-card.component.html',
│   │       │   │             styleUrls: ['./user-profile-card.component.scss']
│   │       │   │           })
│   │       │   │           export class UserProfileCardComponent {
│   │       │   │             @Input() user: User | null = null;
│   │       │   │             @Input() canEdit: boolean = false;
│   │       │   │             @Output() editRequest = new EventEmitter<void>();
│   │       │   │             @Output() deleteRequest = new EventEmitter<void>();
│   │       │   │             @Output() editPhotoRequest = new EventEmitter<void>();
│   │       │   │             
│   │       │   │             /**
│   │       │   │              * Emite evento para editar usuario
│   │       │   │              */
│   │       │   │             onEdit(): void {
│   │       │   │               this.editRequest.emit();
│   │       │   │             }
│   │       │   │             
│   │       │   │             /**
│   │       │   │              * Emite evento para eliminar usuario
│   │       │   │              */
│   │       │   │             onDelete(): void {
│   │       │   │               this.deleteRequest.emit();
│   │       │   │             }
│   │       │   │             
│   │       │   │             /**
│   │       │   │              * Emite evento para editar foto
│   │       │   │              */
│   │       │   │             onEditPhoto(): void {
│   │       │   │               this.editPhotoRequest.emit();
│   │       │   │             }
│   │       │   │           }

│   │       │   └── user-table
│   │       │       ├── user-table.component.html
│   │       │       │   Content:
│   │       │       │       File size: 26 bytes
│   │       │       │       Total lines: 1
│   │       │       │       <p>user-table works!</p>

│   │       │       ├── user-table.component.scss
│   │       │       │   Content:
│   │       │       │       File size: 0 bytes
│   │       │       │       Total lines: 0

│   │       │       ├── user-table.component.spec.ts
│   │       │       │   Content:
│   │       │       │       File size: 642 bytes
│   │       │       │       Total lines: 23
│   │       │       │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │       │       
│   │       │       │       import { UserTableComponent } from './user-table.component';
│   │       │       │       
│   │       │       │       describe('UserTableComponent', () => {
│   │       │       │         let component: UserTableComponent;
│   │       │       │         let fixture: ComponentFixture<UserTableComponent>;
│   │       │       │       
│   │       │       │         beforeEach(async () => {
│   │       │       │           await TestBed.configureTestingModule({
│   │       │       │             declarations: [UserTableComponent]
│   │       │       │           })
│   │       │       │           .compileComponents();
│   │       │       │       
│   │       │       │           fixture = TestBed.createComponent(UserTableComponent);
│   │       │       │           component = fixture.componentInstance;
│   │       │       │           fixture.detectChanges();
│   │       │       │         });
│   │       │       │       
│   │       │       │         it('should create', () => {
│   │       │       │           expect(component).toBeTruthy();
│   │       │       │         });
│   │       │       │       });

│   │       │       └── user-table.component.ts
│   │       │           Content:
│   │       │               File size: 247 bytes
│   │       │               Total lines: 11
│   │       │               import { Component } from '@angular/core';
│   │       │               
│   │       │               @Component({
│   │       │                 selector: 'app-user-table',
│   │       │                 standalone: false,
│   │       │                 templateUrl: './user-table.component.html',
│   │       │                 styleUrl: './user-table.component.scss'
│   │       │               })
│   │       │               export class UserTableComponent {
│   │       │               
│   │       │               }

│   │       ├── pages
│   │       │   ├── login
│   │       │   │   ├── login.component.html
│   │       │   │   │   Content:
│   │       │   │   │       File size: 3356 bytes
│   │       │   │   │       Total lines: 99
│   │       │   │   │       <div class="login-container">
│   │       │   │   │         <div class="login-card">
│   │       │   │   │           <!-- Header del Login -->
│   │       │   │   │           <div class="login-header">
│   │       │   │   │             <div class="logo">
│   │       │   │   │               <span class="logo-icon material-icons">pets</span>
│   │       │   │   │               <h1>VetApp</h1>
│   │       │   │   │             </div>
│   │       │   │   │             <h2>Iniciar Sesión</h2>
│   │       │   │   │           </div>
│   │       │   │   │       
│   │       │   │   │           <!-- Formulario de Login -->
│   │       │   │   │           <form [formGroup]="loginForm" (ngSubmit)="onSubmit()" novalidate>
│   │       │   │   │             
│   │       │   │   │             <!-- Campo Email -->
│   │       │   │   │             <div class="form-field">
│   │       │   │   │               <label for="email" class="form-label">
│   │       │   │   │                 <span class="material-icons">email</span>
│   │       │   │   │                 Correo Electrónico
│   │       │   │   │               </label>
│   │       │   │   │               <div class="input-wrapper" [class.error]="hasFieldError('email')">
│   │       │   │   │                 <input
│   │       │   │   │                   type="email"
│   │       │   │   │                   id="email"
│   │       │   │   │                   formControlName="email"
│   │       │   │   │                   placeholder="usuario@ejemplo.com"
│   │       │   │   │                   class="form-control"
│   │       │   │   │                   [class.error]="hasFieldError('email')"
│   │       │   │   │                   autocomplete="email">
│   │       │   │   │               </div>
│   │       │   │   │               <div class="error-message" *ngIf="hasFieldError('email')">
│   │       │   │   │                 {{ getFieldError('email') }}
│   │       │   │   │               </div>
│   │       │   │   │             </div>
│   │       │   │   │       
│   │       │   │   │             <!-- Campo Contraseña -->
│   │       │   │   │             <div class="form-field">
│   │       │   │   │               <label for="password" class="form-label">
│   │       │   │   │                 <span class="material-icons">lock</span>
│   │       │   │   │                 Contraseña
│   │       │   │   │               </label>
│   │       │   │   │               <div class="input-wrapper password-wrapper" [class.error]="hasFieldError('password')">
│   │       │   │   │                 <input
│   │       │   │   │                   [type]="hidePassword ? 'password' : 'text'"
│   │       │   │   │                   id="password"
│   │       │   │   │                   formControlName="password"
│   │       │   │   │                   placeholder="Tu contraseña"
│   │       │   │   │                   class="form-control"
│   │       │   │   │                   [class.error]="hasFieldError('password')"
│   │       │   │   │                   autocomplete="current-password">
│   │       │   │   │                 <button
│   │       │   │   │                   type="button"
│   │       │   │   │                   class="toggle-password"
│   │       │   │   │                   (click)="togglePasswordVisibility()"
│   │       │   │   │                   [attr.aria-label]="hidePassword ? 'Mostrar contraseña' : 'Ocultar contraseña'">
│   │       │   │   │                   <span class="material-icons">
│   │       │   │   │                     {{ hidePassword ? 'visibility_off' : 'visibility' }}
│   │       │   │   │                   </span>
│   │       │   │   │                 </button>
│   │       │   │   │               </div>
│   │       │   │   │               <div class="error-message" *ngIf="hasFieldError('password')">
│   │       │   │   │                 {{ getFieldError('password') }}
│   │       │   │   │               </div>
│   │       │   │   │             </div>
│   │       │   │   │       
│   │       │   │   │             <!-- Opciones adicionales -->
│   │       │   │   │             <div class="form-options">
│   │       │   │   │               <div class="remember-me">
│   │       │   │   │                 <input type="checkbox" id="remember" formControlName="remember">
│   │       │   │   │                 <label for="remember">Recordarme</label>
│   │       │   │   │               </div>
│   │       │   │   │               <a href="javascript:void(0)" class="forgot-password">
│   │       │   │   │                 ¿Olvidaste tu contraseña?
│   │       │   │   │               </a>
│   │       │   │   │             </div>
│   │       │   │   │       
│   │       │   │   │             <!-- Botón de Submit -->
│   │       │   │   │             <button
│   │       │   │   │               type="submit"
│   │       │   │   │               class="login-button"
│   │       │   │   │               [disabled]="loading || loginForm.invalid"
│   │       │   │   │               [class.loading]="loading">
│   │       │   │   │               <span *ngIf="!loading" class="button-content">
│   │       │   │   │                 <span>Iniciar Sesión</span>
│   │       │   │   │                 <span class="material-icons">arrow_forward</span>
│   │       │   │   │               </span>
│   │       │   │   │               <span *ngIf="loading" class="button-loading">
│   │       │   │   │                 <span class="spinner"></span>
│   │       │   │   │                 <span>Iniciando sesión...</span>
│   │       │   │   │               </span>
│   │       │   │   │             </button>
│   │       │   │   │           </form>
│   │       │   │   │       
│   │       │   │   │           <!-- Footer -->
│   │       │   │   │           <div class="login-footer">
│   │       │   │   │             <p>© 2025 VetApp - Gestión Veterinaria</p>
│   │       │   │   │           </div>
│   │       │   │   │         </div>
│   │       │   │   │       </div>

│   │       │   │   ├── login.component.scss
│   │       │   │   │   Content:
│   │       │   │   │       File size: 6615 bytes
│   │       │   │   │       Total lines: 277
│   │       │   │   │       @use 'variables' as *;
│   │       │   │   │       
│   │       │   │   │       .login-container {
│   │       │   │   │         display: flex;
│   │       │   │   │         justify-content: center;
│   │       │   │   │         align-items: center;
│   │       │   │   │         min-height: 100vh;
│   │       │   │   │         padding: $spacing-md;
│   │       │   │   │       }
│   │       │   │   │       
│   │       │   │   │       .login-card {
│   │       │   │   │         width: 100%;
│   │       │   │   │         max-width: 420px;
│   │       │   │   │         background: $neutral-light;
│   │       │   │   │         border-radius: $border-radius-xl;
│   │       │   │   │         box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
│   │       │   │   │         padding: $spacing-2xl;
│   │       │   │   │         border: 1px solid rgba(89, 65, 242, 0.1);
│   │       │   │   │         
│   │       │   │   │         .login-header {
│   │       │   │   │           text-align: center;
│   │       │   │   │           margin-bottom: $spacing-2xl;
│   │       │   │   │           
│   │       │   │   │           .logo {
│   │       │   │   │             display: flex;
│   │       │   │   │             align-items: center;
│   │       │   │   │             justify-content: center;
│   │       │   │   │             margin-bottom: $spacing-xl;
│   │       │   │   │             
│   │       │   │   │             .logo-icon {
│   │       │   │   │               font-size: 32px;
│   │       │   │   │               color: $primary;
│   │       │   │   │               margin-right: $spacing-sm;
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             h1 {
│   │       │   │   │               font-family: $font-secondary;
│   │       │   │   │               font-weight: $font-weight-bold;
│   │       │   │   │               color: $primary;
│   │       │   │   │               font-size: $font-size-2xl;
│   │       │   │   │               margin: 0;
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           h2 {
│   │       │   │   │             font-family: $font-secondary;
│   │       │   │   │             font-weight: $font-weight-medium;
│   │       │   │   │             color: $neutral-dark;
│   │       │   │   │             font-size: $font-size-xl;
│   │       │   │   │             margin: 0;
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         form {
│   │       │   │   │           .form-field {
│   │       │   │   │             margin-bottom: $spacing-lg;
│   │       │   │   │             
│   │       │   │   │             .form-label {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               color: $neutral-dark;
│   │       │   │   │               font-weight: $font-weight-medium;
│   │       │   │   │               margin-bottom: $spacing-xs;
│   │       │   │   │               font-size: $font-size-sm;
│   │       │   │   │               
│   │       │   │   │               .material-icons {
│   │       │   │   │                 margin-right: $spacing-xs;
│   │       │   │   │                 font-size: 18px;
│   │       │   │   │                 color: $primary;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .input-wrapper {
│   │       │   │   │               position: relative;
│   │       │   │   │               
│   │       │   │   │               &.error .form-control {
│   │       │   │   │                 border-color: $error;
│   │       │   │   │                 background-color: rgba($error, 0.05);
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               .form-control {
│   │       │   │   │                 width: 100%;
│   │       │   │   │                 height: $input-height;
│   │       │   │   │                 padding: 0 $spacing-md;
│   │       │   │   │                 border: 2px solid $neutral-medium;
│   │       │   │   │                 border-radius: $border-radius-md;
│   │       │   │   │                 font-size: $font-size-md;
│   │       │   │   │                 background-color: $neutral-light;
│   │       │   │   │                 transition: $transition-default;
│   │       │   │   │                 font-family: $font-primary;
│   │       │   │   │                 
│   │       │   │   │                 &::placeholder {
│   │       │   │   │                   color: $neutral-medium;
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 &:focus {
│   │       │   │   │                   outline: none;
│   │       │   │   │                   border-color: $primary;
│   │       │   │   │                   background-color: rgba($primary, 0.02);
│   │       │   │   │                   box-shadow: 0 0 0 3px rgba($primary, 0.1);
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 &:hover:not(:focus) {
│   │       │   │   │                   border-color: darken($neutral-medium, 10%);
│   │       │   │   │                 }
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               &.password-wrapper {
│   │       │   │   │                 .form-control {
│   │       │   │   │                   padding-right: 50px;
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 .toggle-password {
│   │       │   │   │                   position: absolute;
│   │       │   │   │                   right: $spacing-sm;
│   │       │   │   │                   top: 50%;
│   │       │   │   │                   transform: translateY(-50%);
│   │       │   │   │                   background: none;
│   │       │   │   │                   border: none;
│   │       │   │   │                   color: $neutral-medium;
│   │       │   │   │                   cursor: pointer;
│   │       │   │   │                   padding: $spacing-xs;
│   │       │   │   │                   border-radius: $border-radius-sm;
│   │       │   │   │                   transition: $transition-default;
│   │       │   │   │                   
│   │       │   │   │                   &:hover {
│   │       │   │   │                     color: $primary;
│   │       │   │   │                     background-color: rgba($primary, 0.1);
│   │       │   │   │                   }
│   │       │   │   │                   
│   │       │   │   │                   .material-icons {
│   │       │   │   │                     font-size: 20px;
│   │       │   │   │                   }
│   │       │   │   │                 }
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .error-message {
│   │       │   │   │               color: $error;
│   │       │   │   │               font-size: $font-size-xs;
│   │       │   │   │               margin-top: $spacing-xxs;
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               
│   │       │   │   │               &::before {
│   │       │   │   │                 content: 'error';
│   │       │   │   │                 font-family: 'Material Icons';
│   │       │   │   │                 font-size: 14px;
│   │       │   │   │                 margin-right: $spacing-xxs;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           .form-options {
│   │       │   │   │             display: flex;
│   │       │   │   │             justify-content: space-between;
│   │       │   │   │             align-items: center;
│   │       │   │   │             margin-bottom: $spacing-xl;
│   │       │   │   │             
│   │       │   │   │             .remember-me {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               
│   │       │   │   │               input[type="checkbox"] {
│   │       │   │   │                 margin-right: $spacing-xs;
│   │       │   │   │                 accent-color: $primary;
│   │       │   │   │                 cursor: pointer;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               label {
│   │       │   │   │                 color: $neutral-dark;
│   │       │   │   │                 font-size: $font-size-sm;
│   │       │   │   │                 cursor: pointer;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .forgot-password {
│   │       │   │   │               color: $primary;
│   │       │   │   │               text-decoration: none;
│   │       │   │   │               font-size: $font-size-sm;
│   │       │   │   │               font-weight: $font-weight-medium;
│   │       │   │   │               transition: $transition-default;
│   │       │   │   │               
│   │       │   │   │               &:hover {
│   │       │   │   │                 text-decoration: underline;
│   │       │   │   │                 color: $primary-dark;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           .login-button {
│   │       │   │   │             width: 100%;
│   │       │   │   │             height: 48px;
│   │       │   │   │             background: $gradient-primary;
│   │       │   │   │             color: $neutral-light;
│   │       │   │   │             border: none;
│   │       │   │   │             border-radius: $border-radius-md;
│   │       │   │   │             font-size: $font-size-md;
│   │       │   │   │             font-weight: $font-weight-medium;
│   │       │   │   │             cursor: pointer;
│   │       │   │   │             transition: $transition-default;
│   │       │   │   │             position: relative;
│   │       │   │   │             overflow: hidden;
│   │       │   │   │             
│   │       │   │   │             &:not(:disabled):hover {
│   │       │   │   │               transform: translateY(-1px);
│   │       │   │   │               box-shadow: 0 8px 16px rgba($primary, 0.3);
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             &:not(:disabled):active {
│   │       │   │   │               transform: translateY(0);
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             &:disabled {
│   │       │   │   │               opacity: 0.6;
│   │       │   │   │               cursor: not-allowed;
│   │       │   │   │               transform: none;
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .button-content {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               justify-content: center;
│   │       │   │   │               
│   │       │   │   │               .material-icons {
│   │       │   │   │                 margin-left: $spacing-xs;
│   │       │   │   │                 font-size: 20px;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .button-loading {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               justify-content: center;
│   │       │   │   │               
│   │       │   │   │               .spinner {
│   │       │   │   │                 width: 16px;
│   │       │   │   │                 height: 16px;
│   │       │   │   │                 border: 2px solid rgba($neutral-light, 0.3);
│   │       │   │   │                 border-top: 2px solid $neutral-light;
│   │       │   │   │                 border-radius: 50%;
│   │       │   │   │                 animation: spin 1s linear infinite;
│   │       │   │   │                 margin-right: $spacing-xs;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .login-footer {
│   │       │   │   │           text-align: center;
│   │       │   │   │           margin-top: $spacing-xl;
│   │       │   │   │           padding-top: $spacing-lg;
│   │       │   │   │           border-top: 1px solid rgba($neutral-medium, 0.2);
│   │       │   │   │           
│   │       │   │   │           p {
│   │       │   │   │             color: $neutral-medium;
│   │       │   │   │             font-size: $font-size-xs;
│   │       │   │   │             margin: 0;
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │       }
│   │       │   │   │       
│   │       │   │   │       @keyframes spin {
│   │       │   │   │         0% { transform: rotate(0deg); }
│   │       │   │   │         100% { transform: rotate(360deg); }
│   │       │   │   │       }
│   │       │   │   │       
│   │       │   │   │       // Responsive
│   │       │   │   │       @media (max-width: $breakpoint-sm) {
│   │       │   │   │         .login-container {
│   │       │   │   │           padding: $spacing-sm;
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .login-card {
│   │       │   │   │           padding: $spacing-xl;
│   │       │   │   │         }
│   │       │   │   │       }

│   │       │   │   ├── login.component.spec.ts
│   │       │   │   │   Content:
│   │       │   │   │       File size: 608 bytes
│   │       │   │   │       Total lines: 23
│   │       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │   │   │       
│   │       │   │   │       import { LoginComponent } from './login.component';
│   │       │   │   │       
│   │       │   │   │       describe('LoginComponent', () => {
│   │       │   │   │         let component: LoginComponent;
│   │       │   │   │         let fixture: ComponentFixture<LoginComponent>;
│   │       │   │   │       
│   │       │   │   │         beforeEach(async () => {
│   │       │   │   │           await TestBed.configureTestingModule({
│   │       │   │   │             imports: [LoginComponent]
│   │       │   │   │           })
│   │       │   │   │           .compileComponents();
│   │       │   │   │       
│   │       │   │   │           fixture = TestBed.createComponent(LoginComponent);
│   │       │   │   │           component = fixture.componentInstance;
│   │       │   │   │           fixture.detectChanges();
│   │       │   │   │         });
│   │       │   │   │       
│   │       │   │   │         it('should create', () => {
│   │       │   │   │           expect(component).toBeTruthy();
│   │       │   │   │         });
│   │       │   │   │       });

│   │       │   │   └── login.component.ts
│   │       │   │       Content:
│   │       │   │           File size: 3338 bytes
│   │       │   │           Total lines: 121
│   │       │   │           import { Component, OnInit, OnDestroy } from '@angular/core';
│   │       │   │           import { FormGroup, FormBuilder, Validators } from '@angular/forms';
│   │       │   │           import { Router, ActivatedRoute } from '@angular/router';
│   │       │   │           
│   │       │   │           import { AuthService } from '../../../../core/auth/services/auth.service';
│   │       │   │           import { ToastService } from '../../../../core/services/toast.service';
│   │       │   │           import { LoginCredentials } from '../../../../core/auth/models/credentials.interface'
│   │       │   │           
│   │       │   │           @Component({
│   │       │   │             selector: 'app-login',
│   │       │   │             standalone:false,
│   │       │   │             templateUrl: './login.component.html',
│   │       │   │             styleUrl: './login.component.scss'
│   │       │   │           })
│   │       │   │           export class LoginComponent implements OnInit, OnDestroy {
│   │       │   │           
│   │       │   │             loginForm!: FormGroup;
│   │       │   │             hidePassword: boolean = true;
│   │       │   │             loading: boolean = false;
│   │       │   │             returnUrl: string = '';
│   │       │   │           
│   │       │   │             constructor(
│   │       │   │               private formBuilder: FormBuilder,
│   │       │   │               private route: ActivatedRoute,
│   │       │   │               private router: Router,
│   │       │   │               private authService: AuthService,
│   │       │   │               private toastService: ToastService
│   │       │   │             ) { }
│   │       │   │           
│   │       │   │           
│   │       │   │             ngOnInit(): void {
│   │       │   │               this.initializeForm();
│   │       │   │             }
│   │       │   │           
│   │       │   │             ngOnDestroy(): void {
│   │       │   │           
│   │       │   │             }
│   │       │   │           
│   │       │   │             private initializeForm() {
│   │       │   │               this.loginForm = this.formBuilder.group({
│   │       │   │                 email: ['', Validators.email, Validators.required],
│   │       │   │                 password: ['', Validators.required, Validators.minLength(6)],
│   │       │   │                 remember: [false]
│   │       │   │               })
│   │       │   │             }
│   │       │   │           
│   │       │   │             private getReturnUrl(): void {
│   │       │   │               this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/usuarios';
│   │       │   │             }
│   │       │   │           
│   │       │   │             private checkIfAlreadyLoggedIn(): void {
│   │       │   │               if (this.authService.isAuthenticated()) {
│   │       │   │                 this.router.navigate([this.returnUrl])
│   │       │   │               }
│   │       │   │             }
│   │       │   │           
│   │       │   │             onSubmit(): void {
│   │       │   │               if (this.loginForm.invalid) {
│   │       │   │                 this.markFormGroupTouched();
│   │       │   │                 return;
│   │       │   │               }
│   │       │   │               this.performLogin();
│   │       │   │             }
│   │       │   │           
│   │       │   │             private markFormGroupTouched(): void {
│   │       │   │               Object.keys(this.loginForm.controls).forEach(field => {
│   │       │   │                 const control = this.loginForm.get(field)
│   │       │   │                 control?.markAsTouched({ onlySelf: true })
│   │       │   │               });
│   │       │   │             }
│   │       │   │           
│   │       │   │             private performLogin(): void {
│   │       │   │               this.loading = true;
│   │       │   │           
│   │       │   │               const credentials: LoginCredentials = {
│   │       │   │                 email: this.loginForm.value.email,
│   │       │   │                 password: this.loginForm.value.password
│   │       │   │               }
│   │       │   │           
│   │       │   │               this.authService.login(credentials)
│   │       │   │             }
│   │       │   │           
│   │       │   │             togglePasswordVisibility(): void {
│   │       │   │               this.hidePassword = !this.hidePassword;
│   │       │   │             }
│   │       │   │           
│   │       │   │             get email() { return this.loginForm.get('email') }
│   │       │   │             get password() { return this.loginForm.get('password') }
│   │       │   │           
│   │       │   │             hasFieldError(fieldName: string): boolean {
│   │       │   │             const field = this.loginForm.get(fieldName);
│   │       │   │             return !!(field && field.touched && field.errors);
│   │       │   │             }
│   │       │   │             
│   │       │   │             getFieldError(fieldName: string): string {
│   │       │   │               const field = this.loginForm.get(fieldName);
│   │       │   │               
│   │       │   │               if (field && field.touched && field.errors) {
│   │       │   │                 if (field.errors['required']) {
│   │       │   │                   return `${this.getFieldLabel(fieldName)} es obligatorio`;
│   │       │   │                 }
│   │       │   │                 if (field.errors['email']) {
│   │       │   │                   return 'Correo electrónico inválido';
│   │       │   │                 }
│   │       │   │                 if (field.errors['minlength']) {
│   │       │   │                   return `Debe tener al menos ${field.errors['minlength'].requiredLength} caracteres`;
│   │       │   │                 }
│   │       │   │               }
│   │       │   │               
│   │       │   │               return '';
│   │       │   │             }
│   │       │   │           
│   │       │   │               private getFieldLabel(fieldName: string): string {
│   │       │   │               const labels: { [key: string]: string } = {
│   │       │   │                 email: 'Correo electrónico',
│   │       │   │                 password: 'Contraseña'
│   │       │   │               };
│   │       │   │               return labels[fieldName] || fieldName;
│   │       │   │             }
│   │       │   │           
│   │       │   │           }

│   │       │   ├── user-create-edit
│   │       │   │   ├── user-create-edit.component.html
│   │       │   │   │   Content:
│   │       │   │   │       File size: 32 bytes
│   │       │   │   │       Total lines: 1
│   │       │   │   │       <p>user-create-edit works!</p>

│   │       │   │   ├── user-create-edit.component.scss
│   │       │   │   │   Content:
│   │       │   │   │       File size: 0 bytes
│   │       │   │   │       Total lines: 0

│   │       │   │   ├── user-create-edit.component.spec.ts
│   │       │   │   │   Content:
│   │       │   │   │       File size: 678 bytes
│   │       │   │   │       Total lines: 23
│   │       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │   │   │       
│   │       │   │   │       import { UserCreateEditComponent } from './user-create-edit.component';
│   │       │   │   │       
│   │       │   │   │       describe('UserCreateEditComponent', () => {
│   │       │   │   │         let component: UserCreateEditComponent;
│   │       │   │   │         let fixture: ComponentFixture<UserCreateEditComponent>;
│   │       │   │   │       
│   │       │   │   │         beforeEach(async () => {
│   │       │   │   │           await TestBed.configureTestingModule({
│   │       │   │   │             declarations: [UserCreateEditComponent]
│   │       │   │   │           })
│   │       │   │   │           .compileComponents();
│   │       │   │   │       
│   │       │   │   │           fixture = TestBed.createComponent(UserCreateEditComponent);
│   │       │   │   │           component = fixture.componentInstance;
│   │       │   │   │           fixture.detectChanges();
│   │       │   │   │         });
│   │       │   │   │       
│   │       │   │   │         it('should create', () => {
│   │       │   │   │           expect(component).toBeTruthy();
│   │       │   │   │         });
│   │       │   │   │       });

│   │       │   │   └── user-create-edit.component.ts
│   │       │   │       Content:
│   │       │   │           File size: 270 bytes
│   │       │   │           Total lines: 11
│   │       │   │           import { Component } from '@angular/core';
│   │       │   │           
│   │       │   │           @Component({
│   │       │   │             selector: 'app-user-create-edit',
│   │       │   │             standalone: false,
│   │       │   │             templateUrl: './user-create-edit.component.html',
│   │       │   │             styleUrl: './user-create-edit.component.scss'
│   │       │   │           })
│   │       │   │           export class UserCreateEditComponent {
│   │       │   │           
│   │       │   │           }

│   │       │   ├── user-detail
│   │       │   │   ├── user-detail.component.html
│   │       │   │   │   Content:
│   │       │   │   │       File size: 9726 bytes
│   │       │   │   │       Total lines: 244
│   │       │   │   │       <app-main-layout>
│   │       │   │   │         <div class="user-detail-page">
│   │       │   │   │           <!-- Encabezado de página -->
│   │       │   │   │           <div class="page-header">
│   │       │   │   │             <div class="header-content">
│   │       │   │   │               <div class="title-section">
│   │       │   │   │                 <button class="back-button" (click)="goBack()">
│   │       │   │   │                   <app-icon name="arrow_back"></app-icon>
│   │       │   │   │                 </button> 
│   │       │   │   │                 <h1>Detalle de Usuario</h1>
│   │       │   │   │               </div>
│   │       │   │   │               <div class="header-actions">
│   │       │   │   │                 <app-search-bar placeholder="Buscar..."></app-search-bar>
│   │       │   │   │                 <app-notifications-badge [count]="3"></app-notifications-badge>
│   │       │   │   │               </div>
│   │       │   │   │             </div>
│   │       │   │   │       
│   │       │   │   │             <div class="breadcrumb">
│   │       │   │   │               <a routerLink="/">Inicio</a>
│   │       │   │   │               <app-icon name="chevron_right"></app-icon>
│   │       │   │   │               <a routerLink="/usuarios">Usuarios</a>
│   │       │   │   │               <app-icon name="chevron_right"></app-icon>
│   │       │   │   │               <span *ngIf="user">{{ user.name }} {{ user.lastName }}</span>
│   │       │   │   │               <span *ngIf="!user && !loading">Usuario no encontrado</span>
│   │       │   │   │             </div>
│   │       │   │   │           </div>
│   │       │   │   │       
│   │       │   │   │           <!-- Contenido principal -->
│   │       │   │   │           <div class="user-content" *ngIf="user && !loading; else loadingTemplate">
│   │       │   │   │       
│   │       │   │   │             <!-- Tarjeta de perfil principal -->
│   │       │   │   │             <div class="profile-section">
│   │       │   │   │               <div class="profile-card">
│   │       │   │   │                 <!-- Estado y acciones -->
│   │       │   │   │                 <div class="profile-header">
│   │       │   │   │                   <div class="status-section">
│   │       │   │   │                     <app-status-indicator [active]="user.active" [showLabel]="true" size="medium">
│   │       │   │   │                     </app-status-indicator>
│   │       │   │   │                   </div>
│   │       │   │   │       
│   │       │   │   │                   <div class="action-buttons" *ngIf="canEditUser || canDeleteUser">
│   │       │   │   │                     <app-button *ngIf="canEditUser" variant="primary" size="sm" (buttonClick)="editUser()">
│   │       │   │   │                       <app-icon name="edit"></app-icon>
│   │       │   │   │                       <span>Editar</span>
│   │       │   │   │                     </app-button>
│   │       │   │   │       
│   │       │   │   │                     <app-button *ngIf="canDeleteUser" variant="danger" size="sm" (buttonClick)="deleteUser()">
│   │       │   │   │                       <app-icon name="delete"></app-icon>
│   │       │   │   │                       <span>Eliminar</span>
│   │       │   │   │                     </app-button>
│   │       │   │   │                   </div>
│   │       │   │   │                 </div>
│   │       │   │   │       
│   │       │   │   │                 <!-- Información principal del usuario -->
│   │       │   │   │                 <div class="profile-main">
│   │       │   │   │                   <div class="avatar-section">
│   │       │   │   │                     <app-user-avatar [name]="user.name" [lastName]="user.lastName" [photoUrl]="user.photoUrl"
│   │       │   │   │                       [active]="user.active" [showEditButton]="canEditUser" size="large">
│   │       │   │   │                     </app-user-avatar>
│   │       │   │   │                   </div>
│   │       │   │   │       
│   │       │   │   │                   <div class="user-info">
│   │       │   │   │                     <h2 class="user-name">{{ user.name }} {{ user.lastName }}</h2>
│   │       │   │   │       
│   │       │   │   │                     <div class="user-role">
│   │       │   │   │                       <app-role-badge [role]="user.role"></app-role-badge>
│   │       │   │   │                     </div>
│   │       │   │   │       
│   │       │   │   │                     <div class="contact-info">
│   │       │   │   │                       <div class="contact-item">
│   │       │   │   │                         <app-icon name="email"></app-icon>
│   │       │   │   │                         <span>{{ user.email }}</span>
│   │       │   │   │                       </div>
│   │       │   │   │       
│   │       │   │   │                       <div class="contact-item" *ngIf="user.lastAccess">
│   │       │   │   │                         <app-icon name="access_time"></app-icon>
│   │       │   │   │                         <span>Último acceso: {{ user.lastAccess | date:'short' }}</span>
│   │       │   │   │                       </div>
│   │       │   │   │       
│   │       │   │   │                       <div class="contact-item" *ngIf="user.createdAt">
│   │       │   │   │                         <app-icon name="calendar_today"></app-icon>
│   │       │   │   │                         <span>Miembro desde: {{ user.createdAt | date:'mediumDate' }}</span>
│   │       │   │   │                       </div>
│   │       │   │   │                     </div>
│   │       │   │   │                   </div>
│   │       │   │   │                 </div>
│   │       │   │   │               </div>
│   │       │   │   │             </div>
│   │       │   │   │       
│   │       │   │   │             <!-- Estadísticas - Solo para veterinarios -->
│   │       │   │   │             <div class="stats-section" *ngIf="isVeterinarian()">
│   │       │   │   │               <div class="stats-card">
│   │       │   │   │                 <div class="card-header">
│   │       │   │   │                   <app-icon name="analytics"></app-icon>
│   │       │   │   │                   <h3>Actividad y Estadísticas</h3>
│   │       │   │   │                 </div>
│   │       │   │   │       
│   │       │   │   │                 <div class="stats-grid" *ngIf="!loadingStats; else statsLoadingTemplate">
│   │       │   │   │                   <div class="stat-item">
│   │       │   │   │                     <div class="stat-value">{{ userStats.consultations }}</div>
│   │       │   │   │                     <div class="stat-label">Consultas</div>
│   │       │   │   │                     <div class="stat-progress">
│   │       │   │   │                       <div class="progress-bar" [style.width.%]="getStatsPercentage(userStats.consultations)">
│   │       │   │   │                       </div>
│   │       │   │   │                     </div>
│   │       │   │   │                   </div>
│   │       │   │   │       
│   │       │   │   │                   <div class="stat-item">
│   │       │   │   │                     <div class="stat-value">{{ userStats.vaccinations }}</div>
│   │       │   │   │                     <div class="stat-label">Vacunaciones</div>
│   │       │   │   │                     <div class="stat-progress">
│   │       │   │   │                       <div class="progress-bar" [style.width.%]="getStatsPercentage(userStats.vaccinations)">
│   │       │   │   │                       </div>
│   │       │   │   │                     </div>
│   │       │   │   │                   </div>
│   │       │   │   │       
│   │       │   │   │                   <div class="stat-item">
│   │       │   │   │                     <div class="stat-value">{{ userStats.appointments }}</div>
│   │       │   │   │                     <div class="stat-label">Citas</div>
│   │       │   │   │                     <div class="stat-progress">
│   │       │   │   │                       <div class="progress-bar" [style.width.%]="getStatsPercentage(userStats.appointments)">
│   │       │   │   │                       </div>
│   │       │   │   │                     </div>
│   │       │   │   │                   </div>
│   │       │   │   │                 </div>
│   │       │   │   │       
│   │       │   │   │                 <ng-template #statsLoadingTemplate>
│   │       │   │   │                   <div class="loading-stats">
│   │       │   │   │                     <app-spinner size="medium"></app-spinner>
│   │       │   │   │                     <span>Cargando estadísticas...</span>
│   │       │   │   │                   </div>
│   │       │   │   │                 </ng-template>
│   │       │   │   │               </div>
│   │       │   │   │             </div>
│   │       │   │   │       
│   │       │   │   │             <!-- Panel de permisos -->
│   │       │   │   │             <div class="permissions-section">
│   │       │   │   │               <div class="permissions-card">
│   │       │   │   │                 <div class="card-header">
│   │       │   │   │                   <app-icon name="security"></app-icon>
│   │       │   │   │                   <h3>Permisos y Accesos</h3>
│   │       │   │   │                 </div>
│   │       │   │   │       
│   │       │   │   │                 <div class="permissions-content" *ngIf="!loadingPermissions; else permissionsLoadingTemplate">
│   │       │   │   │                   <div class="permission-item" *ngFor="let permission of permissions">
│   │       │   │   │                     <div class="permission-info">
│   │       │   │   │                       <label class="permission-label">
│   │       │   │   │                         <input type="checkbox" [checked]="permission.granted" [disabled]="!canManagePermissions"
│   │       │   │   │                           (change)="onPermissionChange(permission.id, $event)">
│   │       │   │   │                         <span class="permission-name">{{ permission.name }}</span>
│   │       │   │   │                       </label>
│   │       │   │   │                       <div class="permission-description" *ngIf="permission.description">
│   │       │   │   │                         {{ permission.description }}
│   │       │   │   │                       </div>
│   │       │   │   │                     </div>
│   │       │   │   │       
│   │       │   │   │                     <div class="permission-status" [ngClass]="permission.granted ? 'granted' : 'restricted'">
│   │       │   │   │                       {{ permission.granted ? 'Concedido' : 'Restringido' }}
│   │       │   │   │                     </div>
│   │       │   │   │                   </div>
│   │       │   │   │       
│   │       │   │   │                   <div class="no-permissions" *ngIf="permissions.length === 0">
│   │       │   │   │                     <app-icon name="info"></app-icon>
│   │       │   │   │                     <span>No hay permisos configurados para este usuario.</span>
│   │       │   │   │                   </div>
│   │       │   │   │                 </div>
│   │       │   │   │       
│   │       │   │   │                 <ng-template #permissionsLoadingTemplate>
│   │       │   │   │                   <div class="loading-permissions">
│   │       │   │   │                     <app-spinner size="medium"></app-spinner>
│   │       │   │   │                     <span>Cargando permisos...</span>
│   │       │   │   │                   </div>
│   │       │   │   │                 </ng-template>
│   │       │   │   │       
│   │       │   │   │                 <div class="permissions-actions" *ngIf="canManagePermissions">
│   │       │   │   │                   <app-button variant="secondary" (buttonClick)="managePermissions()">
│   │       │   │   │                     Gestionar Permisos
│   │       │   │   │                   </app-button>
│   │       │   │   │                 </div>
│   │       │   │   │               </div>
│   │       │   │   │             </div>
│   │       │   │   │       
│   │       │   │   │             <!-- Actividad reciente -->
│   │       │   │   │             <div class="activity-section">
│   │       │   │   │               <div class="activity-card">
│   │       │   │   │                 <div class="card-header">
│   │       │   │   │                   <app-icon name="history"></app-icon>
│   │       │   │   │                   <h3>Actividad Reciente</h3>
│   │       │   │   │                 </div>
│   │       │   │   │       
│   │       │   │   │                 <div class="activity-content" *ngIf="!loadingActivities; else activityLoadingTemplate">
│   │       │   │   │                   <div class="activity-item" *ngFor="let activity of activities">
│   │       │   │   │                     <div class="activity-icon" [ngClass]="'activity-' + activity.type">
│   │       │   │   │                       <app-icon [name]="getActivityIcon(activity.type)"></app-icon>
│   │       │   │   │                     </div>
│   │       │   │   │       
│   │       │   │   │                     <div class="activity-details">
│   │       │   │   │                       <div class="activity-title">{{ activity.description }}</div>
│   │       │   │   │                       <div class="activity-info" *ngIf="activity.details">{{ activity.details }}</div>
│   │       │   │   │                       <div class="activity-time">{{ activity.date | date:'medium' }}</div>
│   │       │   │   │                     </div>
│   │       │   │   │                   </div>
│   │       │   │   │       
│   │       │   │   │                   <div class="no-activities" *ngIf="activities.length === 0">
│   │       │   │   │                     <app-icon name="info"></app-icon>
│   │       │   │   │                     <span>No hay actividades recientes para mostrar.</span>
│   │       │   │   │                   </div>
│   │       │   │   │                 </div>
│   │       │   │   │       
│   │       │   │   │                 <ng-template #activityLoadingTemplate>
│   │       │   │   │                   <div class="loading-activities">
│   │       │   │   │                     <app-spinner size="medium"></app-spinner>
│   │       │   │   │                     <span>Cargando actividad...</span>
│   │       │   │   │                   </div>
│   │       │   │   │                 </ng-template>
│   │       │   │   │       
│   │       │   │   │                 <div class="activity-footer" *ngIf="activities.length > 0">
│   │       │   │   │                   <button class="view-all-link">
│   │       │   │   │                     Ver toda la actividad
│   │       │   │   │                     <app-icon name="chevron_right"></app-icon>
│   │       │   │   │                   </button>
│   │       │   │   │                 </div>
│   │       │   │   │               </div>
│   │       │   │   │             </div>
│   │       │   │   │           </div>
│   │       │   │   │       
│   │       │   │   │           <!-- Template de carga -->
│   │       │   │   │           <ng-template #loadingTemplate>
│   │       │   │   │             <div class="loading-container" *ngIf="loading">
│   │       │   │   │               <app-spinner size="large"></app-spinner>
│   │       │   │   │               <p>Cargando información del usuario...</p>
│   │       │   │   │             </div>
│   │       │   │   │       
│   │       │   │   │             <div class="error-container" *ngIf="!loading && !user">
│   │       │   │   │               <app-icon name="error" class="error-icon"></app-icon>
│   │       │   │   │               <h2>Usuario no encontrado</h2>
│   │       │   │   │               <p>No se pudo encontrar la información del usuario solicitado.</p>
│   │       │   │   │               <app-button variant="primary" (buttonClick)="goBack()">
│   │       │   │   │                 Volver al listado
│   │       │   │   │               </app-button>
│   │       │   │   │             </div>
│   │       │   │   │           </ng-template>
│   │       │   │   │         </div>
│   │       │   │   │       </app-main-layout>

│   │       │   │   ├── user-detail.component.scss
│   │       │   │   │   Content:
│   │       │   │   │       File size: 13968 bytes
│   │       │   │   │       Total lines: 572
│   │       │   │   │       @use 'variables' as *;
│   │       │   │   │       
│   │       │   │   │       .user-detail-page {
│   │       │   │   │         padding: $spacing-lg;
│   │       │   │   │         max-width: 1200px;
│   │       │   │   │         margin: 0 auto;
│   │       │   │   │         
│   │       │   │   │         .page-header {
│   │       │   │   │           margin-bottom: $spacing-xl;
│   │       │   │   │           
│   │       │   │   │           .header-content {
│   │       │   │   │             display: flex;
│   │       │   │   │             justify-content: space-between;
│   │       │   │   │             align-items: center;
│   │       │   │   │             margin-bottom: $spacing-md;
│   │       │   │   │             
│   │       │   │   │             .title-section {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               gap: $spacing-md;
│   │       │   │   │               
│   │       │   │   │               .back-button {
│   │       │   │   │                 display: flex;
│   │       │   │   │                 align-items: center;
│   │       │   │   │                 justify-content: center;
│   │       │   │   │                 width: 40px;
│   │       │   │   │                 height: 40px;
│   │       │   │   │                 background: none;
│   │       │   │   │                 border: 1px solid $neutral-medium;
│   │       │   │   │                 border-radius: $border-radius-circle;
│   │       │   │   │                 color: $primary;
│   │       │   │   │                 cursor: pointer;
│   │       │   │   │                 transition: $transition-default;
│   │       │   │   │                 
│   │       │   │   │                 &:hover {
│   │       │   │   │                   background-color: rgba($primary, 0.1);
│   │       │   │   │                   border-color: $primary;
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 app-icon {
│   │       │   │   │                   font-size: 20px;
│   │       │   │   │                 }
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               h1 {
│   │       │   │   │                 font-family: $font-secondary;
│   │       │   │   │                 font-weight: $font-weight-bold;
│   │       │   │   │                 color: $neutral-dark;
│   │       │   │   │                 font-size: $font-size-2xl;
│   │       │   │   │                 margin: 0;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .header-actions {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               gap: $spacing-md;
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           .breadcrumb {
│   │       │   │   │             display: flex;
│   │       │   │   │             align-items: center;
│   │       │   │   │             color: $neutral-medium;
│   │       │   │   │             font-size: $font-size-sm;
│   │       │   │   │             
│   │       │   │   │             a {
│   │       │   │   │               color: $primary;
│   │       │   │   │               text-decoration: none;
│   │       │   │   │               
│   │       │   │   │               &:hover {
│   │       │   │   │                 text-decoration: underline;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             app-icon {
│   │       │   │   │               margin: 0 $spacing-xs;
│   │       │   │   │               font-size: 16px;
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         .user-content {
│   │       │   │   │           display: grid;
│   │       │   │   │           grid-template-columns: 1fr;
│   │       │   │   │           gap: $spacing-lg;
│   │       │   │   │           
│   │       │   │   │           @media (min-width: $breakpoint-lg) {
│   │       │   │   │             grid-template-columns: 2fr 1fr;
│   │       │   │   │             
│   │       │   │   │             .profile-section {
│   │       │   │   │               grid-column: 1 / -1;
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .stats-section {
│   │       │   │   │               grid-column: 1 / -1;
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         // Tarjeta de perfil
│   │       │   │   │         .profile-section {
│   │       │   │   │           .profile-card {
│   │       │   │   │             background-color: $neutral-light;
│   │       │   │   │             border-radius: $border-radius-lg;
│   │       │   │   │             box-shadow: $shadow-md;
│   │       │   │   │             padding: $spacing-lg;
│   │       │   │   │             
│   │       │   │   │             .profile-header {
│   │       │   │   │               display: flex;
│   │       │   │   │               justify-content: space-between;
│   │       │   │   │               align-items: center;
│   │       │   │   │               margin-bottom: $spacing-lg;
│   │       │   │   │               
│   │       │   │   │               .action-buttons {
│   │       │   │   │                 display: flex;
│   │       │   │   │                 gap: $spacing-sm;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .profile-main {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               gap: $spacing-xl;
│   │       │   │   │               
│   │       │   │   │               @media (max-width: $breakpoint-md) {
│   │       │   │   │                 flex-direction: column;
│   │       │   │   │                 text-align: center;
│   │       │   │   │                 gap: $spacing-lg;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               .user-info {
│   │       │   │   │                 flex: 1;
│   │       │   │   │                 
│   │       │   │   │                 .user-name {
│   │       │   │   │                   font-size: $font-size-2xl;
│   │       │   │   │                   font-weight: $font-weight-bold;
│   │       │   │   │                   color: $neutral-dark;
│   │       │   │   │                   margin: 0 0 $spacing-sm 0;
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 .user-role {
│   │       │   │   │                   margin-bottom: $spacing-md;
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 .contact-info {
│   │       │   │   │                   display: flex;
│   │       │   │   │                   flex-direction: column;
│   │       │   │   │                   gap: $spacing-sm;
│   │       │   │   │                   
│   │       │   │   │                   .contact-item {
│   │       │   │   │                     display: flex;
│   │       │   │   │                     align-items: center;
│   │       │   │   │                     color: $neutral-medium;
│   │       │   │   │                     font-size: $font-size-sm;
│   │       │   │   │                     
│   │       │   │   │                     app-icon {
│   │       │   │   │                       color: $tertiary;
│   │       │   │   │                       margin-right: $spacing-sm;
│   │       │   │   │                       font-size: 18px;
│   │       │   │   │                     }
│   │       │   │   │                   }
│   │       │   │   │                 }
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         // Estadísticas
│   │       │   │   │         .stats-section {
│   │       │   │   │           .stats-card {
│   │       │   │   │             background-color: $neutral-light;
│   │       │   │   │             border-radius: $border-radius-lg;
│   │       │   │   │             box-shadow: $shadow-md;
│   │       │   │   │             overflow: hidden;
│   │       │   │   │             
│   │       │   │   │             .card-header {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               padding: $spacing-md;
│   │       │   │   │               background-color: $neutral-bg;
│   │       │   │   │               border-bottom: 1px solid rgba($neutral-medium, 0.2);
│   │       │   │   │               
│   │       │   │   │               app-icon {
│   │       │   │   │                 color: $tertiary;
│   │       │   │   │                 font-size: 24px;
│   │       │   │   │                 margin-right: $spacing-sm;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               h3 {
│   │       │   │   │                 margin: 0;
│   │       │   │   │                 font-size: $font-size-lg;
│   │       │   │   │                 font-weight: $font-weight-medium;
│   │       │   │   │                 color: $neutral-dark;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .stats-grid {
│   │       │   │   │               display: grid;
│   │       │   │   │               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
│   │       │   │   │               gap: $spacing-lg;
│   │       │   │   │               padding: $spacing-lg;
│   │       │   │   │               
│   │       │   │   │               .stat-item {
│   │       │   │   │                 text-align: center;
│   │       │   │   │                 
│   │       │   │   │                 .stat-value {
│   │       │   │   │                   font-size: $font-size-3xl;
│   │       │   │   │                   font-weight: $font-weight-bold;
│   │       │   │   │                   color: $tertiary;
│   │       │   │   │                   margin-bottom: $spacing-xs;
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 .stat-label {
│   │       │   │   │                   font-size: $font-size-sm;
│   │       │   │   │                   color: $neutral-medium;
│   │       │   │   │                   margin-bottom: $spacing-sm;
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 .stat-progress {
│   │       │   │   │                   width: 100%;
│   │       │   │   │                   height: 6px;
│   │       │   │   │                   background-color: $neutral-bg;
│   │       │   │   │                   border-radius: $border-radius-md;
│   │       │   │   │                   overflow: hidden;
│   │       │   │   │                   
│   │       │   │   │                   .progress-bar {
│   │       │   │   │                     height: 100%;
│   │       │   │   │                     background: $gradient-primary;
│   │       │   │   │                     border-radius: $border-radius-md;
│   │       │   │   │                     transition: width 0.6s ease;
│   │       │   │   │                   }
│   │       │   │   │                 }
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .loading-stats {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               justify-content: center;
│   │       │   │   │               padding: $spacing-xl;
│   │       │   │   │               color: $neutral-medium;
│   │       │   │   │               
│   │       │   │   │               app-spinner {
│   │       │   │   │                 margin-right: $spacing-sm;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         // Permisos
│   │       │   │   │         .permissions-section {
│   │       │   │   │           .permissions-card {
│   │       │   │   │             background-color: $neutral-light;
│   │       │   │   │             border-radius: $border-radius-lg;
│   │       │   │   │             box-shadow: $shadow-md;
│   │       │   │   │             overflow: hidden;
│   │       │   │   │             
│   │       │   │   │             .card-header {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               padding: $spacing-md;
│   │       │   │   │               background-color: $neutral-bg;
│   │       │   │   │               border-bottom: 1px solid rgba($neutral-medium, 0.2);
│   │       │   │   │               
│   │       │   │   │               app-icon {
│   │       │   │   │                 color: $tertiary;
│   │       │   │   │                 font-size: 24px;
│   │       │   │   │                 margin-right: $spacing-sm;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               h3 {
│   │       │   │   │                 margin: 0;
│   │       │   │   │                 font-size: $font-size-lg;
│   │       │   │   │                 font-weight: $font-weight-medium;
│   │       │   │   │                 color: $neutral-dark;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .permissions-content {
│   │       │   │   │               padding: $spacing-md;
│   │       │   │   │               
│   │       │   │   │               .permission-item {
│   │       │   │   │                 display: flex;
│   │       │   │   │                 justify-content: space-between;
│   │       │   │   │                 align-items: flex-start;
│   │       │   │   │                 padding: $spacing-sm 0;
│   │       │   │   │                 border-bottom: 1px solid rgba($neutral-medium, 0.1);
│   │       │   │   │                 
│   │       │   │   │                 &:last-child {
│   │       │   │   │                   border-bottom: none;
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 .permission-info {
│   │       │   │   │                   flex: 1;
│   │       │   │   │                   
│   │       │   │   │                   .permission-label {
│   │       │   │   │                     display: flex;
│   │       │   │   │                     align-items: center;
│   │       │   │   │                     cursor: pointer;
│   │       │   │   │                     
│   │       │   │   │                     input[type="checkbox"] {
│   │       │   │   │                       margin-right: $spacing-sm;
│   │       │   │   │                       accent-color: $primary;
│   │       │   │   │                     }
│   │       │   │   │                     
│   │       │   │   │                     .permission-name {
│   │       │   │   │                       font-weight: $font-weight-medium;
│   │       │   │   │                       color: $neutral-dark;
│   │       │   │   │                     }
│   │       │   │   │                   }
│   │       │   │   │                   
│   │       │   │   │                   .permission-description {
│   │       │   │   │                     font-size: $font-size-xs;
│   │       │   │   │                     color: $neutral-medium;
│   │       │   │   │                     margin-top: $spacing-xxs;
│   │       │   │   │                     margin-left: 24px; // Alineado con el texto del checkbox
│   │       │   │   │                   }
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 .permission-status {
│   │       │   │   │                   font-size: $font-size-xs;
│   │       │   │   │                   font-weight: $font-weight-medium;
│   │       │   │   │                   padding: $spacing-xxs $spacing-xs;
│   │       │   │   │                   border-radius: $border-radius-sm;
│   │       │   │   │                   
│   │       │   │   │                   &.granted {
│   │       │   │   │                     background-color: rgba($success, 0.1);
│   │       │   │   │                     color: $success;
│   │       │   │   │                   }
│   │       │   │   │                   
│   │       │   │   │                   &.restricted {
│   │       │   │   │                     background-color: rgba($warning, 0.1);
│   │       │   │   │                     color: darken($warning, 15%);
│   │       │   │   │                   }
│   │       │   │   │                 }
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               .no-permissions {
│   │       │   │   │                 display: flex;
│   │       │   │   │                 align-items: center;
│   │       │   │   │                 justify-content: center;
│   │       │   │   │                 padding: $spacing-lg;
│   │       │   │   │                 color: $neutral-medium;
│   │       │   │   │                 
│   │       │   │   │                 app-icon {
│   │       │   │   │                   margin-right: $spacing-sm;
│   │       │   │   │                   font-size: 20px;
│   │       │   │   │                 }
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .loading-permissions {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               justify-content: center;
│   │       │   │   │               padding: $spacing-xl;
│   │       │   │   │               color: $neutral-medium;
│   │       │   │   │               
│   │       │   │   │               app-spinner {
│   │       │   │   │                 margin-right: $spacing-sm;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .permissions-actions {
│   │       │   │   │               padding: $spacing-md;
│   │       │   │   │               display: flex;
│   │       │   │   │               justify-content: center;
│   │       │   │   │               border-top: 1px solid rgba($neutral-medium, 0.2);
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         // Actividad
│   │       │   │   │         .activity-section {
│   │       │   │   │           .activity-card {
│   │       │   │   │             background-color: $neutral-light;
│   │       │   │   │             border-radius: $border-radius-lg;
│   │       │   │   │             box-shadow: $shadow-md;
│   │       │   │   │             overflow: hidden;
│   │       │   │   │             
│   │       │   │   │             .card-header {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               padding: $spacing-md;
│   │       │   │   │               background-color: $neutral-bg;
│   │       │   │   │               border-bottom: 1px solid rgba($neutral-medium, 0.2);
│   │       │   │   │               
│   │       │   │   │               app-icon {
│   │       │   │   │                 color: $tertiary;
│   │       │   │   │                 font-size: 24px;
│   │       │   │   │                 margin-right: $spacing-sm;
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               h3 {
│   │       │   │   │                 margin: 0;
│   │       │   │   │                 font-size: $font-size-lg;
│   │       │   │   │                 font-weight: $font-weight-medium;
│   │       │   │   │                 color: $neutral-dark;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .activity-content {
│   │       │   │   │               padding: $spacing-md;
│   │       │   │   │               
│   │       │   │   │               .activity-item {
│   │       │   │   │                 display: flex;
│   │       │   │   │                 margin-bottom: $spacing-md;
│   │       │   │   │                 
│   │       │   │   │                 &:last-child {
│   │       │   │   │                   margin-bottom: 0;
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 .activity-icon {
│   │       │   │   │                   width: 40px;
│   │       │   │   │                   height: 40px;
│   │       │   │   │                   border-radius: $border-radius-circle;
│   │       │   │   │                   display: flex;
│   │       │   │   │                   align-items: center;
│   │       │   │   │                   justify-content: center;
│   │       │   │   │                   margin-right: $spacing-md;
│   │       │   │   │                   flex-shrink: 0;
│   │       │   │   │                   
│   │       │   │   │                   app-icon {
│   │       │   │   │                     color: $neutral-light;
│   │       │   │   │                     font-size: 20px;
│   │       │   │   │                   }
│   │       │   │   │                   
│   │       │   │   │                   &.activity-consultation {
│   │       │   │   │                     background-color: $tertiary;
│   │       │   │   │                   }
│   │       │   │   │                   
│   │       │   │   │                   &.activity-vaccination {
│   │       │   │   │                     background-color: $success;
│   │       │   │   │                   }
│   │       │   │   │                   
│   │       │   │   │                   &.activity-login {
│   │       │   │   │                     background-color: $primary;
│   │       │   │   │                   }
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 .activity-details {
│   │       │   │   │                   .activity-title {
│   │       │   │   │                     font-weight: $font-weight-medium;
│   │       │   │   │                     color: $neutral-dark;
│   │       │   │   │                     margin-bottom: $spacing-xxs;
│   │       │   │   │                   }
│   │       │   │   │                   
│   │       │   │   │                   .activity-info {
│   │       │   │   │                     font-size: $font-size-sm;
│   │       │   │   │                     color: $neutral-medium;
│   │       │   │   │                     margin-bottom: $spacing-xxs;
│   │       │   │   │                   }
│   │       │   │   │                   
│   │       │   │   │                   .activity-time {
│   │       │   │   │                     font-size: $font-size-xs;
│   │       │   │   │                     color: $neutral-medium;
│   │       │   │   │                   }
│   │       │   │   │                 }
│   │       │   │   │               }
│   │       │   │   │               
│   │       │   │   │               .no-activities {
│   │       │   │   │                 display: flex;
│   │       │   │   │                 align-items: center;
│   │       │   │   │                 justify-content: center;
│   │       │   │   │                 padding: $spacing-lg;
│   │       │   │   │                 color: $neutral-medium;
│   │       │   │   │                 
│   │       │   │   │                 app-icon {
│   │       │   │   │                   margin-right: $spacing-sm;
│   │       │   │   │                   font-size: 20px;
│   │       │   │   │                 }
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .loading-activities {
│   │       │   │   │               display: flex;
│   │       │   │   │               align-items: center;
│   │       │   │   │               justify-content: center;
│   │       │   │   │               padding: $spacing-xl;
│   │       │   │   │               color: $neutral-medium;
│   │       │   │   │               
│   │       │   │   │               app-spinner {
│   │       │   │   │                 margin-right: $spacing-sm;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │             
│   │       │   │   │             .activity-footer {
│   │       │   │   │               padding: $spacing-md;
│   │       │   │   │               display: flex;
│   │       │   │   │               justify-content: flex-end;
│   │       │   │   │               border-top: 1px solid rgba($neutral-medium, 0.1);
│   │       │   │   │               
│   │       │   │   │               .view-all-link {
│   │       │   │   │                 display: flex;
│   │       │   │   │                 align-items: center;
│   │       │   │   │                 background: none;
│   │       │   │   │                 border: none;
│   │       │   │   │                 color: $primary;
│   │       │   │   │                 text-decoration: none;
│   │       │   │   │                 font-size: $font-size-sm;
│   │       │   │   │                 cursor: pointer;
│   │       │   │   │                 
│   │       │   │   │                 app-icon {
│   │       │   │   │                   margin-left: $spacing-xxs;
│   │       │   │   │                   font-size: 18px;
│   │       │   │   │                 }
│   │       │   │   │                 
│   │       │   │   │                 &:hover {
│   │       │   │   │                   text-decoration: underline;
│   │       │   │   │                 }
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │         
│   │       │   │   │         // Estados de carga y error
│   │       │   │   │         .loading-container,
│   │       │   │   │         .error-container {
│   │       │   │   │           display: flex;
│   │       │   │   │           flex-direction: column;
│   │       │   │   │           justify-content: center;
│   │       │   │   │           align-items: center;
│   │       │   │   │           min-height: 400px;
│   │       │   │   │           text-align: center;
│   │       │   │   │           
│   │       │   │   │           app-spinner {
│   │       │   │   │             margin-bottom: $spacing-md;
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           .error-icon {
│   │       │   │   │             color: $error;
│   │       │   │   │             font-size: 64px;
│   │       │   │   │             margin-bottom: $spacing-md;
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           h2 {
│   │       │   │   │             color: $neutral-dark;
│   │       │   │   │             margin-bottom: $spacing-md;
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           p {
│   │       │   │   │             color: $neutral-medium;
│   │       │   │   │             margin-bottom: $spacing-lg;
│   │       │   │   │             max-width: 500px;
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │       }
│   │       │   │   │       
│   │       │   │   │       // Responsive
│   │       │   │   │       @media (max-width: $breakpoint-md) {
│   │       │   │   │         .user-detail-page {
│   │       │   │   │           padding: $spacing-md;
│   │       │   │   │           
│   │       │   │   │           .page-header {
│   │       │   │   │             .header-content {
│   │       │   │   │               flex-direction: column;
│   │       │   │   │               align-items: flex-start;
│   │       │   │   │               gap: $spacing-md;
│   │       │   │   │               
│   │       │   │   │               .header-actions {
│   │       │   │   │                 width: 100%;
│   │       │   │   │                 justify-content: space-between;
│   │       │   │   │               }
│   │       │   │   │             }
│   │       │   │   │           }
│   │       │   │   │           
│   │       │   │   │           .user-content {
│   │       │   │   │             gap: $spacing-md;
│   │       │   │   │           }
│   │       │   │   │         }
│   │       │   │   │       }

│   │       │   │   ├── user-detail.component.spec.ts
│   │       │   │   │   Content:
│   │       │   │   │       File size: 649 bytes
│   │       │   │   │       Total lines: 23
│   │       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │   │   │       
│   │       │   │   │       import { UserDetailComponent } from './user-detail.component';
│   │       │   │   │       
│   │       │   │   │       describe('UserDetailComponent', () => {
│   │       │   │   │         let component: UserDetailComponent;
│   │       │   │   │         let fixture: ComponentFixture<UserDetailComponent>;
│   │       │   │   │       
│   │       │   │   │         beforeEach(async () => {
│   │       │   │   │           await TestBed.configureTestingModule({
│   │       │   │   │             declarations: [UserDetailComponent]
│   │       │   │   │           })
│   │       │   │   │           .compileComponents();
│   │       │   │   │       
│   │       │   │   │           fixture = TestBed.createComponent(UserDetailComponent);
│   │       │   │   │           component = fixture.componentInstance;
│   │       │   │   │           fixture.detectChanges();
│   │       │   │   │         });
│   │       │   │   │       
│   │       │   │   │         it('should create', () => {
│   │       │   │   │           expect(component).toBeTruthy();
│   │       │   │   │         });
│   │       │   │   │       });

│   │       │   │   └── user-detail.component.ts
│   │       │   │       Content:
│   │       │   │           File size: 11144 bytes
│   │       │   │           Total lines: 390
│   │       │   │           import { Component, OnInit, OnDestroy } from '@angular/core';
│   │       │   │           import { ActivatedRoute, Router } from '@angular/router';
│   │       │   │           import { Subject, forkJoin } from 'rxjs';
│   │       │   │           import { takeUntil, switchMap } from 'rxjs/operators';
│   │       │   │           
│   │       │   │           // Servicios
│   │       │   │           import { UserService } from '../../services/user.service';
│   │       │   │           import { PermissionService } from '../../services/permission.service';
│   │       │   │           import { AuthService } from '../../../../core/auth/services/auth.service';
│   │       │   │           import { ToastService } from '../../../../core/services/toast.service';
│   │       │   │           import { LoaderService } from '../../../../core/services/loader.service';
│   │       │   │           
│   │       │   │           // Modelos
│   │       │   │           import { User } from '../../models/user.interface';
│   │       │   │           import { UserRole } from '../../models/role.enum';
│   │       │   │           import { Permission } from '../../models/permission.interface';
│   │       │   │           import { UserActivity, ActivityType } from '../../models/user-activity.interface';
│   │       │   │           
│   │       │   │           // Interfaces para estadísticas
│   │       │   │           export interface UserStats {
│   │       │   │             consultations: number;
│   │       │   │             vaccinations: number;
│   │       │   │             appointments: number;
│   │       │   │           }
│   │       │   │           
│   │       │   │           @Component({
│   │       │   │             selector: 'app-user-detail',
│   │       │   │             standalone: false,
│   │       │   │             templateUrl: './user-detail.component.html',
│   │       │   │             styleUrls: ['./user-detail.component.scss']
│   │       │   │           })
│   │       │   │           export class UserDetailComponent implements OnInit, OnDestroy {
│   │       │   │             // Datos del usuario
│   │       │   │             user: User | null = null;
│   │       │   │             activities: UserActivity[] = [];
│   │       │   │             permissions: Permission[] = [];
│   │       │   │             userStats: UserStats = {
│   │       │   │               consultations: 0,
│   │       │   │               vaccinations: 0,
│   │       │   │               appointments: 0
│   │       │   │             };
│   │       │   │           
│   │       │   │             // Estados de carga
│   │       │   │             loading = true;
│   │       │   │             loadingActivities = false;
│   │       │   │             loadingPermissions = false;
│   │       │   │             loadingStats = false;
│   │       │   │           
│   │       │   │             // Permisos del usuario actual
│   │       │   │             isAdmin = false;
│   │       │   │             canEditUser = false;
│   │       │   │             canDeleteUser = false;
│   │       │   │             canManagePermissions = false;
│   │       │   │           
│   │       │   │             // Configuración
│   │       │   │             userId: number | null = null;
│   │       │   │             private destroy$ = new Subject<void>();
│   │       │   │           
│   │       │   │             constructor(
│   │       │   │               private route: ActivatedRoute,
│   │       │   │               private router: Router,
│   │       │   │               private userService: UserService,
│   │       │   │               private permissionService: PermissionService,
│   │       │   │               private authService: AuthService,
│   │       │   │               private toastService: ToastService,
│   │       │   │               private loaderService: LoaderService
│   │       │   │             ) { }
│   │       │   │           
│   │       │   │             ngOnInit(): void {
│   │       │   │               this.initializePermissions();
│   │       │   │               this.loadUserFromRoute();
│   │       │   │             }
│   │       │   │           
│   │       │   │             ngOnDestroy(): void {
│   │       │   │               this.destroy$.next();
│   │       │   │               this.destroy$.complete();
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Inicializa los permisos del usuario actual
│   │       │   │              */
│   │       │   │             private initializePermissions(): void {
│   │       │   │               const currentUser = this.authService.getCurrentUser();
│   │       │   │               if (currentUser) {
│   │       │   │                 this.isAdmin = currentUser.role === 'ADMIN';
│   │       │   │                 this.canEditUser = this.isAdmin || this.authService.hasPermission('EDIT_USERS');
│   │       │   │                 this.canDeleteUser = this.isAdmin || this.authService.hasPermission('DELETE_USERS');
│   │       │   │                 this.canManagePermissions = this.isAdmin || this.authService.hasPermission('MANAGE_PERMISSIONS');
│   │       │   │               }
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Carga el usuario desde la ruta
│   │       │   │              */
│   │       │   │             private loadUserFromRoute(): void {
│   │       │   │               this.route.paramMap
│   │       │   │                 .pipe(takeUntil(this.destroy$))
│   │       │   │                 .subscribe(params => {
│   │       │   │                   const id = params.get('id');
│   │       │   │                   if (id && !isNaN(+id)) {
│   │       │   │                     this.userId = +id;
│   │       │   │                     this.loadUserData();
│   │       │   │                   } else {
│   │       │   │                     this.handleError('ID de usuario inválido');
│   │       │   │                   }
│   │       │   │                 });
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Carga todos los datos del usuario
│   │       │   │              */
│   │       │   │             private loadUserData(): void {
│   │       │   │               if (!this.userId) return;
│   │       │   │           
│   │       │   │               this.loading = true;
│   │       │   │               this.loaderService.show();
│   │       │   │           
│   │       │   │               this.userService.getUserById(this.userId)
│   │       │   │                 .pipe(
│   │       │   │                   takeUntil(this.destroy$),
│   │       │   │                   switchMap(user => {
│   │       │   │                     this.user = user;
│   │       │   │           
│   │       │   │                     // Cargar datos relacionados en paralelo
│   │       │   │                     const requests = [
│   │       │   │                       this.loadUserPermissions(),
│   │       │   │                       this.loadUserActivities()
│   │       │   │                     ];
│   │       │   │           
│   │       │   │                     // Solo cargar estadísticas para veterinarios
│   │       │   │                     if (user.role === UserRole.VETERINARIAN) {
│   │       │   │                       requests.push(this.loadUserStatistics());
│   │       │   │                     }
│   │       │   │           
│   │       │   │                     return forkJoin(requests);
│   │       │   │                   })
│   │       │   │                 )
│   │       │   │                 .subscribe({
│   │       │   │                   next: () => {
│   │       │   │                     this.loading = false;
│   │       │   │                     this.loaderService.hide();
│   │       │   │                   },
│   │       │   │                   error: (error) => {
│   │       │   │                     console.error('Error loading user data:', error);
│   │       │   │                     this.handleError('No se pudo cargar la información del usuario');
│   │       │   │                   }
│   │       │   │                 });
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Carga los permisos del usuario
│   │       │   │              */
│   │       │   │             private loadUserPermissions(): Promise<void> {
│   │       │   │               if (!this.userId) return Promise.resolve();
│   │       │   │           
│   │       │   │               this.loadingPermissions = true;
│   │       │   │           
│   │       │   │               return this.permissionService.getUserPermissions(this.userId)
│   │       │   │                 .pipe(takeUntil(this.destroy$))
│   │       │   │                 .toPromise()
│   │       │   │                 .then(permissions => {
│   │       │   │                   this.permissions = permissions || [];
│   │       │   │                   this.loadingPermissions = false;
│   │       │   │                 })
│   │       │   │                 .catch(error => {
│   │       │   │                   console.error('Error loading permissions:', error);
│   │       │   │                   this.loadingPermissions = false;
│   │       │   │                   this.toastService.warning('No se pudieron cargar los permisos del usuario');
│   │       │   │                 });
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Carga las actividades del usuario
│   │       │   │              */
│   │       │   │             private loadUserActivities(): Promise<void> {
│   │       │   │               if (!this.userId) return Promise.resolve();
│   │       │   │           
│   │       │   │               this.loadingActivities = true;
│   │       │   │           
│   │       │   │               return this.userService.getUserActivity(this.userId)
│   │       │   │                 .pipe(takeUntil(this.destroy$))
│   │       │   │                 .toPromise()
│   │       │   │                 .then(activities => {
│   │       │   │                   this.activities = activities || [];
│   │       │   │                   this.loadingActivities = false;
│   │       │   │                 })
│   │       │   │                 .catch(error => {
│   │       │   │                   console.error('Error loading activities:', error);
│   │       │   │                   this.loadingActivities = false;
│   │       │   │                   this.toastService.warning('No se pudo cargar el historial de actividad');
│   │       │   │                 });
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Carga las estadísticas del usuario (solo veterinarios)
│   │       │   │              */
│   │       │   │             private loadUserStatistics(): Promise<void> {
│   │       │   │               if (!this.userId) return Promise.resolve();
│   │       │   │           
│   │       │   │               this.loadingStats = true;
│   │       │   │           
│   │       │   │               return this.userService.getUserStats(this.userId)
│   │       │   │                 .pipe(takeUntil(this.destroy$))
│   │       │   │                 .toPromise()
│   │       │   │                 .then(stats => {
│   │       │   │                   this.userStats = stats || { consultations: 0, vaccinations: 0, appointments: 0 };
│   │       │   │                   this.loadingStats = false;
│   │       │   │                 })
│   │       │   │                 .catch(error => {
│   │       │   │                   console.error('Error loading stats:', error);
│   │       │   │                   this.loadingStats = false;
│   │       │   │                   this.toastService.warning('No se pudieron cargar las estadísticas');
│   │       │   │                 });
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Navega a la edición del usuario
│   │       │   │              */
│   │       │   │             editUser(): void {
│   │       │   │               if (this.user) {
│   │       │   │                 this.router.navigate(['/usuarios/editar', this.user.id]);
│   │       │   │               }
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Elimina el usuario
│   │       │   │              */
│   │       │   │             deleteUser(): void {
│   │       │   │               if (!this.user) return;
│   │       │   │           
│   │       │   │               const userName = `${this.user.name} ${this.user.lastName}`;
│   │       │   │               const confirmMessage = `¿Estás seguro de que deseas eliminar al usuario "${userName}"?\n\nEsta acción no se puede deshacer.`;
│   │       │   │           
│   │       │   │               if (confirm(confirmMessage)) {
│   │       │   │                 this.loaderService.show();
│   │       │   │           
│   │       │   │                 this.userService.deleteUser(this.user.id)
│   │       │   │                   .pipe(takeUntil(this.destroy$))
│   │       │   │                   .subscribe({
│   │       │   │                     next: () => {
│   │       │   │                       this.toastService.success(`Usuario "${userName}" eliminado correctamente`);
│   │       │   │                       this.router.navigate(['/usuarios']);
│   │       │   │                     },
│   │       │   │                     error: (error) => {
│   │       │   │                       console.error('Error deleting user:', error);
│   │       │   │                       this.toastService.error('No se pudo eliminar el usuario');
│   │       │   │                       this.loaderService.hide();
│   │       │   │                     }
│   │       │   │                   });
│   │       │   │               }
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Actualiza el estado de un permiso
│   │       │   │              */
│   │       │   │             onPermissionChange(permissionId: number, event: Event): void {
│   │       │   │               if (!this.user || !this.canManagePermissions) return;
│   │       │   │           
│   │       │   │               const target = event.target as HTMLInputElement;
│   │       │   │               const granted = target.checked;
│   │       │   │           
│   │       │   │               this.loaderService.show();
│   │       │   │           
│   │       │   │               this.permissionService.updateUserPermission(this.user.id, permissionId, granted)
│   │       │   │                 .pipe(takeUntil(this.destroy$))
│   │       │   │                 .subscribe({
│   │       │   │                   next: () => {
│   │       │   │                     this.toastService.success('Permiso actualizado correctamente');
│   │       │   │                     this.loadUserPermissions();
│   │       │   │                     this.loaderService.hide();
│   │       │   │                   },
│   │       │   │                   error: (error) => {
│   │       │   │                     console.error('Error updating permission:', error);
│   │       │   │                     this.toastService.error('No se pudo actualizar el permiso');
│   │       │   │                     this.loaderService.hide();
│   │       │   │                   }
│   │       │   │                 });
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Abre el gestor de permisos
│   │       │   │              */
│   │       │   │             managePermissions(): void {
│   │       │   │               if (!this.user) return;
│   │       │   │           
│   │       │   │               // Aquí se podría abrir un modal o navegar a otra página
│   │       │   │               this.toastService.info('Funcionalidad de gestión avanzada de permisos en desarrollo');
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Navega de vuelta al listado
│   │       │   │              */
│   │       │   │             goBack(): void {
│   │       │   │               this.router.navigate(['/usuarios']);
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Obtiene el porcentaje para las barras de progreso de estadísticas
│   │       │   │              */
│   │       │   │             getStatsPercentage(value: number, maxValue: number = 300): number {
│   │       │   │               return Math.min(100, Math.max(0, (value / maxValue) * 100));
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Obtiene la etiqueta legible del rol
│   │       │   │              */
│   │       │   │             getRoleLabel(role: UserRole): string {
│   │       │   │               switch (role) {
│   │       │   │                 case UserRole.ADMIN:
│   │       │   │                   return 'Administrador';
│   │       │   │                 case UserRole.VETERINARIAN:
│   │       │   │                   return 'Veterinario';
│   │       │   │                 case UserRole.RECEPTIONIST:
│   │       │   │                   return 'Recepcionista';
│   │       │   │                 default:
│   │       │   │                   return role;
│   │       │   │               }
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Verifica si el usuario es veterinario
│   │       │   │              */
│   │       │   │             isVeterinarian(): boolean {
│   │       │   │               return this.user?.role === UserRole.VETERINARIAN;
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Obtiene el icono según el tipo de actividad
│   │       │   │              */
│   │       │   │             getActivityIcon(activityType: ActivityType): string {
│   │       │   │               switch (activityType) {
│   │       │   │                 case 'consultation':
│   │       │   │                   return 'medical_services';
│   │       │   │                 case 'vaccination':
│   │       │   │                   return 'healing';
│   │       │   │                 case 'login':
│   │       │   │                   return 'login';
│   │       │   │                 default:
│   │       │   │                   return 'history';
│   │       │   │               }
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Maneja errores y navega al listado
│   │       │   │              */
│   │       │   │             private handleError(message: string): void {
│   │       │   │               this.toastService.error(message);
│   │       │   │               this.loading = false;
│   │       │   │               this.loaderService.hide();
│   │       │   │               this.router.navigate(['/usuarios']);
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Actualiza la información del usuario (para uso futuro)
│   │       │   │              */
│   │       │   │             refreshUserData(): void {
│   │       │   │               if (this.userId) {
│   │       │   │                 this.loadUserData();
│   │       │   │               }
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Verifica si el usuario está activo
│   │       │   │              */
│   │       │   │             isUserActive(): boolean {
│   │       │   │               return this.user?.active || false;
│   │       │   │             }
│   │       │   │           
│   │       │   │             /**
│   │       │   │              * Obtiene el tiempo transcurrido desde la creación
│   │       │   │              */
│   │       │   │             getMemberSince(): string {
│   │       │   │               if (!this.user?.createdAt) return 'Fecha no disponible';
│   │       │   │           
│   │       │   │               const createdDate = new Date(this.user.createdAt);
│   │       │   │               const now = new Date();
│   │       │   │               const diffTime = Math.abs(now.getTime() - createdDate.getTime());
│   │       │   │               const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
│   │       │   │           
│   │       │   │               if (diffDays < 30) {
│   │       │   │                 return `Hace ${diffDays} días`;
│   │       │   │               } else if (diffDays < 365) {
│   │       │   │                 const months = Math.floor(diffDays / 30);
│   │       │   │                 return `Hace ${months} mes${months > 1 ? 'es' : ''}`;
│   │       │   │               } else {
│   │       │   │                 const years = Math.floor(diffDays / 365);
│   │       │   │                 return `Hace ${years} año${years > 1 ? 's' : ''}`;
│   │       │   │               }
│   │       │   │             }
│   │       │   │           }

│   │       │   └── user-list
│   │       │       ├── user-list.component.html
│   │       │       │   Content:
│   │       │       │       File size: 25 bytes
│   │       │       │       Total lines: 1
│   │       │       │       <p>user-list works!</p>

│   │       │       ├── user-list.component.scss
│   │       │       │   Content:
│   │       │       │       File size: 0 bytes
│   │       │       │       Total lines: 0

│   │       │       ├── user-list.component.spec.ts
│   │       │       │   Content:
│   │       │       │       File size: 635 bytes
│   │       │       │       Total lines: 23
│   │       │       │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│   │       │       │       
│   │       │       │       import { UserListComponent } from './user-list.component';
│   │       │       │       
│   │       │       │       describe('UserListComponent', () => {
│   │       │       │         let component: UserListComponent;
│   │       │       │         let fixture: ComponentFixture<UserListComponent>;
│   │       │       │       
│   │       │       │         beforeEach(async () => {
│   │       │       │           await TestBed.configureTestingModule({
│   │       │       │             declarations: [UserListComponent]
│   │       │       │           })
│   │       │       │           .compileComponents();
│   │       │       │       
│   │       │       │           fixture = TestBed.createComponent(UserListComponent);
│   │       │       │           component = fixture.componentInstance;
│   │       │       │           fixture.detectChanges();
│   │       │       │         });
│   │       │       │       
│   │       │       │         it('should create', () => {
│   │       │       │           expect(component).toBeTruthy();
│   │       │       │         });
│   │       │       │       });

│   │       │       └── user-list.component.ts
│   │       │           Content:
│   │       │               File size: 243 bytes
│   │       │               Total lines: 11
│   │       │               import { Component } from '@angular/core';
│   │       │               
│   │       │               @Component({
│   │       │                 selector: 'app-user-list',
│   │       │                 standalone: false,
│   │       │                 templateUrl: './user-list.component.html',
│   │       │                 styleUrl: './user-list.component.scss'
│   │       │               })
│   │       │               export class UserListComponent {
│   │       │               
│   │       │               }

│   │       ├── services
│   │       │   ├── permission.service.spec.ts
│   │       │   │   Content:
│   │       │   │       File size: 393 bytes
│   │       │   │       Total lines: 16
│   │       │   │       import { TestBed } from '@angular/core/testing';
│   │       │   │       
│   │       │   │       import { PermissionService } from './permission.service';
│   │       │   │       
│   │       │   │       describe('PermissionService', () => {
│   │       │   │         let service: PermissionService;
│   │       │   │       
│   │       │   │         beforeEach(() => {
│   │       │   │           TestBed.configureTestingModule({});
│   │       │   │           service = TestBed.inject(PermissionService);
│   │       │   │         });
│   │       │   │       
│   │       │   │         it('should be created', () => {
│   │       │   │           expect(service).toBeTruthy();
│   │       │   │         });
│   │       │   │       });

│   │       │   ├── permission.service.ts
│   │       │   │   Content:
│   │       │   │       File size: 2208 bytes
│   │       │   │       Total lines: 71
│   │       │   │       import { Injectable } from '@angular/core';
│   │       │   │       import { HttpClient } from '@angular/common/http';
│   │       │   │       import { Observable, of } from 'rxjs';
│   │       │   │       import { Permission } from '../models/permission.interface';
│   │       │   │       import { environment } from '../../../../environments/environment';
│   │       │   │       
│   │       │   │       @Injectable({
│   │       │   │         providedIn: 'root'
│   │       │   │       })
│   │       │   │       export class PermissionService {
│   │       │   │         private apiUrl = `${environment.apiUrl}/permissions`;
│   │       │   │         
│   │       │   │         constructor(private http: HttpClient) {}
│   │       │   │         
│   │       │   │         /**
│   │       │   │          * Obtiene los permisos de un usuario
│   │       │   │          * Nota: Esta es una simulación ya que el backend no proporciona este endpoint
│   │       │   │          */
│   │       │   │         getUserPermissions(userId: number): Observable<Permission[]> {
│   │       │   │           // En un caso real, esto haría una petición al API
│   │       │   │           // return this.http.get<Permission[]>(`${this.apiUrl}/user/${userId}`);
│   │       │   │           
│   │       │   │           // Simulación de datos
│   │       │   │           const permissions: Permission[] = [
│   │       │   │             {
│   │       │   │               id: 1,
│   │       │   │               name: 'Gestionar Consultas',
│   │       │   │               description: 'Crear, ver, modificar y eliminar consultas médicas',
│   │       │   │               granted: true
│   │       │   │             },
│   │       │   │             {
│   │       │   │               id: 2,
│   │       │   │               name: 'Gestionar Citas',
│   │       │   │               description: 'Programar, modificar y cancelar citas',
│   │       │   │               granted: true
│   │       │   │             },
│   │       │   │             {
│   │       │   │               id: 3,
│   │       │   │               name: 'Gestionar Clientes',
│   │       │   │               description: 'Administrar información de clientes',
│   │       │   │               granted: true
│   │       │   │             },
│   │       │   │             {
│   │       │   │               id: 4,
│   │       │   │               name: 'Gestionar Usuarios',
│   │       │   │               description: 'Crear y modificar cuentas de usuario del sistema',
│   │       │   │               granted: false
│   │       │   │             },
│   │       │   │             {
│   │       │   │               id: 5,
│   │       │   │               name: 'Ver Reportes',
│   │       │   │               description: 'Acceder a estadísticas y reportes del sistema',
│   │       │   │               granted: false
│   │       │   │             }
│   │       │   │           ];
│   │       │   │           
│   │       │   │           return of(permissions);
│   │       │   │         }
│   │       │   │         
│   │       │   │         /**
│   │       │   │          * Actualiza un permiso de usuario
│   │       │   │          * Nota: Esta es una simulación ya que el backend no proporciona este endpoint
│   │       │   │          */
│   │       │   │         updateUserPermission(userId: number, permissionId: number, granted: boolean): Observable<void> {
│   │       │   │           // En un caso real, esto haría una petición al API
│   │       │   │           // return this.http.put<void>(`${this.apiUrl}/user/${userId}/permission/${permissionId}`, { granted });
│   │       │   │           
│   │       │   │           // Simulación de éxito
│   │       │   │           return of(undefined);
│   │       │   │         }
│   │       │   │       }

│   │       │   ├── role.service.spec.ts
│   │       │   │   Content:
│   │       │   │       File size: 363 bytes
│   │       │   │       Total lines: 16
│   │       │   │       import { TestBed } from '@angular/core/testing';
│   │       │   │       
│   │       │   │       import { RoleService } from './role.service';
│   │       │   │       
│   │       │   │       describe('RoleService', () => {
│   │       │   │         let service: RoleService;
│   │       │   │       
│   │       │   │         beforeEach(() => {
│   │       │   │           TestBed.configureTestingModule({});
│   │       │   │           service = TestBed.inject(RoleService);
│   │       │   │         });
│   │       │   │       
│   │       │   │         it('should be created', () => {
│   │       │   │           expect(service).toBeTruthy();
│   │       │   │         });
│   │       │   │       });

│   │       │   ├── role.service.ts
│   │       │   │   Content:
│   │       │   │       File size: 142 bytes
│   │       │   │       Total lines: 9
│   │       │   │       import { Injectable } from '@angular/core';
│   │       │   │       
│   │       │   │       @Injectable({
│   │       │   │         providedIn: 'root'
│   │       │   │       })
│   │       │   │       export class RoleService {
│   │       │   │       
│   │       │   │         constructor() { }
│   │       │   │       }

│   │       │   ├── user.service.spec.ts
│   │       │   │   Content:
│   │       │   │       File size: 363 bytes
│   │       │   │       Total lines: 16
│   │       │   │       import { TestBed } from '@angular/core/testing';
│   │       │   │       
│   │       │   │       import { UserService } from './user.service';
│   │       │   │       
│   │       │   │       describe('UserService', () => {
│   │       │   │         let service: UserService;
│   │       │   │       
│   │       │   │         beforeEach(() => {
│   │       │   │           TestBed.configureTestingModule({});
│   │       │   │           service = TestBed.inject(UserService);
│   │       │   │         });
│   │       │   │       
│   │       │   │         it('should be created', () => {
│   │       │   │           expect(service).toBeTruthy();
│   │       │   │         });
│   │       │   │       });

│   │       │   └── user.service.ts
│   │       │       Content:
│   │       │           File size: 2513 bytes
│   │       │           Total lines: 84
│   │       │           import { Injectable } from '@angular/core';
│   │       │           import { HttpClient } from '@angular/common/http';
│   │       │           import { Observable, of } from 'rxjs';
│   │       │           import { map, catchError } from 'rxjs/operators';
│   │       │           import { User } from '../models/user.interface';
│   │       │           import { UserActivity } from '../models/user-activity.interface';
│   │       │           import { environment } from '../../../../environments/environment';
│   │       │           
│   │       │           @Injectable({
│   │       │             providedIn: 'root'
│   │       │           })
│   │       │           export class UserService {
│   │       │             private apiUrl = `${environment.apiUrl}/users`;
│   │       │             
│   │       │             constructor(private http: HttpClient) {}
│   │       │             
│   │       │             /**
│   │       │              * Obtiene un usuario por su ID
│   │       │              */
│   │       │             getUserById(id: number): Observable<User> {
│   │       │               return this.http.get<User>(`${this.apiUrl}/${id}`);
│   │       │             }
│   │       │             
│   │       │             /**
│   │       │              * Elimina un usuario
│   │       │              */
│   │       │             deleteUser(id: number): Observable<void> {
│   │       │               return this.http.delete<void>(`${this.apiUrl}/${id}`);
│   │       │             }
│   │       │             
│   │       │             /**
│   │       │              * Obtiene la actividad reciente de un usuario
│   │       │              * Nota: Esta es una simulación ya que el backend no proporciona este endpoint
│   │       │              */
│   │       │             getUserActivity(userId: number): Observable<UserActivity[]> {
│   │       │               // En un caso real, esto haría una petición al API
│   │       │               // return this.http.get<UserActivity[]>(`${this.apiUrl}/${userId}/activity`);
│   │       │               
│   │       │               // Simulación de datos
│   │       │               const activities: UserActivity[] = [
│   │       │                 {
│   │       │                   id: 1,
│   │       │                   type: 'consultation',
│   │       │                   description: 'Consulta realizada',
│   │       │                   details: 'Mascota: Max (Labrador) - Cliente: Ana Martínez',
│   │       │                   date: new Date('2025-05-20T10:30:00')
│   │       │                 },
│   │       │                 {
│   │       │                   id: 2,
│   │       │                   type: 'vaccination',
│   │       │                   description: 'Vacunación registrada',
│   │       │                   details: 'Mascota: Luna (Gato) - Cliente: Pedro Sánchez',
│   │       │                   date: new Date('2025-05-19T15:45:00')
│   │       │                 },
│   │       │                 {
│   │       │                   id: 3,
│   │       │                   type: 'login',
│   │       │                   description: 'Inicio de sesión',
│   │       │                   details: 'IP: 192.168.1.45 - Navegador: Chrome',
│   │       │                   date: new Date('2025-05-19T08:00:00')
│   │       │                 }
│   │       │               ];
│   │       │               
│   │       │               return of(activities);
│   │       │             }
│   │       │             
│   │       │             /**
│   │       │              * Obtiene estadísticas de un usuario (veterinario)
│   │       │              * Nota: Esta es una simulación ya que el backend no proporciona este endpoint
│   │       │              */
│   │       │             getUserStats(userId: number): Observable<any> {
│   │       │               // En un caso real, esto haría una petición al API
│   │       │               // return this.http.get<any>(`${this.apiUrl}/${userId}/stats`);
│   │       │               
│   │       │               // Simulación de datos
│   │       │               const stats = {
│   │       │                 consultations: 152,
│   │       │                 vaccinations: 87,
│   │       │                 appointments: 245
│   │       │               };
│   │       │               
│   │       │               return of(stats);
│   │       │             }
│   │       │           }

│   │       ├── users-routing.module.ts
│   │       │   Content:
│   │       │       File size: 540 bytes
│   │       │       Total lines: 21
│   │       │       import { NgModule } from '@angular/core';
│   │       │       import { RouterModule, Routes } from '@angular/router';
│   │       │       import { UserDetailComponent } from './pages/user-detail/user-detail.component';
│   │       │       import { UserListComponent } from './pages/user-list/user-list.component';
│   │       │       
│   │       │       const routes: Routes = [
│   │       │         {
│   │       │           path: '',
│   │       │           component: UserListComponent
│   │       │         },
│   │       │         {
│   │       │           path: ':id',
│   │       │           component: UserDetailComponent
│   │       │         }
│   │       │       ];
│   │       │       
│   │       │       @NgModule({
│   │       │         imports: [RouterModule.forChild(routes)],
│   │       │         exports: [RouterModule]
│   │       │       })
│   │       │       export class UsersRoutingModule { }

│   │       └── users.module.ts
│   │           Content:
│   │               File size: 2391 bytes
│   │               Total lines: 65
│   │               import { NgModule } from '@angular/core';
│   │               import { CommonModule } from '@angular/common';
│   │               import { RouterModule } from '@angular/router';
│   │               import { ReactiveFormsModule } from '@angular/forms';
│   │               
│   │               import { UsersRoutingModule } from './users-routing.module';
│   │               import { SharedModule } from '../../shared/shared.module';
│   │               
│   │               // Páginas
│   │               import { UserDetailComponent } from './pages/user-detail/user-detail.component';
│   │               import { UserListComponent } from './pages/user-list/user-list.component';
│   │               import { UserCreateEditComponent } from './pages/user-create-edit/user-create-edit.component';
│   │               import { LoginComponent } from './pages/login/login.component';
│   │               
│   │               // Átomos
│   │               import { UserAvatarComponent } from './atoms/user-avatar/user-avatar.component';
│   │               import { RoleBadgeComponent } from './atoms/role-badge/role-badge.component';
│   │               
│   │               // Moléculas
│   │               import { UserInfoCardComponent } from './molecules/user-info-card/user-info-card.component';
│   │               import { RoleSelectorComponent } from './molecules/role-selector/role-selector.component';
│   │               import { UserSearchInputComponent } from './molecules/user-search-input/user-search-input.component';
│   │               
│   │               // Organismos
│   │               import { UserProfileCardComponent } from './organisms/user-profile-card/user-profile-card.component';
│   │               import { PermissionsPanelComponent } from './organisms/permissions-panel/permissions-panel.component';
│   │               import { ActivityListComponent } from './organisms/activity-list/activity-list.component';
│   │               import { StatsPanelComponent } from './organisms/stats-panel/stats-panel.component';
│   │               import { UserTableComponent } from './organisms/user-table/user-table.component';
│   │               import { UserFormComponent } from './organisms/user-form/user-form.component';
│   │               
│   │               @NgModule({
│   │                 declarations: [
│   │                   // Páginas
│   │                   UserDetailComponent,
│   │                   UserListComponent,
│   │                   UserCreateEditComponent,
│   │                   LoginComponent,
│   │                   
│   │                   // Átomos
│   │                   UserAvatarComponent,
│   │                   RoleBadgeComponent,
│   │                   
│   │                   // Moléculas
│   │                   UserInfoCardComponent,
│   │                   RoleSelectorComponent,
│   │                   UserSearchInputComponent,
│   │                   
│   │                   // Organismos
│   │                   UserProfileCardComponent,
│   │                   PermissionsPanelComponent,
│   │                   ActivityListComponent,
│   │                   StatsPanelComponent,
│   │                   UserTableComponent,
│   │                   UserFormComponent
│   │                 ],
│   │                 imports: [
│   │                   CommonModule,
│   │                   RouterModule,
│   │                   ReactiveFormsModule,
│   │                   UsersRoutingModule,
│   │                   SharedModule
│   │                 ]
│   │               })
│   │               export class UsersModule { }

│   └── shared
│       ├── atoms
│       │   ├── avatar
│       │   │   ├── avatar.component.html
│       │   │   │   Content:
│       │   │   │       File size: 22 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>avatar works!</p>

│       │   │   ├── avatar.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── avatar.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 620 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { AvatarComponent } from './avatar.component';
│       │   │   │       
│       │   │   │       describe('AvatarComponent', () => {
│       │   │   │         let component: AvatarComponent;
│       │   │   │         let fixture: ComponentFixture<AvatarComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [AvatarComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(AvatarComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── avatar.component.ts
│       │   │       Content:
│       │   │           File size: 232 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-avatar',
│       │   │             standalone: false,
│       │   │             templateUrl: './avatar.component.html',
│       │   │             styleUrl: './avatar.component.scss'
│       │   │           })
│       │   │           export class AvatarComponent {
│       │   │           
│       │   │           }

│       │   ├── badge
│       │   │   ├── badge.component.html
│       │   │   │   Content:
│       │   │   │       File size: 21 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>badge works!</p>

│       │   │   ├── badge.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── badge.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 613 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { BadgeComponent } from './badge.component';
│       │   │   │       
│       │   │   │       describe('BadgeComponent', () => {
│       │   │   │         let component: BadgeComponent;
│       │   │   │         let fixture: ComponentFixture<BadgeComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [BadgeComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(BadgeComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── badge.component.ts
│       │   │       Content:
│       │   │           File size: 228 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-badge',
│       │   │             standalone: false,
│       │   │             templateUrl: './badge.component.html',
│       │   │             styleUrl: './badge.component.scss'
│       │   │           })
│       │   │           export class BadgeComponent {
│       │   │           
│       │   │           }

│       │   ├── button
│       │   │   ├── button.component.html
│       │   │   │   Content:
│       │   │   │       File size: 982 bytes
│       │   │   │       Total lines: 39
│       │   │   │       <button 
│       │   │   │         [type]="buttonType"
│       │   │   │         [class]="buttonClasses"
│       │   │   │         [disabled]="disabled || loading"
│       │   │   │         (click)="onClick($event)">
│       │   │   │         
│       │   │   │         <!-- Spinner cuando está cargando -->
│       │   │   │         <span class="btn-spinner" *ngIf="loading">
│       │   │   │           <app-icon name="refresh" [spin]="true"></app-icon>
│       │   │   │         </span>
│       │   │   │         
│       │   │   │         <!-- Icono a la izquierda -->
│       │   │   │         <app-icon 
│       │   │   │           *ngIf="icon && iconPosition === 'left' && !loading" 
│       │   │   │           [name]="icon" 
│       │   │   │           size="small" 
│       │   │   │           class="btn-icon btn-icon-left">
│       │   │   │         </app-icon>
│       │   │   │         
│       │   │   │         <!-- Contenido del botón -->
│       │   │   │         <span class="btn-content" *ngIf="!iconOnly">
│       │   │   │           <ng-content></ng-content>
│       │   │   │         </span>
│       │   │   │         
│       │   │   │         <!-- Icono si es botón de sólo icono -->
│       │   │   │         <app-icon 
│       │   │   │           *ngIf="iconOnly && icon && !loading" 
│       │   │   │           [name]="icon" 
│       │   │   │           size="small">
│       │   │   │         </app-icon>
│       │   │   │         
│       │   │   │         <!-- Icono a la derecha -->
│       │   │   │         <app-icon 
│       │   │   │           *ngIf="icon && iconPosition === 'right' && !loading" 
│       │   │   │           [name]="icon" 
│       │   │   │           size="small" 
│       │   │   │           class="btn-icon btn-icon-right">
│       │   │   │         </app-icon>
│       │   │   │       </button>

│       │   │   ├── button.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 2200 bytes
│       │   │   │       Total lines: 105
│       │   │   │       @use 'variables' as *;
│       │   │   │       
│       │   │   │       .btn {
│       │   │   │         display: inline-flex;
│       │   │   │         align-items: center;
│       │   │   │         justify-content: center;
│       │   │   │         padding: $spacing-xs $spacing-md;
│       │   │   │         font-family: $font-primary;
│       │   │   │         font-size: $font-size-sm;
│       │   │   │         font-weight: $font-weight-medium;
│       │   │   │         line-height: $line-height-normal;
│       │   │   │         text-align: center;
│       │   │   │         text-decoration: none;
│       │   │   │         vertical-align: middle;
│       │   │   │         cursor: pointer;
│       │   │   │         user-select: none;
│       │   │   │         border: 1px solid transparent;
│       │   │   │         border-radius: $border-radius-md;
│       │   │   │         transition: $transition-default;
│       │   │   │         gap: $spacing-xs;
│       │   │   │         min-height: $button-height;
│       │   │   │         
│       │   │   │         &:focus {
│       │   │   │           outline: 2px solid $primary;
│       │   │   │           outline-offset: 2px;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &:disabled {
│       │   │   │           opacity: 0.5;
│       │   │   │           cursor: not-allowed;
│       │   │   │           pointer-events: none;
│       │   │   │         }
│       │   │   │         
│       │   │   │         // Tamaños
│       │   │   │         &.btn-sm {
│       │   │   │           padding: $spacing-xxs $spacing-sm;
│       │   │   │           font-size: $font-size-xs;
│       │   │   │           min-height: 32px;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.btn-lg {
│       │   │   │           padding: $spacing-sm $spacing-lg;
│       │   │   │           font-size: $font-size-md;
│       │   │   │           min-height: 48px;
│       │   │   │         }
│       │   │   │         
│       │   │   │         // Ancho completo
│       │   │   │         &.w-100 {
│       │   │   │           width: 100%;
│       │   │   │         }
│       │   │   │         
│       │   │   │         // Variantes
│       │   │   │         &.btn-primary {
│       │   │   │           background-color: $primary;
│       │   │   │           border-color: $primary;
│       │   │   │           color: $neutral-light;
│       │   │   │           
│       │   │   │           &:hover:not(:disabled) {
│       │   │   │             background-color: $primary-dark;
│       │   │   │             border-color: $primary-dark;
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.btn-secondary {
│       │   │   │           background-color: transparent;
│       │   │   │           border-color: $primary;
│       │   │   │           color: $primary;
│       │   │   │           
│       │   │   │           &:hover:not(:disabled) {
│       │   │   │             background-color: rgba($primary, 0.1);
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.btn-success {
│       │   │   │           background-color: $success;
│       │   │   │           border-color: $success;
│       │   │   │           color: $neutral-light;
│       │   │   │           
│       │   │   │           &:hover:not(:disabled) {
│       │   │   │             background-color: $secondary-dark;
│       │   │   │             border-color: $secondary-dark;
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.btn-danger {
│       │   │   │           background-color: $error;
│       │   │   │           border-color: $error;
│       │   │   │           color: $neutral-light;
│       │   │   │           
│       │   │   │           &:hover:not(:disabled) {
│       │   │   │             background-color: darken($error, 10%);
│       │   │   │             border-color: darken($error, 10%);
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.btn-tertiary {
│       │   │   │           background-color: transparent;
│       │   │   │           border-color: transparent;
│       │   │   │           color: $primary;
│       │   │   │           
│       │   │   │           &:hover:not(:disabled) {
│       │   │   │             background-color: rgba($primary, 0.1);
│       │   │   │           }
│       │   │   │         }
│       │   │   │       }

│       │   │   ├── button.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 620 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { ButtonComponent } from './button.component';
│       │   │   │       
│       │   │   │       describe('ButtonComponent', () => {
│       │   │   │         let component: ButtonComponent;
│       │   │   │         let fixture: ComponentFixture<ButtonComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [ButtonComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(ButtonComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── button.component.ts
│       │   │       Content:
│       │   │           File size: 2444 bytes
│       │   │           Total lines: 104
│       │   │           import { Component, Input, Output, EventEmitter } from '@angular/core';
│       │   │           
│       │   │           /**
│       │   │            * Componente atómico para botones.
│       │   │            * Proporciona diferentes variantes, tamaños y estados para botones.
│       │   │            * 
│       │   │            * Ejemplo de uso:
│       │   │            * <app-button variant="primary" (buttonClick)="onSave()">Guardar</app-button>
│       │   │            * <app-button variant="danger" [disabled]="true">Eliminar</app-button>
│       │   │            */
│       │   │           @Component({
│       │   │             selector: 'app-button',
│       │   │             standalone: false,
│       │   │             templateUrl: './button.component.html',
│       │   │             styleUrls: ['./button.component.scss']
│       │   │           })
│       │   │           export class ButtonComponent {
│       │   │             /**
│       │   │              * Variante del botón que determina su estilo
│       │   │              */
│       │   │             @Input() variant: 'primary' | 'secondary' | 'tertiary' | 'success' | 'warning' | 'danger' | 'neutral' = 'primary';
│       │   │             
│       │   │             /**
│       │   │              * Tamaño del botón
│       │   │              */
│       │   │             @Input() size: 'sm' | 'md' | 'lg' = 'md';
│       │   │             
│       │   │             /**
│       │   │              * Si el botón debe ocupar todo el ancho disponible
│       │   │              */
│       │   │             @Input() fullWidth: boolean = false;
│       │   │             
│       │   │             /**
│       │   │              * Si el botón está deshabilitado
│       │   │              */
│       │   │             @Input() disabled: boolean = false;
│       │   │             
│       │   │             /**
│       │   │              * Si el botón está en estado de carga
│       │   │              */
│       │   │             @Input() loading: boolean = false;
│       │   │             
│       │   │             /**
│       │   │              * Si el botón es de tipo submit
│       │   │              */
│       │   │             @Input() submit: boolean = false;
│       │   │             
│       │   │             /**
│       │   │              * Si el botón es de sólo icono (circular)
│       │   │              */
│       │   │             @Input() iconOnly: boolean = false;
│       │   │             
│       │   │             /**
│       │   │              * Icono a mostrar (si se proporciona)
│       │   │              */
│       │   │             @Input() icon: string = '';
│       │   │             
│       │   │             /**
│       │   │              * Posición del icono respecto al texto
│       │   │              */
│       │   │             @Input() iconPosition: 'left' | 'right' = 'left';
│       │   │             
│       │   │             /**
│       │   │              * Evento emitido al hacer clic en el botón
│       │   │              */
│       │   │             @Output() buttonClick = new EventEmitter<MouseEvent>();
│       │   │             
│       │   │             /**
│       │   │              * Maneja el evento de clic en el botón
│       │   │              */
│       │   │             onClick(event: MouseEvent): void {
│       │   │               if (!this.disabled && !this.loading) {
│       │   │                 this.buttonClick.emit(event);
│       │   │               }
│       │   │             }
│       │   │             
│       │   │             /**
│       │   │              * Obtiene el tipo de botón (submit o button)
│       │   │              */
│       │   │             get buttonType(): string {
│       │   │               return this.submit ? 'submit' : 'button';
│       │   │             }
│       │   │             
│       │   │             /**
│       │   │              * Obtiene las clases CSS del botón
│       │   │              */
│       │   │             get buttonClasses(): string {
│       │   │               const classes = ['btn', `btn-${this.variant}`, `btn-${this.size}`];
│       │   │               
│       │   │               if (this.fullWidth) {
│       │   │                 classes.push('btn-full-width');
│       │   │               }
│       │   │               
│       │   │               if (this.iconOnly) {
│       │   │                 classes.push('btn-icon-only');
│       │   │               }
│       │   │               
│       │   │               if (this.loading) {
│       │   │                 classes.push('btn-loading');
│       │   │               }
│       │   │               
│       │   │               return classes.join(' ');
│       │   │             }
│       │   │           }

│       │   ├── icon
│       │   │   ├── icon.component.html
│       │   │   │   Content:
│       │   │   │       File size: 59 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <i [class]="iconClasses" [attr.title]="name">{{ name }}</i>

│       │   │   ├── icon.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 1410 bytes
│       │   │   │       Total lines: 89
│       │   │   │       @use 'variables' as *;
│       │   │   │       
│       │   │   │       :host {
│       │   │   │         display: inline-flex;
│       │   │   │         align-items: center;
│       │   │   │         justify-content: center;
│       │   │   │       }
│       │   │   │       
│       │   │   │       .material-icons {
│       │   │   │         font-family: 'Material Icons';
│       │   │   │         font-weight: normal;
│       │   │   │         font-style: normal;
│       │   │   │         line-height: 1;
│       │   │   │         letter-spacing: normal;
│       │   │   │         text-transform: none;
│       │   │   │         display: inline-block;
│       │   │   │         white-space: nowrap;
│       │   │   │         word-wrap: normal;
│       │   │   │         direction: ltr;
│       │   │   │         -webkit-font-smoothing: antialiased;
│       │   │   │         -moz-osx-font-smoothing: grayscale;
│       │   │   │         text-rendering: optimizeLegibility;
│       │   │   │         
│       │   │   │         // Tamaños
│       │   │   │         &.icon-small {
│       │   │   │           font-size: 18px;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.icon-medium {
│       │   │   │           font-size: 24px;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.icon-large {
│       │   │   │           font-size: 36px;
│       │   │   │         }
│       │   │   │         
│       │   │   │         // Colores
│       │   │   │         &.icon-primary {
│       │   │   │           color: $primary;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.icon-secondary {
│       │   │   │           color: $secondary;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.icon-success {
│       │   │   │           color: $success;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.icon-warning {
│       │   │   │           color: $warning;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.icon-error {
│       │   │   │           color: $error;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.icon-neutral {
│       │   │   │           color: $neutral-medium;
│       │   │   │         }
│       │   │   │         
│       │   │   │         // Comportamiento
│       │   │   │         &.icon-clickable {
│       │   │   │           cursor: pointer;
│       │   │   │           transition: $transition-default;
│       │   │   │           
│       │   │   │           &:hover {
│       │   │   │             opacity: 0.8;
│       │   │   │           }
│       │   │   │           
│       │   │   │           &:active {
│       │   │   │             transform: scale(0.95);
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         // Animaciones
│       │   │   │         &.icon-spin {
│       │   │   │           animation: spin 1.5s linear infinite;
│       │   │   │         }
│       │   │   │       }
│       │   │   │       
│       │   │   │       @keyframes spin {
│       │   │   │         0% {
│       │   │   │           transform: rotate(0deg);
│       │   │   │         }
│       │   │   │         100% {
│       │   │   │           transform: rotate(360deg);
│       │   │   │         }
│       │   │   │       }

│       │   │   ├── icon.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 606 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { IconComponent } from './icon.component';
│       │   │   │       
│       │   │   │       describe('IconComponent', () => {
│       │   │   │         let component: IconComponent;
│       │   │   │         let fixture: ComponentFixture<IconComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [IconComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(IconComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── icon.component.ts
│       │   │       Content:
│       │   │           File size: 1894 bytes
│       │   │           Total lines: 74
│       │   │           import { Component, Input } from '@angular/core';
│       │   │           
│       │   │           /**
│       │   │            * Componente atómico para mostrar iconos.
│       │   │            * Actúa como wrapper para Material Icons u otras bibliotecas de iconos.
│       │   │            * 
│       │   │            * Ejemplo de uso:
│       │   │            * <app-icon name="edit"></app-icon>
│       │   │            * <app-icon name="delete" [clickable]="true" (click)="onDelete()"></app-icon>
│       │   │            */
│       │   │           @Component({
│       │   │             selector: 'app-icon',
│       │   │             standalone: false,
│       │   │             templateUrl: './icon.component.html',
│       │   │             styleUrls: ['./icon.component.scss']
│       │   │           })
│       │   │           export class IconComponent {
│       │   │             /**
│       │   │              * Nombre del icono según la biblioteca de iconos usada
│       │   │              * (Material Icons, FontAwesome, etc.)
│       │   │              */
│       │   │             @Input() name: string = '';
│       │   │             
│       │   │             /**
│       │   │              * Tamaño del icono
│       │   │              */
│       │   │             @Input() size: 'small' | 'medium' | 'large' | 'custom' = 'medium';
│       │   │             
│       │   │             /**
│       │   │              * Color del icono
│       │   │              * Puede ser un color predefinido o una clase CSS
│       │   │              */
│       │   │             @Input() color: 'primary' | 'secondary' | 'success' | 'warning' | 'error' | 'neutral' | string = '';
│       │   │             
│       │   │             /**
│       │   │              * Si el icono debe comportarse como un elemento clickeable
│       │   │              */
│       │   │             @Input() clickable: boolean = false;
│       │   │             
│       │   │             /**
│       │   │              * Si el icono debe girar (útil para indicadores de carga)
│       │   │              */
│       │   │             @Input() spin: boolean = false;
│       │   │             
│       │   │             /**
│       │   │              * Obtiene las clases CSS del icono
│       │   │              */
│       │   │             get iconClasses(): string {
│       │   │               const classes = ['material-icons'];
│       │   │               
│       │   │               if (this.size !== 'custom') {
│       │   │                 classes.push(`icon-${this.size}`);
│       │   │               }
│       │   │               
│       │   │               if (this.color) {
│       │   │                 if (['primary', 'secondary', 'success', 'warning', 'error', 'neutral'].includes(this.color)) {
│       │   │                   classes.push(`icon-${this.color}`);
│       │   │                 } else {
│       │   │                   // Si es una clase CSS personalizada
│       │   │                   classes.push(this.color);
│       │   │                 }
│       │   │               }
│       │   │               
│       │   │               if (this.clickable) {
│       │   │                 classes.push('icon-clickable');
│       │   │               }
│       │   │               
│       │   │               if (this.spin) {
│       │   │                 classes.push('icon-spin');
│       │   │               }
│       │   │               
│       │   │               return classes.join(' ');
│       │   │             }
│       │   │           }

│       │   ├── input
│       │   │   ├── input.component.html
│       │   │   │   Content:
│       │   │   │       File size: 21 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>input works!</p>

│       │   │   ├── input.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── input.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 613 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { InputComponent } from './input.component';
│       │   │   │       
│       │   │   │       describe('InputComponent', () => {
│       │   │   │         let component: InputComponent;
│       │   │   │         let fixture: ComponentFixture<InputComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [InputComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(InputComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── input.component.ts
│       │   │       Content:
│       │   │           File size: 228 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-input',
│       │   │             standalone: false,
│       │   │             templateUrl: './input.component.html',
│       │   │             styleUrl: './input.component.scss'
│       │   │           })
│       │   │           export class InputComponent {
│       │   │           
│       │   │           }

│       │   ├── notifications-badge
│       │   │   ├── notifications-badge.component.html
│       │   │   │   Content:
│       │   │   │       File size: 636 bytes
│       │   │   │       Total lines: 23
│       │   │   │       <div 
│       │   │   │         class="notifications-badge" 
│       │   │   │         [ngClass]="getClasses()"
│       │   │   │         (click)="onClick()"
│       │   │   │         [attr.aria-label]="'Notificaciones: ' + count"
│       │   │   │         [attr.tabindex]="disabled ? -1 : 0"
│       │   │   │         [attr.role]="'button'"
│       │   │   │         (keydown.enter)="onClick()"
│       │   │   │         (keydown.space)="onClick()">
│       │   │   │         
│       │   │   │         <!-- Icono principal -->
│       │   │   │         <app-icon [name]="icon" class="notification-icon"></app-icon>
│       │   │   │         
│       │   │   │         <!-- Badge con contador -->
│       │   │   │         <span 
│       │   │   │           *ngIf="shouldShowBadge" 
│       │   │   │           class="badge"
│       │   │   │           [ngClass]="getBadgeClasses()"
│       │   │   │           (click)="onBadgeClick($event)"
│       │   │   │           [attr.aria-label]="'Contador de notificaciones: ' + count">
│       │   │   │           {{ displayCount }}
│       │   │   │         </span>
│       │   │   │       </div>

│       │   │   ├── notifications-badge.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 3749 bytes
│       │   │   │       Total lines: 201
│       │   │   │       @use 'variables' as *;
│       │   │   │       
│       │   │   │       .notifications-badge {
│       │   │   │         position: relative;
│       │   │   │         display: inline-flex;
│       │   │   │         align-items: center;
│       │   │   │         justify-content: center;
│       │   │   │         border-radius: $border-radius-circle;
│       │   │   │         transition: all $transition-default;
│       │   │   │         cursor: pointer;
│       │   │   │         user-select: none;
│       │   │   │         
│       │   │   │         &:focus {
│       │   │   │           outline: 2px solid $primary;
│       │   │   │           outline-offset: 2px;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &:hover:not(.disabled) {
│       │   │   │           background-color: rgba($neutral-medium, 0.1);
│       │   │   │           transform: scale(1.05);
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.disabled {
│       │   │   │           opacity: 0.5;
│       │   │   │           cursor: not-allowed;
│       │   │   │           pointer-events: none;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.animated {
│       │   │   │           animation: bounce 0.6s ease-in-out;
│       │   │   │         }
│       │   │   │         
│       │   │   │         // Tamaños
│       │   │   │         &.small {
│       │   │   │           width: 32px;
│       │   │   │           height: 32px;
│       │   │   │           padding: $spacing-xs;
│       │   │   │           
│       │   │   │           .notification-icon {
│       │   │   │             font-size: 16px;
│       │   │   │           }
│       │   │   │           
│       │   │   │           .badge {
│       │   │   │             min-width: 14px;
│       │   │   │             height: 14px;
│       │   │   │             font-size: 10px;
│       │   │   │             top: -2px;
│       │   │   │             right: -2px;
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.medium {
│       │   │   │           width: 40px;
│       │   │   │           height: 40px;
│       │   │   │           padding: $spacing-xs;
│       │   │   │           
│       │   │   │           .notification-icon {
│       │   │   │             font-size: 20px;
│       │   │   │           }
│       │   │   │           
│       │   │   │           .badge {
│       │   │   │             min-width: 18px;
│       │   │   │             height: 18px;
│       │   │   │             font-size: 12px;
│       │   │   │             top: -4px;
│       │   │   │             right: -4px;
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.large {
│       │   │   │           width: 48px;
│       │   │   │           height: 48px;
│       │   │   │           padding: $spacing-sm;
│       │   │   │           
│       │   │   │           .notification-icon {
│       │   │   │             font-size: 24px;
│       │   │   │           }
│       │   │   │           
│       │   │   │           .badge {
│       │   │   │             min-width: 22px;
│       │   │   │             height: 22px;
│       │   │   │             font-size: 14px;
│       │   │   │             top: -6px;
│       │   │   │             right: -6px;
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         // Variantes de color
│       │   │   │         &.primary .notification-icon {
│       │   │   │           color: $primary;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.secondary .notification-icon {
│       │   │   │           color: $secondary;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.danger .notification-icon {
│       │   │   │           color: $neutral-dark;
│       │   │   │         }
│       │   │   │         
│       │   │   │         .notification-icon {
│       │   │   │           transition: color $transition-default;
│       │   │   │         }
│       │   │   │         
│       │   │   │         .badge {
│       │   │   │           position: absolute;
│       │   │   │           border-radius: $border-radius-circle;
│       │   │   │           display: flex;
│       │   │   │           align-items: center;
│       │   │   │           justify-content: center;
│       │   │   │           font-weight: $font-weight-bold;
│       │   │   │           line-height: 1;
│       │   │   │           padding: 0 $spacing-xxs;
│       │   │   │           border: 2px solid $neutral-light;
│       │   │   │           transition: all $transition-default;
│       │   │   │           cursor: pointer;
│       │   │   │           
│       │   │   │           &:hover {
│       │   │   │             transform: scale(1.1);
│       │   │   │           }
│       │   │   │           
│       │   │   │           &.pulse {
│       │   │   │             animation: pulse-badge 2s infinite;
│       │   │   │           }
│       │   │   │           
│       │   │   │           // Variantes de color para badge
│       │   │   │           &.badge-primary {
│       │   │   │             background-color: $primary;
│       │   │   │             color: $neutral-light;
│       │   │   │           }
│       │   │   │           
│       │   │   │           &.badge-secondary {
│       │   │   │             background-color: $secondary;
│       │   │   │             color: $neutral-light;
│       │   │   │           }
│       │   │   │           
│       │   │   │           &.badge-danger {
│       │   │   │             background-color: $error;
│       │   │   │             color: $neutral-light;
│       │   │   │           }
│       │   │   │         }
│       │   │   │       }
│       │   │   │       
│       │   │   │       @keyframes bounce {
│       │   │   │         0%, 20%, 50%, 80%, 100% {
│       │   │   │           transform: translateY(0) scale(1);
│       │   │   │         }
│       │   │   │         40% {
│       │   │   │           transform: translateY(-4px) scale(1.05);
│       │   │   │         }
│       │   │   │         60% {
│       │   │   │           transform: translateY(-2px) scale(1.02);
│       │   │   │         }
│       │   │   │       }
│       │   │   │       
│       │   │   │       @keyframes pulse-badge {
│       │   │   │         0% {
│       │   │   │           box-shadow: 0 0 0 0 rgba($error, 0.7);
│       │   │   │         }
│       │   │   │         70% {
│       │   │   │           box-shadow: 0 0 0 6px rgba($error, 0);
│       │   │   │         }
│       │   │   │         100% {
│       │   │   │           box-shadow: 0 0 0 0 rgba($error, 0);
│       │   │   │         }
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Estados especiales
│       │   │   │       .notifications-badge.has-notifications {
│       │   │   │         .notification-icon {
│       │   │   │           animation: shake 0.5s ease-in-out;
│       │   │   │         }
│       │   │   │       }
│       │   │   │       
│       │   │   │       @keyframes shake {
│       │   │   │         0%, 100% { transform: translateX(0); }
│       │   │   │         10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }
│       │   │   │         20%, 40%, 60%, 80% { transform: translateX(2px); }
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Responsive
│       │   │   │       @media (max-width: $breakpoint-sm) {
│       │   │   │         .notifications-badge {
│       │   │   │           &.large {
│       │   │   │             width: 40px;
│       │   │   │             height: 40px;
│       │   │   │             
│       │   │   │             .notification-icon {
│       │   │   │               font-size: 20px;
│       │   │   │             }
│       │   │   │             
│       │   │   │             .badge {
│       │   │   │               min-width: 18px;
│       │   │   │               height: 18px;
│       │   │   │               font-size: 12px;
│       │   │   │               top: -4px;
│       │   │   │               right: -4px;
│       │   │   │             }
│       │   │   │           }
│       │   │   │         }
│       │   │   │       }

│       │   │   ├── notifications-badge.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 3337 bytes
│       │   │   │       Total lines: 104
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       import { NotificationsBadgeComponent } from './notifications-badge.component';
│       │   │   │       import { IconComponent } from '../icon/icon.component';
│       │   │   │       
│       │   │   │       describe('NotificationsBadgeComponent', () => {
│       │   │   │         let component: NotificationsBadgeComponent;
│       │   │   │         let fixture: ComponentFixture<NotificationsBadgeComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [ 
│       │   │   │               NotificationsBadgeComponent,
│       │   │   │               IconComponent 
│       │   │   │             ]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(NotificationsBadgeComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should not show badge when count is 0', () => {
│       │   │   │           component.count = 0;
│       │   │   │           expect(component.shouldShowBadge).toBeFalsy();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should show badge when count is greater than 0', () => {
│       │   │   │           component.count = 5;
│       │   │   │           expect(component.shouldShowBadge).toBeTruthy();
│       │   │   │           expect(component.displayCount).toBe('5');
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should show badge when count is 0 and showZero is true', () => {
│       │   │   │           component.count = 0;
│       │   │   │           component.showZero = true;
│       │   │   │           expect(component.shouldShowBadge).toBeTruthy();
│       │   │   │           expect(component.displayCount).toBe('0');
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should show max count when count exceeds maximum', () => {
│       │   │   │           component.count = 150;
│       │   │   │           component.maxCount = 99;
│       │   │   │           expect(component.displayCount).toBe('99+');
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should emit click event when clicked', () => {
│       │   │   │           spyOn(component.click, 'emit');
│       │   │   │           component.onClick();
│       │   │   │           expect(component.click.emit).toHaveBeenCalled();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should emit badgeClick event when badge is clicked', () => {
│       │   │   │           spyOn(component.badgeClick, 'emit');
│       │   │   │           const mockEvent = { stopPropagation: jasmine.createSpy() } as any;
│       │   │   │           
│       │   │   │           component.count = 5;
│       │   │   │           component.onBadgeClick(mockEvent);
│       │   │   │           
│       │   │   │           expect(mockEvent.stopPropagation).toHaveBeenCalled();
│       │   │   │           expect(component.badgeClick.emit).toHaveBeenCalledWith(5);
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should not emit events when disabled', () => {
│       │   │   │           spyOn(component.click, 'emit');
│       │   │   │           spyOn(component.badgeClick, 'emit');
│       │   │   │           
│       │   │   │           component.disabled = true;
│       │   │   │           component.onClick();
│       │   │   │           component.onBadgeClick({ stopPropagation: () => {} } as any);
│       │   │   │           
│       │   │   │           expect(component.click.emit).not.toHaveBeenCalled();
│       │   │   │           expect(component.badgeClick.emit).not.toHaveBeenCalled();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should apply correct classes', () => {
│       │   │   │           component.size = 'large';
│       │   │   │           component.variant = 'primary';
│       │   │   │           component.disabled = true;
│       │   │   │           component.animated = true;
│       │   │   │           component.count = 5;
│       │   │   │           
│       │   │   │           const classes = component.getClasses();
│       │   │   │           expect(classes).toContain('notifications-badge');
│       │   │   │           expect(classes).toContain('large');
│       │   │   │           expect(classes).toContain('primary');
│       │   │   │           expect(classes).toContain('disabled');
│       │   │   │           expect(classes).toContain('animated');
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should render badge with correct content', () => {
│       │   │   │           component.count = 10;
│       │   │   │           fixture.detectChanges();
│       │   │   │           
│       │   │   │           const compiled = fixture.nativeElement;
│       │   │   │           const badge = compiled.querySelector('.badge');
│       │   │   │           expect(badge).toBeTruthy();
│       │   │   │           expect(badge.textContent.trim()).toBe('10');
│       │   │   │         });
│       │   │   │       });

│       │   │   └── notifications-badge.component.ts
│       │   │       Content:
│       │   │           File size: 2113 bytes
│       │   │           Total lines: 83
│       │   │           import { Component, Input, Output, EventEmitter } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-notifications-badge',
│       │   │             standalone: false,
│       │   │             templateUrl: './notifications-badge.component.html',
│       │   │             styleUrls: ['./notifications-badge.component.scss']
│       │   │           })
│       │   │           export class NotificationsBadgeComponent {
│       │   │             @Input() count: number = 0;
│       │   │             @Input() maxCount: number = 99;
│       │   │             @Input() size: 'small' | 'medium' | 'large' = 'medium';
│       │   │             @Input() variant: 'primary' | 'secondary' | 'danger' = 'danger';
│       │   │             @Input() showZero: boolean = false;
│       │   │             @Input() animated: boolean = true;
│       │   │             @Input() icon: string = 'notifications';
│       │   │             @Input() disabled: boolean = false;
│       │   │             
│       │   │             @Output() click = new EventEmitter<void>();
│       │   │             @Output() badgeClick = new EventEmitter<number>();
│       │   │           
│       │   │             /**
│       │   │              * Obtiene el texto a mostrar en la insignia
│       │   │              */
│       │   │             get displayCount(): string {
│       │   │               if (this.count <= 0 && !this.showZero) return '';
│       │   │               if (this.count > this.maxCount) return `${this.maxCount}+`;
│       │   │               return this.count.toString();
│       │   │             }
│       │   │           
│       │   │             /**
│       │   │              * Determina si debe mostrar la insignia
│       │   │              */
│       │   │             get shouldShowBadge(): boolean {
│       │   │               return this.count > 0 || this.showZero;
│       │   │             }
│       │   │           
│       │   │             /**
│       │   │              * Obtiene las clases CSS del componente
│       │   │              */
│       │   │             getClasses(): string[] {
│       │   │               const classes = [
│       │   │                 'notifications-badge',
│       │   │                 this.size,
│       │   │                 this.variant
│       │   │               ];
│       │   │           
│       │   │               if (this.disabled) classes.push('disabled');
│       │   │               if (this.animated && this.count > 0) classes.push('animated');
│       │   │           
│       │   │               return classes;
│       │   │             }
│       │   │           
│       │   │             /**
│       │   │              * Obtiene las clases CSS de la insignia
│       │   │              */
│       │   │             getBadgeClasses(): string[] {
│       │   │               const classes = ['badge', `badge-${this.variant}`];
│       │   │               
│       │   │               if (this.animated && this.count > 0) classes.push('pulse');
│       │   │               
│       │   │               return classes;
│       │   │             }
│       │   │           
│       │   │             /**
│       │   │              * Maneja el click en el componente
│       │   │              */
│       │   │             onClick(): void {
│       │   │               if (!this.disabled) {
│       │   │                 this.click.emit();
│       │   │               }
│       │   │             }
│       │   │           
│       │   │             /**
│       │   │              * Maneja el click específico en la insignia
│       │   │              */
│       │   │             onBadgeClick(event: Event): void {
│       │   │               event.stopPropagation();
│       │   │               if (!this.disabled) {
│       │   │                 this.badgeClick.emit(this.count);
│       │   │               }
│       │   │             }
│       │   │           }

│       │   ├── spinner
│       │   │   ├── spinner.component.html
│       │   │   │   Content:
│       │   │   │       File size: 23 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>spinner works!</p>

│       │   │   ├── spinner.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── spinner.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 627 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { SpinnerComponent } from './spinner.component';
│       │   │   │       
│       │   │   │       describe('SpinnerComponent', () => {
│       │   │   │         let component: SpinnerComponent;
│       │   │   │         let fixture: ComponentFixture<SpinnerComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [SpinnerComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(SpinnerComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── spinner.component.ts
│       │   │       Content:
│       │   │           File size: 298 bytes
│       │   │           Total lines: 11
│       │   │           import { Component, Input } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-spinner',
│       │   │             standalone: false,
│       │   │             templateUrl: './spinner.component.html',
│       │   │             styleUrl: './spinner.component.scss'
│       │   │           })
│       │   │           export class SpinnerComponent {
│       │   │             @Input() size: 'small' | 'medium' | 'large' = 'medium';
│       │   │           }

│       │   └── status-indicator
│       │       ├── status-indicator.component.html
│       │       │   Content:
│       │       │       File size: 199 bytes
│       │       │       Total lines: 4
│       │       │       <div class="status-indicator" [ngClass]="getClasses()">
│       │       │         <span class="status-dot" [attr.aria-hidden]="true"></span>
│       │       │         <span class="status-label" *ngIf="showLabel">{{ displayLabel }}</span>
│       │       │       </div>

│       │       ├── status-indicator.component.scss
│       │       │   Content:
│       │       │       File size: 2531 bytes
│       │       │       Total lines: 145
│       │       │       @use 'variables' as *;
│       │       │       
│       │       │       .status-indicator {
│       │       │         display: inline-flex;
│       │       │         align-items: center;
│       │       │         font-weight: $font-weight-medium;
│       │       │         
│       │       │         .status-dot {
│       │       │           display: inline-block;
│       │       │           border-radius: $border-radius-circle;
│       │       │           position: relative;
│       │       │           
│       │       │           // Efecto de pulso para estados activos
│       │       │           &::after {
│       │       │             content: '';
│       │       │             position: absolute;
│       │       │             top: 50%;
│       │       │             left: 50%;
│       │       │             transform: translate(-50%, -50%);
│       │       │             border-radius: $border-radius-circle;
│       │       │             opacity: 0;
│       │       │             transition: opacity $transition-default;
│       │       │           }
│       │       │         }
│       │       │         
│       │       │         .status-label {
│       │       │           white-space: nowrap;
│       │       │           user-select: none;
│       │       │         }
│       │       │         
│       │       │         // Tamaños
│       │       │         &.small {
│       │       │           .status-dot {
│       │       │             width: 8px;
│       │       │             height: 8px;
│       │       │             
│       │       │             &::after {
│       │       │               width: 16px;
│       │       │               height: 16px;
│       │       │             }
│       │       │           }
│       │       │           
│       │       │           .status-label {
│       │       │             font-size: $font-size-xs;
│       │       │           }
│       │       │         }
│       │       │         
│       │       │         &.medium {
│       │       │           .status-dot {
│       │       │             width: 10px;
│       │       │             height: 10px;
│       │       │             
│       │       │             &::after {
│       │       │               width: 20px;
│       │       │               height: 20px;
│       │       │             }
│       │       │           }
│       │       │           
│       │       │           .status-label {
│       │       │             font-size: $font-size-sm;
│       │       │           }
│       │       │         }
│       │       │         
│       │       │         &.large {
│       │       │           .status-dot {
│       │       │             width: 12px;
│       │       │             height: 12px;
│       │       │             
│       │       │             &::after {
│       │       │               width: 24px;
│       │       │               height: 24px;
│       │       │             }
│       │       │           }
│       │       │           
│       │       │           .status-label {
│       │       │             font-size: $font-size-md;
│       │       │           }
│       │       │         }
│       │       │         
│       │       │         // Posiciones
│       │       │         &.position-left {
│       │       │           .status-dot {
│       │       │             margin-right: $spacing-xs;
│       │       │           }
│       │       │         }
│       │       │         
│       │       │         &.position-right {
│       │       │           flex-direction: row-reverse;
│       │       │           
│       │       │           .status-dot {
│       │       │             margin-left: $spacing-xs;
│       │       │           }
│       │       │         }
│       │       │         
│       │       │         // Estados
│       │       │         &.active {
│       │       │           .status-dot {
│       │       │             background-color: $success;
│       │       │             box-shadow: 0 0 0 2px rgba($success, 0.2);
│       │       │             
│       │       │             &::after {
│       │       │               background-color: rgba($success, 0.4);
│       │       │               animation: pulse 2s infinite;
│       │       │             }
│       │       │           }
│       │       │           
│       │       │           .status-label {
│       │       │             color: $success;
│       │       │           }
│       │       │           
│       │       │           &:hover .status-dot::after {
│       │       │             opacity: 1;
│       │       │           }
│       │       │         }
│       │       │         
│       │       │         &.inactive {
│       │       │           .status-dot {
│       │       │             background-color: $error;
│       │       │             box-shadow: 0 0 0 2px rgba($error, 0.2);
│       │       │             
│       │       │             &::after {
│       │       │               background-color: rgba($error, 0.4);
│       │       │             }
│       │       │           }
│       │       │           
│       │       │           .status-label {
│       │       │             color: $error;
│       │       │           }
│       │       │         }
│       │       │       }
│       │       │       
│       │       │       @keyframes pulse {
│       │       │         0% {
│       │       │           opacity: 1;
│       │       │           transform: translate(-50%, -50%) scale(1);
│       │       │         }
│       │       │         50% {
│       │       │           opacity: 0.5;
│       │       │           transform: translate(-50%, -50%) scale(1.2);
│       │       │         }
│       │       │         100% {
│       │       │           opacity: 1;
│       │       │           transform: translate(-50%, -50%) scale(1);
│       │       │         }
│       │       │       }

│       │       ├── status-indicator.component.spec.ts
│       │       │   Content:
│       │       │       File size: 684 bytes
│       │       │       Total lines: 23
│       │       │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │       │       
│       │       │       import { StatusIndicatorComponent } from './status-indicator.component';
│       │       │       
│       │       │       describe('StatusIndicatorComponent', () => {
│       │       │         let component: StatusIndicatorComponent;
│       │       │         let fixture: ComponentFixture<StatusIndicatorComponent>;
│       │       │       
│       │       │         beforeEach(async () => {
│       │       │           await TestBed.configureTestingModule({
│       │       │             declarations: [StatusIndicatorComponent]
│       │       │           })
│       │       │           .compileComponents();
│       │       │       
│       │       │           fixture = TestBed.createComponent(StatusIndicatorComponent);
│       │       │           component = fixture.componentInstance;
│       │       │           fixture.detectChanges();
│       │       │         });
│       │       │       
│       │       │         it('should create', () => {
│       │       │           expect(component).toBeTruthy();
│       │       │         });
│       │       │       });

│       │       └── status-indicator.component.ts
│       │           Content:
│       │               File size: 936 bytes
│       │               Total lines: 37
│       │               import { Component, Input } from '@angular/core';
│       │               
│       │               @Component({
│       │                 selector: 'app-status-indicator',
│       │                 standalone: false,
│       │                 templateUrl: './status-indicator.component.html',
│       │                 styleUrls: ['./status-indicator.component.scss']
│       │               })
│       │               export class StatusIndicatorComponent {
│       │                 @Input() active: boolean = true;
│       │                 @Input() showLabel: boolean = true;
│       │                 @Input() size: 'small' | 'medium' | 'large' = 'medium';
│       │                 @Input() customLabel?: string;
│       │                 @Input() position: 'left' | 'right' = 'left';
│       │               
│       │                 /**
│       │                  * Obtiene el texto a mostrar
│       │                  */
│       │                 get displayLabel(): string {
│       │                   if (this.customLabel) {
│       │                     return this.customLabel;
│       │                   }
│       │                   return this.active ? 'Activo' : 'Inactivo';
│       │                 }
│       │               
│       │                 /**
│       │                  * Obtiene las clases CSS del componente
│       │                  */
│       │                 getClasses(): string[] {
│       │                   return [
│       │                     'status-indicator',
│       │                     this.active ? 'active' : 'inactive',
│       │                     this.size,
│       │                     `position-${this.position}`
│       │                   ];
│       │                 }
│       │               }

│       ├── directives
│       │   ├── click-outside.directive.spec.ts
│       │   │   Content:
│       │   │       File size: 257 bytes
│       │   │       Total lines: 8
│       │   │       import { ClickOutsideDirective } from './click-outside.directive';
│       │   │       
│       │   │       describe('ClickOutsideDirective', () => {
│       │   │         it('should create an instance', () => {
│       │   │           const directive = new ClickOutsideDirective();
│       │   │           expect(directive).toBeTruthy();
│       │   │         });
│       │   │       });

│       │   ├── click-outside.directive.ts
│       │   │   Content:
│       │   │       File size: 185 bytes
│       │   │       Total lines: 11
│       │   │       import { Directive } from '@angular/core';
│       │   │       
│       │   │       @Directive({
│       │   │         selector: '[appClickOutside]',
│       │   │         standalone: false
│       │   │       })
│       │   │       export class ClickOutsideDirective {
│       │   │       
│       │   │         constructor() { }
│       │   │       
│       │   │       }

│       │   ├── has-permission.directive.spec.ts
│       │   │   Content:
│       │   │       File size: 261 bytes
│       │   │       Total lines: 8
│       │   │       import { HasPermissionDirective } from './has-permission.directive';
│       │   │       
│       │   │       describe('HasPermissionDirective', () => {
│       │   │         it('should create an instance', () => {
│       │   │           const directive = new HasPermissionDirective();
│       │   │           expect(directive).toBeTruthy();
│       │   │         });
│       │   │       });

│       │   └── has-permission.directive.ts
│       │       Content:
│       │           File size: 187 bytes
│       │           Total lines: 11
│       │           import { Directive } from '@angular/core';
│       │           
│       │           @Directive({
│       │             selector: '[appHasPermission]',
│       │             standalone: false
│       │           })
│       │           export class HasPermissionDirective {
│       │           
│       │             constructor() { }
│       │           
│       │           }

│       ├── molecules
│       │   ├── alert
│       │   │   ├── alert.component.html
│       │   │   │   Content:
│       │   │   │       File size: 21 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>alert works!</p>

│       │   │   ├── alert.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── alert.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 613 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { AlertComponent } from './alert.component';
│       │   │   │       
│       │   │   │       describe('AlertComponent', () => {
│       │   │   │         let component: AlertComponent;
│       │   │   │         let fixture: ComponentFixture<AlertComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [AlertComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(AlertComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── alert.component.ts
│       │   │       Content:
│       │   │           File size: 228 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-alert',
│       │   │             standalone: false,
│       │   │             templateUrl: './alert.component.html',
│       │   │             styleUrl: './alert.component.scss'
│       │   │           })
│       │   │           export class AlertComponent {
│       │   │           
│       │   │           }

│       │   ├── card
│       │   │   ├── card.component.html
│       │   │   │   Content:
│       │   │   │       File size: 20 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>card works!</p>

│       │   │   ├── card.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── card.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 606 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { CardComponent } from './card.component';
│       │   │   │       
│       │   │   │       describe('CardComponent', () => {
│       │   │   │         let component: CardComponent;
│       │   │   │         let fixture: ComponentFixture<CardComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [CardComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(CardComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── card.component.ts
│       │   │       Content:
│       │   │           File size: 224 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-card',
│       │   │             standalone: false,
│       │   │             templateUrl: './card.component.html',
│       │   │             styleUrl: './card.component.scss'
│       │   │           })
│       │   │           export class CardComponent {
│       │   │           
│       │   │           }

│       │   ├── form-field
│       │   │   ├── form-field.component.html
│       │   │   │   Content:
│       │   │   │       File size: 26 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>form-field works!</p>

│       │   │   ├── form-field.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── form-field.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 642 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { FormFieldComponent } from './form-field.component';
│       │   │   │       
│       │   │   │       describe('FormFieldComponent', () => {
│       │   │   │         let component: FormFieldComponent;
│       │   │   │         let fixture: ComponentFixture<FormFieldComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [FormFieldComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(FormFieldComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── form-field.component.ts
│       │   │       Content:
│       │   │           File size: 247 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-form-field',
│       │   │             standalone: false,
│       │   │             templateUrl: './form-field.component.html',
│       │   │             styleUrl: './form-field.component.scss'
│       │   │           })
│       │   │           export class FormFieldComponent {
│       │   │           
│       │   │           }

│       │   ├── search-bar
│       │   │   ├── search-bar.component.html
│       │   │   │   Content:
│       │   │   │       File size: 26 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>search-bar works!</p>

│       │   │   ├── search-bar.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 1321 bytes
│       │   │   │       Total lines: 62
│       │   │   │       @use 'variables' as *;
│       │   │   │       
│       │   │   │       .search-bar {
│       │   │   │         position: relative;
│       │   │   │         display: flex;
│       │   │   │         align-items: center;
│       │   │   │         background-color: $neutral-light;
│       │   │   │         border: 1px solid rgba($neutral-medium, 0.3);
│       │   │   │         border-radius: $border-radius-md;
│       │   │   │         transition: $transition-default;
│       │   │   │         
│       │   │   │         &:focus-within {
│       │   │   │           border-color: $primary;
│       │   │   │           box-shadow: 0 0 0 2px rgba($primary, 0.1);
│       │   │   │         }
│       │   │   │         
│       │   │   │         .search-icon {
│       │   │   │           position: absolute;
│       │   │   │           left: $spacing-sm;
│       │   │   │           color: $neutral-medium;
│       │   │   │           font-size: 20px;
│       │   │   │           pointer-events: none;
│       │   │   │         }
│       │   │   │         
│       │   │   │         .search-input {
│       │   │   │           flex: 1;
│       │   │   │           padding: $spacing-xs $spacing-md;
│       │   │   │           padding-left: 40px;
│       │   │   │           background: transparent;
│       │   │   │           border: none;
│       │   │   │           outline: none;
│       │   │   │           font-size: $font-size-sm;
│       │   │   │           color: $neutral-dark;
│       │   │   │           
│       │   │   │           &::placeholder {
│       │   │   │             color: $neutral-medium;
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         .clear-button {
│       │   │   │           display: flex;
│       │   │   │           align-items: center;
│       │   │   │           justify-content: center;
│       │   │   │           padding: $spacing-xs;
│       │   │   │           margin-right: $spacing-xs;
│       │   │   │           background: none;
│       │   │   │           border: none;
│       │   │   │           cursor: pointer;
│       │   │   │           color: $neutral-medium;
│       │   │   │           border-radius: $border-radius-sm;
│       │   │   │           transition: $transition-default;
│       │   │   │           
│       │   │   │           &:hover {
│       │   │   │             background-color: rgba($neutral-medium, 0.1);
│       │   │   │             color: $neutral-dark;
│       │   │   │           }
│       │   │   │           
│       │   │   │           app-icon {
│       │   │   │             font-size: 16px;
│       │   │   │           }
│       │   │   │         }
│       │   │   │       }

│       │   │   ├── search-bar.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 642 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { SearchBarComponent } from './search-bar.component';
│       │   │   │       
│       │   │   │       describe('SearchBarComponent', () => {
│       │   │   │         let component: SearchBarComponent;
│       │   │   │         let fixture: ComponentFixture<SearchBarComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [SearchBarComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(SearchBarComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── search-bar.component.ts
│       │   │       Content:
│       │   │           File size: 247 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-search-bar',
│       │   │             standalone: false,
│       │   │             templateUrl: './search-bar.component.html',
│       │   │             styleUrl: './search-bar.component.scss'
│       │   │           })
│       │   │           export class SearchBarComponent {
│       │   │           
│       │   │           }

│       │   ├── status-indicator
│       │   │   ├── status-indicator.component.html
│       │   │   │   Content:
│       │   │   │       File size: 227 bytes
│       │   │   │       Total lines: 6
│       │   │   │       <div class="status-indicator" [ngClass]="[active ? 'active' : 'inactive', size]">
│       │   │   │         <span class="status-dot"></span>
│       │   │   │         <span class="status-label" *ngIf="showLabel">
│       │   │   │           {{ active ? 'Activo' : 'Inactivo' }}
│       │   │   │         </span>
│       │   │   │       </div>

│       │   │   ├── status-indicator.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 1141 bytes
│       │   │   │       Total lines: 69
│       │   │   │       @use 'variables' as *;
│       │   │   │       
│       │   │   │       .status-indicator {
│       │   │   │         display: inline-flex;
│       │   │   │         align-items: center;
│       │   │   │         
│       │   │   │         .status-dot {
│       │   │   │           display: inline-block;
│       │   │   │           border-radius: $border-radius-circle;
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.small {
│       │   │   │           .status-dot {
│       │   │   │             width: 8px;
│       │   │   │             height: 8px;
│       │   │   │           }
│       │   │   │           
│       │   │   │           .status-label {
│       │   │   │             font-size: $font-size-xs;
│       │   │   │             margin-left: $spacing-xxs;
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.medium {
│       │   │   │           .status-dot {
│       │   │   │             width: 10px;
│       │   │   │             height: 10px;
│       │   │   │           }
│       │   │   │           
│       │   │   │           .status-label {
│       │   │   │             font-size: $font-size-sm;
│       │   │   │             margin-left: $spacing-xs;
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.large {
│       │   │   │           .status-dot {
│       │   │   │             width: 12px;
│       │   │   │             height: 12px;
│       │   │   │           }
│       │   │   │           
│       │   │   │           .status-label {
│       │   │   │             font-size: $font-size-md;
│       │   │   │             margin-left: $spacing-sm;
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.active {
│       │   │   │           .status-dot {
│       │   │   │             background-color: $success;
│       │   │   │             box-shadow: 0 0 0 2px rgba($success, 0.2);
│       │   │   │           }
│       │   │   │           
│       │   │   │           .status-label {
│       │   │   │             color: $success;
│       │   │   │           }
│       │   │   │         }
│       │   │   │         
│       │   │   │         &.inactive {
│       │   │   │           .status-dot {
│       │   │   │             background-color: $error;
│       │   │   │             box-shadow: 0 0 0 2px rgba($error, 0.2);
│       │   │   │           }
│       │   │   │           
│       │   │   │           .status-label {
│       │   │   │             color: $error;
│       │   │   │           }
│       │   │   │         }
│       │   │   │       }

│       │   │   ├── status-indicator.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 684 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { StatusIndicatorComponent } from './status-indicator.component';
│       │   │   │       
│       │   │   │       describe('StatusIndicatorComponent', () => {
│       │   │   │         let component: StatusIndicatorComponent;
│       │   │   │         let fixture: ComponentFixture<StatusIndicatorComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [StatusIndicatorComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(StatusIndicatorComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── status-indicator.component.ts
│       │   │       Content:
│       │   │           File size: 411 bytes
│       │   │           Total lines: 13
│       │   │           import { Component, Input } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-status-indicator',
│       │   │             standalone: false,
│       │   │             templateUrl: './status-indicator.component.html',
│       │   │             styleUrls: ['./status-indicator.component.scss']
│       │   │           })
│       │   │           export class StatusIndicatorComponent {
│       │   │             @Input() active: boolean = true;
│       │   │             @Input() showLabel: boolean = true;
│       │   │             @Input() size: 'small' | 'medium' | 'large' = 'medium';
│       │   │           }

│       │   └── user-card
│       │       ├── user-card.component.html
│       │       │   Content:
│       │       │       File size: 25 bytes
│       │       │       Total lines: 1
│       │       │       <p>user-card works!</p>

│       │       ├── user-card.component.scss
│       │       │   Content:
│       │       │       File size: 0 bytes
│       │       │       Total lines: 0

│       │       ├── user-card.component.spec.ts
│       │       │   Content:
│       │       │       File size: 635 bytes
│       │       │       Total lines: 23
│       │       │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │       │       
│       │       │       import { UserCardComponent } from './user-card.component';
│       │       │       
│       │       │       describe('UserCardComponent', () => {
│       │       │         let component: UserCardComponent;
│       │       │         let fixture: ComponentFixture<UserCardComponent>;
│       │       │       
│       │       │         beforeEach(async () => {
│       │       │           await TestBed.configureTestingModule({
│       │       │             declarations: [UserCardComponent]
│       │       │           })
│       │       │           .compileComponents();
│       │       │       
│       │       │           fixture = TestBed.createComponent(UserCardComponent);
│       │       │           component = fixture.componentInstance;
│       │       │           fixture.detectChanges();
│       │       │         });
│       │       │       
│       │       │         it('should create', () => {
│       │       │           expect(component).toBeTruthy();
│       │       │         });
│       │       │       });

│       │       └── user-card.component.ts
│       │           Content:
│       │               File size: 243 bytes
│       │               Total lines: 11
│       │               import { Component } from '@angular/core';
│       │               
│       │               @Component({
│       │                 selector: 'app-user-card',
│       │                 standalone: false,
│       │                 templateUrl: './user-card.component.html',
│       │                 styleUrl: './user-card.component.scss'
│       │               })
│       │               export class UserCardComponent {
│       │               
│       │               }

│       ├── organisms
│       │   ├── data-table
│       │   │   ├── data-table.component.html
│       │   │   │   Content:
│       │   │   │       File size: 26 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>data-table works!</p>

│       │   │   ├── data-table.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── data-table.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 642 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { DataTableComponent } from './data-table.component';
│       │   │   │       
│       │   │   │       describe('DataTableComponent', () => {
│       │   │   │         let component: DataTableComponent;
│       │   │   │         let fixture: ComponentFixture<DataTableComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [DataTableComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(DataTableComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── data-table.component.ts
│       │   │       Content:
│       │   │           File size: 247 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-data-table',
│       │   │             standalone: false,
│       │   │             templateUrl: './data-table.component.html',
│       │   │             styleUrl: './data-table.component.scss'
│       │   │           })
│       │   │           export class DataTableComponent {
│       │   │           
│       │   │           }

│       │   ├── filters
│       │   │   ├── filters.component.html
│       │   │   │   Content:
│       │   │   │       File size: 23 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>filters works!</p>

│       │   │   ├── filters.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── filters.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 627 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { FiltersComponent } from './filters.component';
│       │   │   │       
│       │   │   │       describe('FiltersComponent', () => {
│       │   │   │         let component: FiltersComponent;
│       │   │   │         let fixture: ComponentFixture<FiltersComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [FiltersComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(FiltersComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── filters.component.ts
│       │   │       Content:
│       │   │           File size: 236 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-filters',
│       │   │             standalone: false,
│       │   │             templateUrl: './filters.component.html',
│       │   │             styleUrl: './filters.component.scss'
│       │   │           })
│       │   │           export class FiltersComponent {
│       │   │           
│       │   │           }

│       │   ├── header
│       │   │   ├── header.component.html
│       │   │   │   Content:
│       │   │   │       File size: 22 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>header works!</p>

│       │   │   ├── header.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── header.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 620 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { HeaderComponent } from './header.component';
│       │   │   │       
│       │   │   │       describe('HeaderComponent', () => {
│       │   │   │         let component: HeaderComponent;
│       │   │   │         let fixture: ComponentFixture<HeaderComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [HeaderComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(HeaderComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── header.component.ts
│       │   │       Content:
│       │   │           File size: 232 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-header',
│       │   │             standalone: false,
│       │   │             templateUrl: './header.component.html',
│       │   │             styleUrl: './header.component.scss'
│       │   │           })
│       │   │           export class HeaderComponent {
│       │   │           
│       │   │           }

│       │   ├── pagination
│       │   │   ├── pagination.component.html
│       │   │   │   Content:
│       │   │   │       File size: 26 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>pagination works!</p>

│       │   │   ├── pagination.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── pagination.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 648 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { PaginationComponent } from './pagination.component';
│       │   │   │       
│       │   │   │       describe('PaginationComponent', () => {
│       │   │   │         let component: PaginationComponent;
│       │   │   │         let fixture: ComponentFixture<PaginationComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [PaginationComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(PaginationComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── pagination.component.ts
│       │   │       Content:
│       │   │           File size: 248 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-pagination',
│       │   │             standalone: false,
│       │   │             templateUrl: './pagination.component.html',
│       │   │             styleUrl: './pagination.component.scss'
│       │   │           })
│       │   │           export class PaginationComponent {
│       │   │           
│       │   │           }

│       │   ├── sidebar
│       │   │   ├── sidebar.component.html
│       │   │   │   Content:
│       │   │   │       File size: 23 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>sidebar works!</p>

│       │   │   ├── sidebar.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── sidebar.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 627 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { SidebarComponent } from './sidebar.component';
│       │   │   │       
│       │   │   │       describe('SidebarComponent', () => {
│       │   │   │         let component: SidebarComponent;
│       │   │   │         let fixture: ComponentFixture<SidebarComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [SidebarComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(SidebarComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── sidebar.component.ts
│       │   │       Content:
│       │   │           File size: 236 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-sidebar',
│       │   │             standalone: false,
│       │   │             templateUrl: './sidebar.component.html',
│       │   │             styleUrl: './sidebar.component.scss'
│       │   │           })
│       │   │           export class SidebarComponent {
│       │   │           
│       │   │           }

│       │   ├── stats-panel
│       │   │   ├── stats-panel.component.html
│       │   │   │   Content:
│       │   │   │       File size: 27 bytes
│       │   │   │       Total lines: 1
│       │   │   │       <p>stats-panel works!</p>

│       │   │   ├── stats-panel.component.scss
│       │   │   │   Content:
│       │   │   │       File size: 0 bytes
│       │   │   │       Total lines: 0

│       │   │   ├── stats-panel.component.spec.ts
│       │   │   │   Content:
│       │   │   │       File size: 649 bytes
│       │   │   │       Total lines: 23
│       │   │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │   │   │       
│       │   │   │       import { StatsPanelComponent } from './stats-panel.component';
│       │   │   │       
│       │   │   │       describe('StatsPanelComponent', () => {
│       │   │   │         let component: StatsPanelComponent;
│       │   │   │         let fixture: ComponentFixture<StatsPanelComponent>;
│       │   │   │       
│       │   │   │         beforeEach(async () => {
│       │   │   │           await TestBed.configureTestingModule({
│       │   │   │             declarations: [StatsPanelComponent]
│       │   │   │           })
│       │   │   │           .compileComponents();
│       │   │   │       
│       │   │   │           fixture = TestBed.createComponent(StatsPanelComponent);
│       │   │   │           component = fixture.componentInstance;
│       │   │   │           fixture.detectChanges();
│       │   │   │         });
│       │   │   │       
│       │   │   │         it('should create', () => {
│       │   │   │           expect(component).toBeTruthy();
│       │   │   │         });
│       │   │   │       });

│       │   │   └── stats-panel.component.ts
│       │   │       Content:
│       │   │           File size: 251 bytes
│       │   │           Total lines: 11
│       │   │           import { Component } from '@angular/core';
│       │   │           
│       │   │           @Component({
│       │   │             selector: 'app-stats-panel',
│       │   │             standalone: false,
│       │   │             templateUrl: './stats-panel.component.html',
│       │   │             styleUrl: './stats-panel.component.scss'
│       │   │           })
│       │   │           export class StatsPanelComponent {
│       │   │           
│       │   │           }

│       │   └── user-form
│       │       ├── user-form.component.html
│       │       │   Content:
│       │       │       File size: 25 bytes
│       │       │       Total lines: 1
│       │       │       <p>user-form works!</p>

│       │       ├── user-form.component.scss
│       │       │   Content:
│       │       │       File size: 0 bytes
│       │       │       Total lines: 0

│       │       ├── user-form.component.spec.ts
│       │       │   Content:
│       │       │       File size: 635 bytes
│       │       │       Total lines: 23
│       │       │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│       │       │       
│       │       │       import { UserFormComponent } from './user-form.component';
│       │       │       
│       │       │       describe('UserFormComponent', () => {
│       │       │         let component: UserFormComponent;
│       │       │         let fixture: ComponentFixture<UserFormComponent>;
│       │       │       
│       │       │         beforeEach(async () => {
│       │       │           await TestBed.configureTestingModule({
│       │       │             declarations: [UserFormComponent]
│       │       │           })
│       │       │           .compileComponents();
│       │       │       
│       │       │           fixture = TestBed.createComponent(UserFormComponent);
│       │       │           component = fixture.componentInstance;
│       │       │           fixture.detectChanges();
│       │       │         });
│       │       │       
│       │       │         it('should create', () => {
│       │       │           expect(component).toBeTruthy();
│       │       │         });
│       │       │       });

│       │       └── user-form.component.ts
│       │           Content:
│       │               File size: 250 bytes
│       │               Total lines: 11
│       │               import { Component } from '@angular/core';
│       │               
│       │               @Component({
│       │                 selector: 'app-shared-user-form',
│       │                 standalone: false,
│       │                 templateUrl: './user-form.component.html',
│       │                 styleUrl: './user-form.component.scss'
│       │               })
│       │               export class UserFormComponent {
│       │               
│       │               }

│       ├── pipes
│       │   ├── filter.pipe.spec.ts
│       │   │   Content:
│       │   │       File size: 195 bytes
│       │   │       Total lines: 8
│       │   │       import { FilterPipe } from './filter.pipe';
│       │   │       
│       │   │       describe('FilterPipe', () => {
│       │   │         it('create an instance', () => {
│       │   │           const pipe = new FilterPipe();
│       │   │           expect(pipe).toBeTruthy();
│       │   │         });
│       │   │       });

│       │   ├── filter.pipe.ts
│       │   │   Content:
│       │   │       File size: 251 bytes
│       │   │       Total lines: 13
│       │   │       import { Pipe, PipeTransform } from '@angular/core';
│       │   │       
│       │   │       @Pipe({
│       │   │         name: 'filter',
│       │   │         standalone: false
│       │   │       })
│       │   │       export class FilterPipe implements PipeTransform {
│       │   │       
│       │   │         transform(value: unknown, ...args: unknown[]): unknown {
│       │   │           return null;
│       │   │         }
│       │   │       
│       │   │       }

│       │   ├── sort.pipe.spec.ts
│       │   │   Content:
│       │   │       File size: 187 bytes
│       │   │       Total lines: 8
│       │   │       import { SortPipe } from './sort.pipe';
│       │   │       
│       │   │       describe('SortPipe', () => {
│       │   │         it('create an instance', () => {
│       │   │           const pipe = new SortPipe();
│       │   │           expect(pipe).toBeTruthy();
│       │   │         });
│       │   │       });

│       │   └── sort.pipe.ts
│       │       Content:
│       │           File size: 247 bytes
│       │           Total lines: 13
│       │           import { Pipe, PipeTransform } from '@angular/core';
│       │           
│       │           @Pipe({
│       │             name: 'sort',
│       │             standalone: false
│       │           })
│       │           export class SortPipe implements PipeTransform {
│       │           
│       │             transform(value: unknown, ...args: unknown[]): unknown {
│       │               return null;
│       │             }
│       │           
│       │           }

│       ├── shared.module.ts
│       │   Content:
│       │       File size: 4284 bytes
│       │       Total lines: 139
│       │       import { NgModule } from '@angular/core';
│       │       import { CommonModule } from '@angular/common';
│       │       import { ReactiveFormsModule, FormsModule } from '@angular/forms';
│       │       import { RouterModule } from '@angular/router';
│       │       
│       │       // Átomos
│       │       import { ButtonComponent } from './atoms/button/button.component';
│       │       import { InputComponent } from './atoms/input/input.component';
│       │       import { BadgeComponent } from './atoms/badge/badge.component';
│       │       import { IconComponent } from './atoms/icon/icon.component';
│       │       import { AvatarComponent } from './atoms/avatar/avatar.component';
│       │       import { SpinnerComponent } from './atoms/spinner/spinner.component';
│       │       import { StatusIndicatorComponent } from './atoms/status-indicator/status-indicator.component';
│       │       import { NotificationsBadgeComponent } from './atoms/notifications-badge/notifications-badge.component';
│       │       
│       │       // Moléculas
│       │       import { FormFieldComponent } from './molecules/form-field/form-field.component';
│       │       import { SearchBarComponent } from './molecules/search-bar/search-bar.component';
│       │       import { CardComponent } from './molecules/card/card.component';
│       │       import { AlertComponent } from './molecules/alert/alert.component';
│       │       import { UserCardComponent } from './molecules/user-card/user-card.component';
│       │       
│       │       // Organismos
│       │       import { HeaderComponent } from './organisms/header/header.component';
│       │       import { SidebarComponent } from './organisms/sidebar/sidebar.component';
│       │       import { PaginationComponent } from './organisms/pagination/pagination.component';
│       │       import { FiltersComponent } from './organisms/filters/filters.component';
│       │       import { DataTableComponent } from './organisms/data-table/data-table.component';
│       │       import { UserFormComponent } from './organisms/user-form/user-form.component';
│       │       import { StatsPanelComponent } from './organisms/stats-panel/stats-panel.component';
│       │       
│       │       // Templates
│       │       import { MainLayoutComponent } from './templates/main-layout/main-layout.component';
│       │       import { AuthLayoutComponent } from './templates/auth-layout/auth-layout.component';
│       │       import { DashboardLayoutComponent } from './templates/dashboard-layout/dashboard-layout.component';
│       │       
│       │       // Directivas
│       │       import { ClickOutsideDirective } from './directives/click-outside.directive';
│       │       import { HasPermissionDirective } from './directives/has-permission.directive';
│       │       
│       │       // Pipes
│       │       import { FilterPipe } from './pipes/filter.pipe';
│       │       import { SortPipe } from './pipes/sort.pipe';
│       │       
│       │       @NgModule({
│       │         declarations: [
│       │           // Átomos
│       │           ButtonComponent,
│       │           InputComponent,
│       │           BadgeComponent,
│       │           IconComponent,
│       │           AvatarComponent,
│       │           SpinnerComponent,
│       │           StatusIndicatorComponent,
│       │           NotificationsBadgeComponent,
│       │           
│       │           // Moléculas
│       │           FormFieldComponent,
│       │           SearchBarComponent,
│       │           CardComponent,
│       │           AlertComponent,
│       │           UserCardComponent,
│       │           
│       │           // Organismos
│       │           HeaderComponent,
│       │           SidebarComponent,
│       │           PaginationComponent,
│       │           FiltersComponent,
│       │           DataTableComponent,
│       │           UserFormComponent,
│       │           StatsPanelComponent,
│       │           
│       │           // Templates
│       │           MainLayoutComponent,
│       │           AuthLayoutComponent,
│       │           DashboardLayoutComponent,
│       │           
│       │           // Directivas
│       │           ClickOutsideDirective,
│       │           HasPermissionDirective,
│       │           
│       │           // Pipes
│       │           FilterPipe,
│       │           SortPipe
│       │         ],
│       │         imports: [
│       │           CommonModule,
│       │           ReactiveFormsModule,
│       │           FormsModule,
│       │           RouterModule
│       │         ],
│       │         exports: [
│       │           // Módulos Angular para que otros módulos puedan usarlos
│       │           CommonModule,
│       │           ReactiveFormsModule,
│       │           FormsModule,
│       │           RouterModule,
│       │           
│       │           // Átomos
│       │           ButtonComponent,
│       │           InputComponent,
│       │           BadgeComponent,
│       │           IconComponent,
│       │           AvatarComponent,
│       │           SpinnerComponent,
│       │           StatusIndicatorComponent,
│       │           NotificationsBadgeComponent,
│       │           
│       │           // Moléculas
│       │           FormFieldComponent,
│       │           SearchBarComponent,
│       │           CardComponent,
│       │           AlertComponent,
│       │           UserCardComponent,
│       │           
│       │           // Organismos
│       │           HeaderComponent,
│       │           SidebarComponent,
│       │           PaginationComponent,
│       │           FiltersComponent,
│       │           DataTableComponent,
│       │           UserFormComponent,
│       │           StatsPanelComponent,
│       │           
│       │           // Templates
│       │           MainLayoutComponent,
│       │           AuthLayoutComponent,
│       │           DashboardLayoutComponent,
│       │           
│       │           // Directivas
│       │           ClickOutsideDirective,
│       │           HasPermissionDirective,
│       │           
│       │           // Pipes
│       │           FilterPipe,
│       │           SortPipe
│       │         ]
│       │       })
│       │       export class SharedModule { }

│       └── templates
│           ├── auth-layout
│           │   ├── auth-layout.component.html
│           │   │   Content:
│           │   │       File size: 27 bytes
│           │   │       Total lines: 1
│           │   │       <p>auth-layout works!</p>

│           │   ├── auth-layout.component.scss
│           │   │   Content:
│           │   │       File size: 0 bytes
│           │   │       Total lines: 0

│           │   ├── auth-layout.component.spec.ts
│           │   │   Content:
│           │   │       File size: 649 bytes
│           │   │       Total lines: 23
│           │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│           │   │       
│           │   │       import { AuthLayoutComponent } from './auth-layout.component';
│           │   │       
│           │   │       describe('AuthLayoutComponent', () => {
│           │   │         let component: AuthLayoutComponent;
│           │   │         let fixture: ComponentFixture<AuthLayoutComponent>;
│           │   │       
│           │   │         beforeEach(async () => {
│           │   │           await TestBed.configureTestingModule({
│           │   │             declarations: [AuthLayoutComponent]
│           │   │           })
│           │   │           .compileComponents();
│           │   │       
│           │   │           fixture = TestBed.createComponent(AuthLayoutComponent);
│           │   │           component = fixture.componentInstance;
│           │   │           fixture.detectChanges();
│           │   │         });
│           │   │       
│           │   │         it('should create', () => {
│           │   │           expect(component).toBeTruthy();
│           │   │         });
│           │   │       });

│           │   └── auth-layout.component.ts
│           │       Content:
│           │           File size: 251 bytes
│           │           Total lines: 11
│           │           import { Component } from '@angular/core';
│           │           
│           │           @Component({
│           │             selector: 'app-auth-layout',
│           │             standalone: false,
│           │             templateUrl: './auth-layout.component.html',
│           │             styleUrl: './auth-layout.component.scss'
│           │           })
│           │           export class AuthLayoutComponent {
│           │           
│           │           }

│           ├── dashboard-layout
│           │   ├── dashboard-layout.component.html
│           │   │   Content:
│           │   │       File size: 32 bytes
│           │   │       Total lines: 1
│           │   │       <p>dashboard-layout works!</p>

│           │   ├── dashboard-layout.component.scss
│           │   │   Content:
│           │   │       File size: 0 bytes
│           │   │       Total lines: 0

│           │   ├── dashboard-layout.component.spec.ts
│           │   │   Content:
│           │   │       File size: 684 bytes
│           │   │       Total lines: 23
│           │   │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│           │   │       
│           │   │       import { DashboardLayoutComponent } from './dashboard-layout.component';
│           │   │       
│           │   │       describe('DashboardLayoutComponent', () => {
│           │   │         let component: DashboardLayoutComponent;
│           │   │         let fixture: ComponentFixture<DashboardLayoutComponent>;
│           │   │       
│           │   │         beforeEach(async () => {
│           │   │           await TestBed.configureTestingModule({
│           │   │             declarations: [DashboardLayoutComponent]
│           │   │           })
│           │   │           .compileComponents();
│           │   │       
│           │   │           fixture = TestBed.createComponent(DashboardLayoutComponent);
│           │   │           component = fixture.componentInstance;
│           │   │           fixture.detectChanges();
│           │   │         });
│           │   │       
│           │   │         it('should create', () => {
│           │   │           expect(component).toBeTruthy();
│           │   │         });
│           │   │       });

│           │   └── dashboard-layout.component.ts
│           │       Content:
│           │           File size: 271 bytes
│           │           Total lines: 11
│           │           import { Component } from '@angular/core';
│           │           
│           │           @Component({
│           │             selector: 'app-dashboard-layout',
│           │             standalone: false,
│           │             templateUrl: './dashboard-layout.component.html',
│           │             styleUrl: './dashboard-layout.component.scss'
│           │           })
│           │           export class DashboardLayoutComponent {
│           │           
│           │           }

│           └── main-layout
│               ├── main-layout.component.html
│               │   Content:
│               │       File size: 471 bytes
│               │       Total lines: 17
│               │       <div class="main-layout">
│               │         <header class="main-header">
│               │           <div class="header-content">
│               │             <div class="logo">
│               │               <h2>🐾 VetApp</h2>
│               │             </div>
│               │             <nav class="nav-links">
│               │               <a routerLink="/usuarios" routerLinkActive="active">Usuarios</a>
│               │               <a routerLink="/usuarios/1" routerLinkActive="active">Usuario Detalle</a>
│               │             </nav>
│               │           </div>
│               │         </header>
│               │       
│               │         <main class="main-content">
│               │           <ng-content></ng-content>
│               │         </main>
│               │       </div>

│               ├── main-layout.component.scss
│               │   Content:
│               │       File size: 1542 bytes
│               │       Total lines: 73
│               │       @use 'variables' as *;
│               │       
│               │       .main-layout {
│               │         min-height: 100vh;
│               │         display: flex;
│               │         flex-direction: column;
│               │         background-color: $neutral-bg;
│               │       }
│               │       
│               │       .main-header {
│               │         background-color: $neutral-light;
│               │         box-shadow: $shadow-md;
│               │         border-bottom: 1px solid rgba($neutral-medium, 0.1);
│               │         position: sticky;
│               │         top: 0;
│               │         z-index: $z-index-sticky;
│               │         
│               │         .header-content {
│               │           max-width: 1200px;
│               │           margin: 0 auto;
│               │           padding: 0 $spacing-lg;
│               │           display: flex;
│               │           justify-content: space-between;
│               │           align-items: center;
│               │           height: $header-height;
│               │           
│               │           .logo {
│               │             h2 {
│               │               margin: 0;
│               │               color: $primary;
│               │               font-family: $font-secondary;
│               │               font-size: $font-size-xl;
│               │               font-weight: $font-weight-bold;
│               │             }
│               │           }
│               │           
│               │           .nav-links {
│               │             display: flex;
│               │             gap: $spacing-lg;
│               │             
│               │             a {
│               │               color: $neutral-medium;
│               │               text-decoration: none;
│               │               font-weight: $font-weight-medium;
│               │               padding: $spacing-xs $spacing-sm;
│               │               border-radius: $border-radius-md;
│               │               transition: $transition-default;
│               │               
│               │               &:hover {
│               │                 color: $primary;
│               │                 background-color: rgba($primary, 0.1);
│               │               }
│               │               
│               │               &.active {
│               │                 color: $primary;
│               │                 background-color: rgba($primary, 0.15);
│               │               }
│               │             }
│               │           }
│               │         }
│               │       }
│               │       
│               │       .main-content {
│               │         flex: 1;
│               │         padding: $spacing-lg;
│               │         max-width: 1200px;
│               │         margin: 0 auto;
│               │         width: 100%;
│               │         
│               │         @media (max-width: $breakpoint-md) {
│               │           padding: $spacing-md;
│               │         }
│               │       }

│               ├── main-layout.component.spec.ts
│               │   Content:
│               │       File size: 649 bytes
│               │       Total lines: 23
│               │       import { ComponentFixture, TestBed } from '@angular/core/testing';
│               │       
│               │       import { MainLayoutComponent } from './main-layout.component';
│               │       
│               │       describe('MainLayoutComponent', () => {
│               │         let component: MainLayoutComponent;
│               │         let fixture: ComponentFixture<MainLayoutComponent>;
│               │       
│               │         beforeEach(async () => {
│               │           await TestBed.configureTestingModule({
│               │             declarations: [MainLayoutComponent]
│               │           })
│               │           .compileComponents();
│               │       
│               │           fixture = TestBed.createComponent(MainLayoutComponent);
│               │           component = fixture.componentInstance;
│               │           fixture.detectChanges();
│               │         });
│               │       
│               │         it('should create', () => {
│               │           expect(component).toBeTruthy();
│               │         });
│               │       });

│               └── main-layout.component.ts
│                   Content:
│                       File size: 251 bytes
│                       Total lines: 11
│                       import { Component } from '@angular/core';
│                       
│                       @Component({
│                         selector: 'app-main-layout',
│                         standalone: false,
│                         templateUrl: './main-layout.component.html',
│                         styleUrl: './main-layout.component.scss'
│                       })
│                       export class MainLayoutComponent {
│                       
│                       }

├── assets
│   └── styles
│       ├── base
│       │   ├── _reset.scss
│       │   │   Content:
│       │   │       File size: 1524 bytes
│       │   │       Total lines: 93
│       │   │       // ========================================
│       │   │       // RESET Y NORMALIZE
│       │   │       // ========================================
│       │   │       
│       │   │       *,
│       │   │       *::before,
│       │   │       *::after {
│       │   │         box-sizing: border-box;
│       │   │       }
│       │   │       
│       │   │       html {
│       │   │         font-family: sans-serif;
│       │   │         line-height: 1.15;
│       │   │         -webkit-text-size-adjust: 100%;
│       │   │         -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
│       │   │       }
│       │   │       
│       │   │       body {
│       │   │         margin: 0;
│       │   │         font-family: var(--font-primary, 'Roboto', sans-serif);
│       │   │         font-size: 1rem;
│       │   │         font-weight: 400;
│       │   │         line-height: 1.5;
│       │   │         color: #333333;
│       │   │         text-align: left;
│       │   │         background-color: #F2F2F2;
│       │   │       }
│       │   │       
│       │   │       // Remove margins and padding from common elements
│       │   │       h1, h2, h3, h4, h5, h6,
│       │   │       p, blockquote, pre,
│       │   │       dl, dd, ol, ul,
│       │   │       figure, hr,
│       │   │       fieldset, legend {
│       │   │         margin: 0;
│       │   │         padding: 0;
│       │   │       }
│       │   │       
│       │   │       // Remove list styles
│       │   │       ol, ul {
│       │   │         list-style: none;
│       │   │       }
│       │   │       
│       │   │       // Make images easier to work with
│       │   │       img,
│       │   │       svg {
│       │   │         max-width: 100%;
│       │   │         height: auto;
│       │   │       }
│       │   │       
│       │   │       // Inherit fonts for inputs and buttons
│       │   │       input,
│       │   │       button,
│       │   │       textarea,
│       │   │       select {
│       │   │         font: inherit;
│       │   │       }
│       │   │       
│       │   │       // Remove built-in form typography styles
│       │   │       input,
│       │   │       button,
│       │   │       textarea,
│       │   │       select {
│       │   │         margin: 0;
│       │   │       }
│       │   │       
│       │   │       // Make sure textareas without a rows attribute are not tiny
│       │   │       textarea:not([rows]) {
│       │   │         min-height: 10em;
│       │   │       }
│       │   │       
│       │   │       // Anything that has been anchored to should have extra scroll margin
│       │   │       :target {
│       │   │         scroll-margin-block: 5ex;
│       │   │       }
│       │   │       
│       │   │       // Remove button styling
│       │   │       button {
│       │   │         background: none;
│       │   │         border: none;
│       │   │         padding: 0;
│       │   │         cursor: pointer;
│       │   │       }
│       │   │       
│       │   │       // Links
│       │   │       a {
│       │   │         color: inherit;
│       │   │         text-decoration: none;
│       │   │       }
│       │   │       
│       │   │       a:hover {
│       │   │         text-decoration: underline;
│       │   │       }

│       │   ├── _typography.scss
│       │   │   Content:
│       │   │       File size: 1947 bytes
│       │   │       Total lines: 84
│       │   │       // ========================================
│       │   │       // TIPOGRAFÍA
│       │   │       // ========================================
│       │   │       
│       │   │       // Importar fuentes de Google Fonts
│       │   │       @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Montserrat:wght@400;500;600;700&display=swap');
│       │   │       
│       │   │       // Variables CSS para tipografía
│       │   │       :root {
│       │   │         --font-primary: 'Roboto', sans-serif;
│       │   │         --font-secondary: 'Montserrat', sans-serif;
│       │   │         
│       │   │         --font-weight-light: 300;
│       │   │         --font-weight-regular: 400;
│       │   │         --font-weight-medium: 500;
│       │   │         --font-weight-bold: 700;
│       │   │         
│       │   │         --font-size-xs: 0.75rem;    // 12px
│       │   │         --font-size-sm: 0.875rem;   // 14px
│       │   │         --font-size-md: 1rem;       // 16px
│       │   │         --font-size-lg: 1.125rem;   // 18px
│       │   │         --font-size-xl: 1.25rem;    // 20px
│       │   │         --font-size-2xl: 1.5rem;    // 24px
│       │   │         --font-size-3xl: 1.875rem;  // 30px
│       │   │         
│       │   │         --line-height-compact: 1.3;
│       │   │         --line-height-normal: 1.5;
│       │   │         --line-height-spacious: 1.7;
│       │   │       }
│       │   │       
│       │   │       // Estilos base de texto
│       │   │       body {
│       │   │         font-family: var(--font-primary);
│       │   │         font-weight: var(--font-weight-regular);
│       │   │         line-height: var(--line-height-normal);
│       │   │       }
│       │   │       
│       │   │       // Headings
│       │   │       h1, h2, h3, h4, h5, h6 {
│       │   │         font-family: var(--font-secondary);
│       │   │         font-weight: var(--font-weight-bold);
│       │   │         line-height: var(--line-height-compact);
│       │   │         margin-bottom: 0.5em;
│       │   │         color: #333333;
│       │   │       }
│       │   │       
│       │   │       h1 { font-size: var(--font-size-3xl); }
│       │   │       h2 { font-size: var(--font-size-2xl); }
│       │   │       h3 { font-size: var(--font-size-xl); }
│       │   │       h4 { font-size: var(--font-size-lg); }
│       │   │       h5 { font-size: var(--font-size-md); }
│       │   │       h6 { font-size: var(--font-size-sm); }
│       │   │       
│       │   │       // Párrafos
│       │   │       p {
│       │   │         margin-bottom: 1rem;
│       │   │         color: #333333;
│       │   │       }
│       │   │       
│       │   │       // Enlaces
│       │   │       a {
│       │   │         color: #5941F2;
│       │   │         text-decoration: none;
│       │   │         
│       │   │         &:hover {
│       │   │           text-decoration: underline;
│       │   │         }
│       │   │       }
│       │   │       
│       │   │       // Texto pequeño
│       │   │       small {
│       │   │         font-size: var(--font-size-xs);
│       │   │         color: #757575;
│       │   │       }
│       │   │       
│       │   │       // Texto en negrita
│       │   │       strong, b {
│       │   │         font-weight: var(--font-weight-bold);
│       │   │       }
│       │   │       
│       │   │       // Texto en cursiva
│       │   │       em, i {
│       │   │         font-style: italic;
│       │   │       }

│       │   └── _variables.scss
│       │       Content:
│       │           File size: 2300 bytes
│       │           Total lines: 106
│       │           // ========================================
│       │           // VARIABLES DE VETAPP
│       │           // ========================================
│       │           
│       │           // Colores Primarios
│       │           $primary: #5941F2;
│       │           $primary-light: #705CF2;
│       │           $primary-dark: #4A34D3;
│       │           
│       │           // Colores Secundarios
│       │           $secondary: #04D94F;
│       │           $secondary-light: #26E06A;
│       │           $secondary-dark: #03B541;
│       │           
│       │           // Colores Terciarios
│       │           $tertiary: #5549A6;
│       │           $tertiary-light: #6A5DC0;
│       │           $tertiary-dark: #463B87;
│       │           
│       │           // Colores Neutros
│       │           $neutral-bg: #F2F2F2;
│       │           $neutral-dark: #333333;
│       │           $neutral-medium: #757575;
│       │           $neutral-light: #FFFFFF;
│       │           
│       │           // Colores Semánticos
│       │           $success: #04D94F;
│       │           $warning: #FFB400;
│       │           $error: #FF3B30;
│       │           $info: #0A84FF;
│       │           
│       │           // Gradientes
│       │           $gradient-primary: linear-gradient(135deg, $primary 0%, $primary-light 100%);
│       │           
│       │           // Tipografía
│       │           $font-primary: 'Roboto', sans-serif;
│       │           $font-secondary: 'Montserrat', sans-serif;
│       │           
│       │           // Pesos de Fuente
│       │           $font-weight-regular: 400;
│       │           $font-weight-medium: 500;
│       │           $font-weight-bold: 700;
│       │           
│       │           // Tamaños de Fuente
│       │           $font-size-base: 16px;
│       │           $font-size-xs: 12px;
│       │           $font-size-sm: 14px;
│       │           $font-size-md: 16px;
│       │           $font-size-lg: 18px;
│       │           $font-size-xl: 20px;
│       │           $font-size-2xl: 24px;
│       │           $font-size-3xl: 30px;
│       │           
│       │           // Alturas de Línea
│       │           $line-height-compact: 1.3;
│       │           $line-height-normal: 1.5;
│       │           $line-height-spacious: 1.7;
│       │           
│       │           // Espaciado
│       │           $spacing-xxs: 4px;
│       │           $spacing-xs: 8px;
│       │           $spacing-sm: 12px;
│       │           $spacing-md: 16px;
│       │           $spacing-lg: 24px;
│       │           $spacing-xl: 32px;
│       │           $spacing-2xl: 48px;
│       │           $spacing-3xl: 64px;
│       │           
│       │           // Border Radius
│       │           $border-radius-sm: 4px;
│       │           $border-radius-md: 8px;
│       │           $border-radius-lg: 12px;
│       │           $border-radius-xl: 16px;
│       │           $border-radius-circle: 50%;
│       │           
│       │           // Sombras
│       │           $shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
│       │           $shadow-md: 0 2px 4px rgba(0, 0, 0, 0.1);
│       │           $shadow-lg: 0 4px 8px rgba(0, 0, 0, 0.1);
│       │           $shadow-xl: 0 8px 16px rgba(0, 0, 0, 0.1);
│       │           
│       │           // Transiciones
│       │           $transition-default: 150ms ease-out;
│       │           
│       │           // Z-index
│       │           $z-index-dropdown: 1000;
│       │           $z-index-sticky: 1020;
│       │           $z-index-fixed: 1030;
│       │           $z-index-modal-backdrop: 1040;
│       │           $z-index-modal: 1050;
│       │           $z-index-popover: 1060;
│       │           $z-index-tooltip: 1070;
│       │           
│       │           // Breakpoints
│       │           $breakpoint-xs: 0;
│       │           $breakpoint-sm: 576px;
│       │           $breakpoint-md: 768px;
│       │           $breakpoint-lg: 992px;
│       │           $breakpoint-xl: 1200px;
│       │           
│       │           // Componentes específicos
│       │           $header-height: 64px;
│       │           $sidebar-width: 240px;
│       │           $sidebar-collapsed-width: 80px;
│       │           $input-height: 40px;
│       │           $button-height: 40px;

│       ├── components
│       │   ├── _buttons.scss
│       │   │   Content:
│       │   │       File size: 2528 bytes
│       │   │       Total lines: 127
│       │   │       // ========================================
│       │   │       // BOTONES
│       │   │       // ========================================
│       │   │       
│       │   │       .btn {
│       │   │         display: inline-flex;
│       │   │         align-items: center;
│       │   │         justify-content: center;
│       │   │         padding: 8px 16px;
│       │   │         font-family: var(--font-primary);
│       │   │         font-size: var(--font-size-sm);
│       │   │         font-weight: var(--font-weight-medium);
│       │   │         line-height: 1.5;
│       │   │         text-align: center;
│       │   │         text-decoration: none;
│       │   │         vertical-align: middle;
│       │   │         cursor: pointer;
│       │   │         user-select: none;
│       │   │         border: 1px solid transparent;
│       │   │         border-radius: 8px;
│       │   │         transition: all 150ms ease-out;
│       │   │         gap: 8px;
│       │   │         min-height: 40px;
│       │   │         
│       │   │         &:focus {
│       │   │           outline: 2px solid #5941F2;
│       │   │           outline-offset: 2px;
│       │   │         }
│       │   │         
│       │   │         &:disabled {
│       │   │           opacity: 0.5;
│       │   │           cursor: not-allowed;
│       │   │           pointer-events: none;
│       │   │         }
│       │   │         
│       │   │         // Tamaños
│       │   │         &.btn-sm {
│       │   │           padding: 4px 12px;
│       │   │           font-size: var(--font-size-xs);
│       │   │           min-height: 32px;
│       │   │         }
│       │   │         
│       │   │         &.btn-lg {
│       │   │           padding: 12px 24px;
│       │   │           font-size: var(--font-size-md);
│       │   │           min-height: 48px;
│       │   │         }
│       │   │         
│       │   │         // Ancho completo
│       │   │         &.w-100 {
│       │   │           width: 100%;
│       │   │         }
│       │   │         
│       │   │         // Variantes
│       │   │         &.btn-primary {
│       │   │           background-color: #5941F2;
│       │   │           border-color: #5941F2;
│       │   │           color: #FFFFFF;
│       │   │           
│       │   │           &:hover:not(:disabled) {
│       │   │             background-color: #4A34D3;
│       │   │             border-color: #4A34D3;
│       │   │           }
│       │   │           
│       │   │           &:active {
│       │   │             background-color: #3F2BB8;
│       │   │             border-color: #3F2BB8;
│       │   │           }
│       │   │         }
│       │   │         
│       │   │         &.btn-secondary {
│       │   │           background-color: transparent;
│       │   │           border-color: #5941F2;
│       │   │           color: #5941F2;
│       │   │           
│       │   │           &:hover:not(:disabled) {
│       │   │             background-color: rgba(89, 65, 242, 0.1);
│       │   │           }
│       │   │           
│       │   │           &:active {
│       │   │             background-color: rgba(89, 65, 242, 0.2);
│       │   │           }
│       │   │         }
│       │   │         
│       │   │         &.btn-success {
│       │   │           background-color: #04D94F;
│       │   │           border-color: #04D94F;
│       │   │           color: #FFFFFF;
│       │   │           
│       │   │           &:hover:not(:disabled) {
│       │   │             background-color: #03B541;
│       │   │             border-color: #03B541;
│       │   │           }
│       │   │         }
│       │   │         
│       │   │         &.btn-danger {
│       │   │           background-color: #FF3B30;
│       │   │           border-color: #FF3B30;
│       │   │           color: #FFFFFF;
│       │   │           
│       │   │           &:hover:not(:disabled) {
│       │   │             background-color: #E6352A;
│       │   │             border-color: #E6352A;
│       │   │           }
│       │   │         }
│       │   │         
│       │   │         &.btn-warning {
│       │   │           background-color: #FFB400;
│       │   │           border-color: #FFB400;
│       │   │           color: #FFFFFF;
│       │   │           
│       │   │           &:hover:not(:disabled) {
│       │   │             background-color: #E6A200;
│       │   │             border-color: #E6A200;
│       │   │           }
│       │   │         }
│       │   │         
│       │   │         &.btn-tertiary {
│       │   │           background-color: transparent;
│       │   │           border-color: transparent;
│       │   │           color: #5941F2;
│       │   │           
│       │   │           &:hover:not(:disabled) {
│       │   │             background-color: rgba(89, 65, 242, 0.1);
│       │   │           }
│       │   │         }
│       │   │       }

│       │   ├── _cards.scss
│       │   │   Content:
│       │   │       File size: 1473 bytes
│       │   │       Total lines: 69
│       │   │       // ========================================
│       │   │       // TARJETAS
│       │   │       // ========================================
│       │   │       
│       │   │       .card {
│       │   │         position: relative;
│       │   │         display: flex;
│       │   │         flex-direction: column;
│       │   │         min-width: 0;
│       │   │         word-wrap: break-word;
│       │   │         background-color: #FFFFFF;
│       │   │         background-clip: border-box;
│       │   │         border: 1px solid rgba(0, 0, 0, 0.05);
│       │   │         border-radius: 12px;
│       │   │         box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
│       │   │         
│       │   │         .card-header {
│       │   │           padding: 16px;
│       │   │           margin-bottom: 0;
│       │   │           background-color: #F2F2F2;
│       │   │           border-bottom: 1px solid rgba(0, 0, 0, 0.05);
│       │   │           border-top-left-radius: 12px;
│       │   │           border-top-right-radius: 12px;
│       │   │           
│       │   │           &:first-child {
│       │   │             border-radius: 12px 12px 0 0;
│       │   │           }
│       │   │         }
│       │   │         
│       │   │         .card-body {
│       │   │           flex: 1 1 auto;
│       │   │           padding: 16px;
│       │   │         }
│       │   │         
│       │   │         .card-footer {
│       │   │           padding: 16px;
│       │   │           background-color: #F2F2F2;
│       │   │           border-top: 1px solid rgba(0, 0, 0, 0.05);
│       │   │           border-bottom-left-radius: 12px;
│       │   │           border-bottom-right-radius: 12px;
│       │   │           
│       │   │           &:last-child {
│       │   │             border-radius: 0 0 12px 12px;
│       │   │           }
│       │   │         }
│       │   │         
│       │   │         .card-title {
│       │   │           margin-bottom: 8px;
│       │   │           font-size: var(--font-size-lg);
│       │   │           font-weight: var(--font-weight-bold);
│       │   │           color: #333333;
│       │   │         }
│       │   │         
│       │   │         .card-subtitle {
│       │   │           margin-bottom: 8px;
│       │   │           font-size: var(--font-size-sm);
│       │   │           font-weight: var(--font-weight-medium);
│       │   │           color: #757575;
│       │   │         }
│       │   │         
│       │   │         .card-text {
│       │   │           margin-bottom: 16px;
│       │   │           color: #333333;
│       │   │           
│       │   │           &:last-child {
│       │   │             margin-bottom: 0;
│       │   │           }
│       │   │         }
│       │   │       }

│       │   └── _forms.scss
│       │       Content:
│       │           File size: 1744 bytes
│       │           Total lines: 93
│       │           // ========================================
│       │           // FORMULARIOS
│       │           // ========================================
│       │           
│       │           .form-control {
│       │             display: block;
│       │             width: 100%;
│       │             padding: 8px 12px;
│       │             font-family: var(--font-primary);
│       │             font-size: var(--font-size-sm);
│       │             font-weight: var(--font-weight-regular);
│       │             line-height: 1.5;
│       │             color: #333333;
│       │             background-color: #FFFFFF;
│       │             background-clip: padding-box;
│       │             border: 1px solid #757575;
│       │             border-radius: 8px;
│       │             transition: border-color 150ms ease-out, box-shadow 150ms ease-out;
│       │             min-height: 40px;
│       │             
│       │             &:focus {
│       │               border-color: #5941F2;
│       │               outline: 0;
│       │               box-shadow: 0 0 0 2px rgba(89, 65, 242, 0.25);
│       │             }
│       │             
│       │             &::placeholder {
│       │               color: #757575;
│       │               opacity: 1;
│       │             }
│       │             
│       │             &:disabled {
│       │               background-color: #F2F2F2;
│       │               opacity: 1;
│       │             }
│       │             
│       │             &.error {
│       │               border-color: #FF3B30;
│       │               
│       │               &:focus {
│       │                 border-color: #FF3B30;
│       │                 box-shadow: 0 0 0 2px rgba(255, 59, 48, 0.25);
│       │               }
│       │             }
│       │           }
│       │           
│       │           .form-label {
│       │             display: inline-block;
│       │             margin-bottom: 4px;
│       │             font-size: var(--font-size-sm);
│       │             font-weight: var(--font-weight-medium);
│       │             color: #333333;
│       │           }
│       │           
│       │           .form-text {
│       │             margin-top: 4px;
│       │             font-size: var(--font-size-xs);
│       │             color: #757575;
│       │           }
│       │           
│       │           .form-error {
│       │             margin-top: 4px;
│       │             font-size: var(--font-size-xs);
│       │             color: #FF3B30;
│       │           }
│       │           
│       │           .required {
│       │             color: #FF3B30;
│       │           }
│       │           
│       │           // Checkboxes y radios
│       │           input[type="checkbox"],
│       │           input[type="radio"] {
│       │             margin: 0;
│       │             margin-right: 8px;
│       │             accent-color: #5941F2;
│       │           }
│       │           
│       │           // Select
│       │           select.form-control {
│       │             cursor: pointer;
│       │             
│       │             &:focus {
│       │               border-color: #5941F2;
│       │               box-shadow: 0 0 0 2px rgba(89, 65, 242, 0.25);
│       │             }
│       │           }
│       │           
│       │           // Textarea
│       │           textarea.form-control {
│       │             resize: vertical;
│       │             min-height: 80px;
│       │           }

│       └── main.scss
│           Content:
│               File size: 1137 bytes
│               Total lines: 67
│               // ========================================
│               // ARCHIVO PRINCIPAL DE ESTILOS - VETAPP
│               // ========================================
│               
│               // Base
│               @use 'base/reset';
│               @use 'base/variables' as *;
│               @use 'base/typography';
│               
│               // Componentes
│               @use 'components/buttons';
│               @use 'components/forms';
│               @use 'components/cards';
│               
│               // Utilidades globales
│               .d-flex {
│                 display: flex;
│               }
│               
│               .d-block {
│                 display: block;
│               }
│               
│               .d-none {
│                 display: none;
│               }
│               
│               .text-center {
│                 text-align: center;
│               }
│               
│               .text-left {
│                 text-align: left;
│               }
│               
│               .text-right {
│                 text-align: right;
│               }
│               
│               .w-100 {
│                 width: 100%;
│               }
│               
│               .h-100 {
│                 height: 100%;
│               }
│               
│               .mb-0 { margin-bottom: 0; }
│               .mb-1 { margin-bottom: 4px; }
│               .mb-2 { margin-bottom: 8px; }
│               .mb-3 { margin-bottom: 12px; }
│               .mb-4 { margin-bottom: 16px; }
│               .mb-5 { margin-bottom: 24px; }
│               
│               .mt-0 { margin-top: 0; }
│               .mt-1 { margin-top: 4px; }
│               .mt-2 { margin-top: 8px; }
│               .mt-3 { margin-top: 12px; }
│               .mt-4 { margin-top: 16px; }
│               .mt-5 { margin-top: 24px; }
│               
│               .p-0 { padding: 0; }
│               .p-1 { padding: 4px; }
│               .p-2 { padding: 8px; }
│               .p-3 { padding: 12px; }
│               .p-4 { padding: 16px; }
│               .p-5 { padding: 24px; }

├── environments
│   ├── environment.prod.ts
│   │   Content:
│   │       File size: 941 bytes
│   │       Total lines: 40
│   │       // Environment para producción
│   │       export const environment = {
│   │         production: true,
│   │         apiUrl: 'https://api.vetapp.com/api',
│   │         appName: 'VetApp',
│   │         version: '1.0.0',
│   │         
│   │         // Configuraciones específicas de producción
│   │         enableDebugMode: false,
│   │         enableMockData: false,
│   │         logLevel: 'error',
│   │         
│   │         // URLs de servicios
│   │         authUrl: 'https://api.vetapp.com/api/auth',
│   │         uploadUrl: 'https://api.vetapp.com/api/upload',
│   │         
│   │         // Configuraciones de features
│   │         features: {
│   │           enableAdvancedReports: true,
│   │           enableNotifications: true,
│   │           enableUserTracking: true
│   │         },
│   │         
│   │         // Configuraciones de terceros
│   │         analytics: {
│   │           enabled: true,
│   │           trackingId: 'GA-XXXX-X'
│   │         },
│   │         
│   │         // Timeouts y límites
│   │         httpTimeout: 15000, // 15 segundos
│   │         maxFileSize: 5242880, // 5MB en bytes
│   │         
│   │         // Configuraciones de toast/notificaciones
│   │         toast: {
│   │           duration: 4000,
│   │           position: 'top-right' as const,
│   │           maxToasts: 3
│   │         }
│   │       };

│   ├── environment.staging.ts
│   │   Content:
│   │       File size: 991 bytes
│   │       Total lines: 40
│   │       // Environment para staging/pre-producción
│   │       export const environment = {
│   │         production: false,
│   │         apiUrl: 'https://staging-api.vetapp.com/api',
│   │         appName: 'VetApp (Staging)',
│   │         version: '1.0.0-staging',
│   │         
│   │         // Configuraciones específicas de staging
│   │         enableDebugMode: true,
│   │         enableMockData: false,
│   │         logLevel: 'warn',
│   │         
│   │         // URLs de servicios
│   │         authUrl: 'https://staging-api.vetapp.com/api/auth',
│   │         uploadUrl: 'https://staging-api.vetapp.com/api/upload',
│   │         
│   │         // Configuraciones de features
│   │         features: {
│   │           enableAdvancedReports: true,
│   │           enableNotifications: true,
│   │           enableUserTracking: true
│   │         },
│   │         
│   │         // Configuraciones de terceros
│   │         analytics: {
│   │           enabled: false,
│   │           trackingId: 'GA-TEST-X'
│   │         },
│   │         
│   │         // Timeouts y límites
│   │         httpTimeout: 20000, // 20 segundos
│   │         maxFileSize: 8388608, // 8MB en bytes
│   │         
│   │         // Configuraciones de toast/notificaciones
│   │         toast: {
│   │           duration: 5000,
│   │           position: 'top-right' as const,
│   │           maxToasts: 5
│   │         }
│   │       };

│   ├── environment.test.ts
│   │   Content:
│   │       File size: 934 bytes
│   │       Total lines: 40
│   │       // Environment para testing
│   │       export const environment = {
│   │         production: false,
│   │         apiUrl: 'http://localhost:3000/api',
│   │         appName: 'VetApp (Test)',
│   │         version: '1.0.0-test',
│   │         
│   │         // Configuraciones específicas de testing
│   │         enableDebugMode: true,
│   │         enableMockData: true,
│   │         logLevel: 'debug',
│   │         
│   │         // URLs de servicios
│   │         authUrl: 'http://localhost:3000/api/auth',
│   │         uploadUrl: 'http://localhost:3000/api/upload',
│   │         
│   │         // Configuraciones de features
│   │         features: {
│   │           enableAdvancedReports: false,
│   │           enableNotifications: false,
│   │           enableUserTracking: false
│   │         },
│   │         
│   │         // Configuraciones de terceros
│   │         analytics: {
│   │           enabled: false,
│   │           trackingId: ''
│   │         },
│   │         
│   │         // Timeouts y límites
│   │         httpTimeout: 5000, // 5 segundos
│   │         maxFileSize: 1048576, // 1MB en bytes
│   │         
│   │         // Configuraciones de toast/notificaciones
│   │         toast: {
│   │           duration: 1000,
│   │           position: 'top-right' as const,
│   │           maxToasts: 1
│   │         }
│   │       };

│   └── environment.ts
│       Content:
│           File size: 931 bytes
│           Total lines: 40
│           // Environment para desarrollo
│           export const environment = {
│             production: false,
│             apiUrl: 'http://localhost:8080/api',
│             appName: 'VetApp',
│             version: '1.0.0',
│             
│             // Configuraciones específicas de desarrollo
│             enableDebugMode: true,
│             enableMockData: false,
│             logLevel: 'debug',
│             
│             // URLs de servicios
│             authUrl: 'http://localhost:8080/api/auth',
│             uploadUrl: 'http://localhost:8080/api/upload',
│             
│             // Configuraciones de features
│             features: {
│               enableAdvancedReports: true,
│               enableNotifications: true,
│               enableUserTracking: false
│             },
│             
│             // Configuraciones de terceros
│             analytics: {
│               enabled: false,
│               trackingId: ''
│             },
│             
│             // Timeouts y límites
│             httpTimeout: 30000, // 30 segundos
│             maxFileSize: 10485760, // 10MB en bytes
│             
│             // Configuraciones de toast/notificaciones
│             toast: {
│               duration: 5000,
│               position: 'top-right' as const,
│               maxToasts: 5
│             }
│           };

├── index.html
│   Content:
│       File size: 548 bytes
│       Total lines: 15
│       <!doctype html>
│       <html lang="en">
│       <head>
│         <meta charset="utf-8">
│         <title>VetApp</title>
│         <base href="/">
│         <meta name="viewport" content="width=device-width, initial-scale=1">
│         <link rel="icon" type="image/x-icon" href="favicon.ico">
│         <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
│         <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
│       </head>
│       <body>
│         <app-root></app-root>
│       </body>
│       </html>

├── main.ts
│   Content:
│       File size: 255 bytes
│       Total lines: 7
│       import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
│       import { AppModule } from './app/app.module';
│       
│       platformBrowserDynamic().bootstrapModule(AppModule, {
│         ngZoneEventCoalescing: true,
│       })
│         .catch(err => console.error(err));

└── styles.scss
    Content:
        File size: 389 bytes
        Total lines: 15
        // ========================================
        // ESTILOS GLOBALES DE VETAPP
        // ========================================
        
        @use './assets/styles/main.scss';
        
        // Estilos adicionales específicos de la aplicación
        html, body {
          height: 100%;
          margin: 0;
          padding: 0;
        }
        
        // Estilos para Angular Material (si se usa)
        //@import '~@angular/material/prebuilt-themes/indigo-pink.css';

